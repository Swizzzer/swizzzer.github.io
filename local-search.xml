<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>nazo之旅</title>
    <link href="/nazo%E4%B9%8B%E6%97%85.html"/>
    <url>/nazo%E4%B9%8B%E6%97%85.html</url>
    
    <content type="html"><![CDATA[<p>第一次听说<ahref="https://nazo.one-story.cn">nazo</a>是在高考后的暑假.彼时因发挥失常而和同学整天吹水聊天,偶然从别人口中得知了这个解谜网站--遗憾的是当时做到一半觉得无聊就搁置了.最近恰逢考完难得的闲暇,干脆就捡起来通一次.</p><h1 id="level-1-3">Level 1-3</h1><p>第一关就让输入答案,然而页面上找不到问题,因此一个自然的思路就是修改URL中的文件路径.将nazo-1中的数字依次修改为2,3,4即可过关.</p><h1 id="level-4">Level 4</h1><p>Level4中继续尝试上述方法会得到失败的结果,因此打开浏览器控制台准备检查元素,然后发现答案直接就写在控制台里<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">answer:</span> level-five<br></code></pre></td></tr></table></figure> 过关.</p><h1 id="level-5">Level 5</h1><p>JavaScript中NaN表示不是任何一个数字的元素,自然不能比较相等与否.输入返回值<code>false</code>,过关.</p><h1 id="level-6">Level 6</h1><p>Level6是4行分行数字,提示为4个字母.我首先考虑到的就是9键键盘,但是尝试输入后没能得到什么有价值的字符--然后发现其实就是单纯的把数字对应到9键键盘上得到的图案.先填入H1I1,不对;后面想到9键下的图案I也许是Z,尝试<code>H1Z1</code>,过关.</p><h1 id="level-7">Level 7</h1><p>显然这一串字母都有Y轴方向的对称轴.填入<code>OTU</code>,过关.</p><h1 id="level-8">Level 8</h1><p>给出了一个颜文字询问"他是谁",搜索得到对应文字为"超人来了".填入<code>superman</code>,过关.</p><h1 id="level-9">Level 9</h1><p>背景色变成了蓝色.直接检查元素得到背景色色号为#66CCFF,输入<code>66CCFF</code>,过关.</p><h1 id="level-10">Level 10</h1><p>倒过来发现要求我们去检查知乎页面的Console Log: <imgsrc="../assets/2023-05-12%2021.11.17.png" alt="看起来长这样" />Hire,按照倒序填入,过关.</p><h1 id="level-11">Level 11</h1><p>给出了一个字符串和一句话"越过长城,走向世界"--得,肯定是要翻墙的.Google了下这个字符串,并没有发现什么有意义的结果(前面大多数页面都是nazo攻略...)</p><p>没办法,总不能点进攻略看吧,提示里说"全世界最大的xx网站",所以目光锁定了GitHub,YouTube和Porn...(大雾)</p><p>GitHub的URL没啥与这个串的相同点,但是YouTube就不同了,观察以下能发现这应该是一个视频的ID:<img src="../assets/2023-05-12%2021.20.05.png" /></p><p>将"v="后面的字段替换为TKw4YRR17dg访问后看到了一个标题为"Nazo-Game:Fantastic"的视频,那么答案应该就是<code>Fantastic</code>了.输入,过关.</p><p>(这个视频还是非公开的视频,作者为了避免被轻易检索到还是有点小心思的)</p><h1 id="level-12">Level 12</h1><p>(40.689241, -74.044515)这个键值对一看就很像经纬度.打开GoogleMap输入,定位到了自由女神像...输入<code>statue_of_liberty</code>,过关.</p><h1 id="level-13">Level 13</h1><p>一段文字缩写,原内容应该是2 Levels Back BGM--两关之前,正好就是Level11的那个视频.评论区告知BGM名称为<code>longhorn</code>,输入,过关.</p><h1 id="level-14">Level 14</h1><p>JumpDollar,也就是<code>Jump $</code>,提示是四个字母且汇编相关(其实不提示也很容易想到是汇编).汇编中$表示PC指向的地址,跳转到当前地址,明显意指循环(loop).输入<code>loop</code>,过关.</p><h1 id="level-15">Level 15</h1><p>空白,提示也是void.尝试输入empty,null等字串均不通过,无奈继续打开控制台检查元素.检索字段<code>answer</code>,在<code>54f001c6bf2b13aa6cf4.js</code>这个脚本中发现了这么一段:<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-attr">mounted</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>                    <span class="hljs-keyword">var</span> t = <span class="hljs-variable language_">this</span>,<br>                        e = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.content-slot&quot;</span>).<span class="hljs-title function_">getBoundingClientRect</span>().<span class="hljs-property">height</span>;<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">footerHeight</span> = e + <span class="hljs-number">120</span>, <span class="hljs-number">18</span> === <span class="hljs-variable language_">this</span>.<span class="hljs-property">levelNum</span>)<br>                        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;keydown&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">t</span>) &#123;<br>                            <span class="hljs-number">90</span> == t.<span class="hljs-property">keyCode</span> &amp;&amp; t.<span class="hljs-property">ctrlKey</span> &amp;&amp; (<span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;./brainfuck&quot;</span>)<br>                        &#125;);<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-number">15</span> === <span class="hljs-variable language_">this</span>.<span class="hljs-property">levelNum</span>)<br>                        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>                            <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-string">&quot;answer: awesome&quot;</span><br>                        &#125;, <span class="hljs-number">3e3</span>);<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-number">4</span> === <span class="hljs-variable language_">this</span>.<span class="hljs-property">levelNum</span>)<br>                        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;answer: level-five&quot;</span>);<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-number">22</span> === <span class="hljs-variable language_">this</span>.<span class="hljs-property">levelNum</span>)<br>                        <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;resize&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">t</span>) &#123;<br>                            t.<span class="hljs-property">target</span>.<span class="hljs-property">innerWidth</span> &lt; <span class="hljs-number">320</span> ? <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.question-text&quot;</span>).<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;TOBORRM&quot;</span> : <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.question-text&quot;</span>).<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;width: 320px;&quot;</span><br>                        &#125;);<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-number">25</span> === <span class="hljs-variable language_">this</span>.<span class="hljs-property">levelNum</span>) &#123;<br>                        <span class="hljs-keyword">var</span> n = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.question-text&quot;</span>).<span class="hljs-property">innerHTML</span>;<br>                        <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span> &lt; <span class="hljs-number">950</span> ? <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.question-text&quot;</span>).<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;答题框被你无情的挤爆了。请在更大的屏幕上观看。&quot;</span> : <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.question-text&quot;</span>).<span class="hljs-property">innerHTML</span> = n,<br>                        <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;resize&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">t</span>) &#123;<br>                            t.<span class="hljs-property">target</span>.<span class="hljs-property">innerWidth</span> &lt; <span class="hljs-number">950</span> ? <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.question-text&quot;</span>).<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;答题框被你无情的挤爆了。请在更大的屏幕上观看。&quot;</span> : <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.question-text&quot;</span>).<span class="hljs-property">innerHTML</span> = n<br>                        &#125;)<br>                    &#125; <span class="hljs-keyword">else</span><br>                        <span class="hljs-number">48</span> === <span class="hljs-variable language_">this</span>.<span class="hljs-property">levelNum</span> &amp;&amp; (<span class="hljs-variable language_">this</span>.<span class="hljs-property">textArray</span>[<span class="hljs-number">0</span>] = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>), <span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>                            t.<span class="hljs-property">textArray</span>[<span class="hljs-number">0</span>] = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>),<br>                            t.$forceUpdate()<br>                        &#125;, <span class="hljs-number">1e3</span>), <span class="hljs-variable language_">this</span>.<span class="hljs-property">textArray</span>[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;空格用_代替&quot;</span>)<br>                &#125;,<br></code></pre></td></tr></table></figure>现在就是第15关,那么答案自然就是<code>awesome</code>了(这里顺便还得到了另外一些关卡的答案...)</p><h1 id="level-16">Level 16</h1><p>看过<生活大爆炸>的对这个问题应该能手到擒来,不过虽然我没看过,但是我在知乎上看到过一篇文章介绍为什么73是bestnumber,输入<code>number73</code>,过关~</p><p>顺便附上知乎上的<ahref="https://www.zhihu.com/question/36276289/answer/553534541">这篇回答</a>额,这个问题似乎被删除了,但是回答还能搜索到...在知乎搜索Sheldon质数+Yifan就可以看到...</p><h1 id="level-17">Level 17</h1><p>题目是"回到原点".这个应该是50关里困扰我时间第二长的一个了(最长的是Level28),原本以为回到原点指的是回到第一关,但是对着第一关的元素和页面脚本看了半个小时也没发现什么东西,尝试输入_start,main,entrypoint等"入口点"也不对,也不是数学中的取模,环等具有周期性的对象...一直这么卡了一个小时左右,摆弄浏览器的菜单栏时,突然看到"撤销"操作,然后想到撤销(Undo)不是也可以"回去"吗,输入<code>Undo</code>,过关...</p><h1 id="level-18">Level 18</h1><p>这一题我其实有点跳坑了.因为我是MacOS用的Safari做题,看到题目又是Undo后,自然想到的是Command+Z的快捷键,结果并没有什么用...无奈又回到Level15中获得的脚本,发现按下<code>Control+Z</code>而不是<code>Command+Z</code>才能到达Level19,即./brainfuck(观察上面我们得到的脚本也能看出答案)</p><h1 id="level-19">Level 19</h1><p>题目是一串看似无意义的符号,其实是URL里提示到的brainfuck这种编程语言.网上找了个在线编译运行网站,拖进去得到输出结果是<code>she</code>.输入,过关.</p><h1 id="level-20">Level 20</h1><p>极客喜欢的玩物且和手表一样大小,看给出的图形应该就是手表.简单检索得知应为MOTO360,输入<code>moto_360</code>,过关.</p><h1 id="level-21">Level 21</h1><p>题目描述说给出的是8x8=64的一部分,图像是2x3的黑白交错的棋盘.不过不知道为啥,我第一反应想到了卷积滑窗,然后心想8x8的卷积滑窗是有什么奇技淫巧吗...后来感觉思路应该是走偏了,于是在打开B站愉快地刷视频(摸鱼)的过程中看到了烂柯杯,进而想到棋盘,进而想到黑白棋盘应该是国际象棋才对.</p><p>2x3的棋盘正好是马的行走范围,输入<code>Knight</code>(国际象棋中马的名称),过关.</p><h1 id="level-22">Level 22</h1><p>看题目描述可以猜测当页面宽度小于320px时应该就会给出答案.继续回到Level15中的脚本,发现答案应该是<code>TOBORRM</code>,输入,过关.</p><h1 id="level-23">Level 23</h1><p>题目还是一个图像,直接以图搜图找到一个名为<code>FSociety</code>的黑客组织,输入,过关.(这里最初我以为是《V字仇杀队》里的经典面具,但是后来发现其实有所区别...)</p><h1 id="level-24">Level 24</h1><p>用过abcjs记录乐谱的同学,或者任何一个有乐理知识的应该都能很快想到这个串对应的是一段音乐.不过我在AbletonLive里试着写了写按abcjs语法得到的乐句,并没有听出什么头绪...eefe这个小二度的进行怎么听都对应不上我脑子中的任何一首乐曲.卡了一阵子之后想到,如果ef等字母对应的其实不是音名,而是相对于某一个根音的偏移量呢?</p><p>改写为556517-&gt;556587(大写A,暗示的可能是跨一个八度,所以1+7=8),试着听了下,这不就是生日歌吗...8个字母,<code>birthday</code>,输入,过关.</p><h1 id="level-25">Level 25</h1><p>很长的一段颜文字,直接Google发现是一种名为AAencode的加密方案,解码后得到console.log('encode').输入<code>encode</code>,过关.</p><h1 id="level-26">Level 26</h1><p>一串数字+空格,还提示10 yearsago,直接考虑是9键输入法,按9键输入后得到<code>feelings</code>,输入,过关.</p><h1 id="level-27">Level 27</h1><p>8个二进制数字,每个长度都为8,观察了一下感觉不是常见的编码,所以还是想到了8x8的卷积滑窗(我是对卷积造了什么孽...)</p><p>但是没有可供输入的矩阵,那么肯定是跟卷积滑窗没啥关系了,于是又想到类似的点灯游戏,试着把1对应的地方涂黑:<img src="../assets/2023-05-12%2022.45.47.png" width = "190" height = "200" alt="吃豆人"/></p><p>然后发现原来是吃豆人游戏(Pac-man)的图案.输入<code>Pac-man</code>,过关.</p><h1 id="level-28">Level 28</h1><p>说实话我是觉得这一题出的并不怎么好,这也是我耗时最长的一道题了.题目是很单纯的一个串:<img src="../assets/2023-05-12%2022.31.52.png"alt="谁能告诉我DHC是个啥" /></p><p>但是使用不同的搜索引擎/不同的IP属地搜索,得到的结果显然是不同的,DHC本身也有多种意思...</p><p>总之,题目要求的预期答案是DHC这一日本化妆品品牌的中文官网里提供的一个电话号码,是<code>4008208820</code>.</p><h1 id="level-29">Level 29</h1><p>x+=2,但是没有指明谁是x,尝试31(29+2)不行后果断尝试<code>4008208822</code>(4008208820+2),过关.</p><h1 id="level-30">Level 30</h1><p>5B88 671B 5148950B,一开始以为是4个16进制数字,但是想来想去跟提示中的"背景并非纯白"没啥联系,转而尝试直接解码.事实上这是Unicode编码,对应的汉字是"守望先锋".输入英文名<code>overwatch</code>,过关.</p><p>(overwatch是取字面意思"过度watch",所以才会提示背景不是纯白吗...)</p><h1 id="level-31">Level 31</h1><p>"第一只中国企鹅的昵称",检索了一下没找到什么有效信息.后来想到企鹅恐怕是QQ的爱称(QQ的图标就是企鹅嘛...),尝试QQ/OICQ/I-seek-you等均无果,最终发现预期解答其实是马化腾的英文名--<code>PONY</code>...</p><h1 id="level-32">Level 32</h1><p>题目给的提示很明显,维吉尼亚密码.直接找到在线解密工具得到答案是<code>ANDRIOD</code>,输入,过关.</p><h1 id="level-33">Level 33</h1><p>Fix it,那自然是把ANDRIOD改成正确的拼写<code>Android</code>咯~</p><h1 id="level-34">Level 34</h1><p>一个图片,题目告知提示图有干扰.拿到图片后看了看信息,发现是使用PhotoShop创建的,那就拖进PS里操作嘛...</p><p>去掉背景,但是马赛克去不掉,继续以图搜图,得到: <imgsrc="../assets/1569843-20200621192504503-66474261.png" />那就是<code>ljn</code>.输入,过关.</p><h1 id="level-35">Level 35</h1><p>题目要求"Find yourself on theInternet",这个自己肯定是不随做题人身份变化的抽象的"自己".网络上的自己的地址不就是<code>localhost</code>嘛,输入,过关.</p><h1 id="level-36">Level 36</h1><p>Markus Alexej Persson'sdeath,不懂,求助Wikipedia知道是个游戏彩蛋,顶着这个昵称进Minecraft如果死了会掉落苹果.输入<code>apple</code>,过关.</p><h1 id="level-37">Level 37</h1><p>直接把这一系列词汇翻译后拼接起来,输入<code>supercalifragilisticexpialidocious</code>,过关.后来检索得知《supercalifragilisticexpialidocious》其实是一首<ahref="https://en.wikipedia.org/wiki/Supercalifragilisticexpialidocious">电影插曲</a></p><h1 id="level-38">Level 38</h1><p>经典Misc手段.图片是压缩文件图标,但是输入几个常用的压缩软件名都无法通过,那就直接把图片下载然后解压~</p><p>得到answer.txt,但是内容却是同样的'http://nazo.one-story.cn/supercalifragilisticexpialidocious.html',于是想到这应该是递归(<code>recursion</code>),输入,过关.</p><h1 id="level-39">Level 39</h1><p>经典的一个漫画人脸,搜索可知叫<code>trollface</code>.输入过关.</p><h1 id="level-40">Level 40</h1><p>题目是一个3行的十字形数表,但是并没有观察出什么比较显然的数字规律.不过好在我对35这个数字比较敏感,过了一小会儿想到这应该是元素周期表中VII族元素那一列,那么问号处就是氯元素(<code>Chlorine</code>),输入,过关.</p><h1 id="level-41">Level 41</h1><p>Google x Huawei,搜索可知两者合作过Nexus6P.输入<code>Nexus_6P</code>,过关.</p><h1 id="level-42">Level 42</h1><p>题目要求重复「fd 30 lt 60 fd 40 rt150」五次,应该是某种指令.搜索得知是一种用来画图的语言,名为<ahref="https://www.transum.org/software/Logo/">Logo</a></p><p>在Level 1下画了画没啥发现,直接换到Level 3,画出来长这样: <imgsrc="../assets/2023-05-12%2023.21.42.png" /></p><p>但是输入四角星的各种名称都不对,后来看到四角星的一个别称是忍者(ninja)镖,再结合画图网站里的海龟图案,想到会不会是忍者神龟?输入<code>ninja_turtle</code>,过关.</p><h1 id="level-43">Level 43</h1><p>一张纯黑图片,猜到肯定其中暗藏玄机.下载到本地一通操作调整对比度和亮度:</p><p><img src="../assets/2023-05-13%2000.26.24.png" /></p><p>发现答案是<code>Dee.html</code>.输入,过关.</p><h1 id="level-44">Level 44</h1><p>直接搜图无果,观察发现题目应该是五张小旗子拼起来的,单个搜索发现是<ahref="https://zh.wikipedia.org/wiki/國際信號旗">国际海事信号旗</a>.对应的字符串是<code>poker</code>,输入过关.</p><h1 id="level-45">Level 45</h1><p>看起来应该是某种特殊的字母书写方式,Google了下发现是<ahref="https://zh.wikipedia.org/zh-hans/Leet">Leet</a></p><p>题目对应的文字是: <figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">This <span class="hljs-keyword">is</span> an example <span class="hljs-keyword">of</span> leet <span class="hljs-keyword">at</span> its finest<br>The answer <span class="hljs-keyword">is</span> : <span class="hljs-type">sigma</span><br></code></pre></td></tr></table></figure> 输入<code>sigma</code>,过关.</p><h1 id="level-46">Level 46</h1><p>还是图片,以图搜图得到<code>sanic</code>,输入过关.</p><p>按检索结果来看图片里的是动漫人物Sonic,被称为Sanic或许是个梗?不过我不感兴趣,姑且就没细看.</p><h1 id="level-47">Level 47</h1><p>还是图片,继续搜图...</p><p>搜图结果告诉我这是Excel 2000的一个彩蛋,按检索结果所述,你只需:</p><ol type="1"><li><p>打开一个Excel文件，在文件选项中点击另存为网页</p></li><li><p>在弹出的保存对话框中勾选“添加交互”，点击保存</p></li><li><p>双击打开保存的网页，将坐标定位到 (2000,WC) ，选中第 2000行，并按<code>Tab</code>键，将<code>WC</code>列变为当前的活动列</p></li><li><p>同时按住<code>Shift</code>,<code>𝐶𝑡𝑟𝑙</code>和<code>Alt</code>键，单击Excel工作簿左上角的Office标志</p></li></ol><p>这样就进入了题目中的赛车游戏.那么坐标值就是(2000,WC),输入<code>2000WC</code>,过关.</p><h1 id="level-48">Level 48</h1><p>一串数字,看起来每过1s都会加1000,自然想到<ahref="https://zh.wikipedia.org/wiki/UNIX时间">这个玩意儿</a>.尝试几次后发现预期答案为时间戳(<code>time_stamp</code>),输入,过关.</p><h1 id="level-49">Level 49</h1><p>一张图片,Git的图标,容易想到应该和Level 38是类似的隐写手段.</p><p>解压后得到一个Git仓库,存放的answer.txt里显示<code>this is not a real answer</code>.git进这个仓库查询日志,发现一共提交过三次<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">branch</span><br><br><span class="hljs-attribute">answer</span>.txt | <span class="hljs-number">2</span> +-<br><span class="hljs-attribute">1</span> file changed, <span class="hljs-number">1</span> insertion(+), <span class="hljs-number">1</span> deletion(-)<br><br><span class="hljs-attribute">commit</span> <span class="hljs-number">09</span>d0e4c0cfc5d75c2f49b51928b241b9b9cda53d (master)<br><span class="hljs-attribute">Author</span>: Dieber &lt;<span class="hljs-number">451120068</span>@qq.com&gt;<br><span class="hljs-attribute">Date</span>: Fri Jul <span class="hljs-number">20</span> <span class="hljs-number">18</span>:<span class="hljs-number">46</span>:<span class="hljs-number">32</span> <span class="hljs-number">2018</span> +<span class="hljs-number">0800</span><br><br><span class="hljs-attribute">cover</span><br><br><span class="hljs-attribute">answer</span>.txt | <span class="hljs-number">2</span> +-<br><span class="hljs-attribute">1</span> file changed, <span class="hljs-number">1</span> insertion(+), <span class="hljs-number">1</span> deletion(-)<br><br><span class="hljs-attribute">commit</span> b91dbf1a5cd95e4ad2e7842991cb1c8773f78d41<br><span class="hljs-attribute">Author</span>: Dieber &lt;<span class="hljs-number">451120068</span>@qq.com&gt;<br><span class="hljs-attribute">Date</span>: Fri Jul <span class="hljs-number">20</span> <span class="hljs-number">18</span>:<span class="hljs-number">45</span>:<span class="hljs-number">52</span> <span class="hljs-number">2018</span> +<span class="hljs-number">0800</span><br><br><span class="hljs-attribute">first</span> commit<br><br><span class="hljs-attribute">answer</span>.txt | <span class="hljs-number">1</span> +<br><span class="hljs-attribute">1</span> file changed, <span class="hljs-number">1</span> insertion(+)<br></code></pre></td></tr></table></figure> 逐次回滚,最终在firstcommit中发现answer.txt中的内容给出了我们要的答案<code>answer:gitisawesome</code>.输入<code>gitisawesome</code>,过关~</p><h1 id="level-50">Level 50</h1><p>／javascript'sauthor,提示说明应该是跟一首歌有关的.在各个平台搜索了一遍JavaScript,结果得到的歌手名都不是正确答案...后来发现我应该搜索/JavaScript才对...</p><p>网易云告诉我答案是<code>W1-2</code>,输入,搞定~</p><h1 id="旅程感想">旅程感想</h1><p>总体上来说难度有但是不高,有些题目跟CTF里的Misc题目思路还是有互通之处的,当做睡前小游戏还是蛮不错的.</p><p>(虽然还是耗费了我4个小时的时间...)</p><p>完结撒花~</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>解谜</tag>
      
      <tag>Game</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算方法-数值积分</title>
    <link href="/%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95-%E6%95%B0%E5%80%BC%E7%A7%AF%E5%88%86.html"/>
    <url>/%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95-%E6%95%B0%E5%80%BC%E7%A7%AF%E5%88%86.html</url>
    
    <content type="html"><![CDATA[<h2 id="问题定义">问题定义</h2><p>求 <spanclass="math inline">\(I(f)=\int_a^bf(x)\mathrm{d}x\)</span>，但是 <spanclass="math inline">\(f(x)\)</span> 的原函数很难求、<spanclass="math inline">\(f(x)\)</span>未明确给出（可能只是一张离散的数表），同时对计算精度没有过高的要求。</p><h2 id="机械求积公式">机械求积公式</h2><p>尝试用给定的一系列节点的函数值 <span class="math inline">\(f(x_0),f(x_1), \cdots\)</span> 来线性组合出积分的近似值，即</p><p><span class="math display">\[Q(f)=\sum_{j=0}^nf(x_j)H_j\]</span></p><p>其中，<span class="math inline">\(x_i(i=0, 1, \cdots, n)\)</span>是给出函数值的 <span class="math inline">\((n+1)\)</span> 个节点，<spanclass="math inline">\(H_j\)</span> 是与前面那 <spanclass="math inline">\((n+1)\)</span> 个节点有关，而与 <spanclass="math inline">\(f(x)\)</span>本身无关的一系列系数。显然，机械求积公式的关键是从给出的 <spanclass="math inline">\(x_i\)</span> 确定 <spanclass="math inline">\(H_j\)</span>。</p><h3 id="代数精度">代数精度</h3><p>如果一个机械求积公式，它用在所有不超过 <spanclass="math inline">\(r\)</span> 次的多项式（即 <spanclass="math inline">\(f(x)\)</span> 是不超过 <spanclass="math inline">\(r\)</span> 次的多项式）上时能精确成立，而对于<span class="math inline">\((r+1)\)</span>次多项式至少有一个不能精确成立，称这个求积公式有 <spanclass="math inline">\(r\)</span> 次代数精度。</p><p>例如，梯形公式 <spanclass="math inline">\(I_1(f)=\frac{b-a}{2}(f(a)+f(b))\)</span> 有 1次代数精度：</p><ul><li><span class="math inline">\(f(x)=1\)</span> 时，精确成立。</li><li><span class="math inline">\(f(x)=x\)</span> 时，<spanclass="math inline">\(\int_a^bx\mathrm{d}x=\frac{b^2-a^2}{2}=\frac{b-a}{2}(b+a)\)</span>，精确成立。</li><li><span class="math inline">\(f(x)=x^2\)</span> 时，不精确成立。</li></ul><h3 id="插值型求积公式">插值型求积公式</h3><p>将 <span class="math inline">\(f(x)\)</span> 在 <spanclass="math inline">\(x_0, x_1, \cdots, x_n\)</span> 处 Lagrange插值，得到 <spanclass="math inline">\(L_n(x)=\sum_{j=0}^nl_j(x)f(x_j)\)</span>，取</p><p><span class="math display">\[H_j=\int\limits_a^bl_j(x)\mathrm{d}x\]</span></p><p>来作为机械求积公式的系数，可以证明这个公式至少有 <spanclass="math inline">\(n\)</span>次代数精度。事实上，如果一个机械求积公式有 <spanclass="math inline">\(n\)</span>次及以上的代数精度，它必然是插值型的。</p><h2 id="等距节点的-newton-cotes-公式">等距节点的 Newton-Cotes 公式</h2><p>当求积节点等距时，将区间 <span class="math inline">\([a, b]\)</span>分成 <span class="math inline">\(n\)</span> 等分，记 <spanclass="math inline">\(x_0=a\)</span>，<spanclass="math inline">\(x_i=a+ih\)</span>，<spanclass="math inline">\(i=0, 1, \cdots, n\)</span>。</p><p>记 <span class="math inline">\(x=a+th\)</span>，则</p><p><span class="math display">\[\begin{aligned}H_j &amp;= \int\limits_a^bl_j(x)\mathrm{d}x \\&amp;= \int\limits_a^b\prod_{i=0,i\neqj}^n\frac{(x-x_i)}{(x_j-x_i)}\mathrm{d}x \\&amp;= \int\limits_a^b\prod_{i=0, i\neqj}^n\frac{t-i}{j-i}\mathrm{d}(a+th) \\&amp;= \frac{(-1)^{n-j}h}{j!(n-j)!}\int\limits_a^b\prod_{i=0, i\neqj}^n(t-i)\mathrm{d}t\end{aligned}\]</span></p><p>因为 <span class="math inline">\(b-a=nh\)</span>，将上式除以 <spanclass="math inline">\((b-a)\)</span>，得到</p><p><span class="math display">\[C_j=\frac{H_j}{b-a}=\frac{(-1)^{n-j}}{nj!(n-j)!}\int\limits_a^b\prod_{i=0,i\neq j}^n(t-i)\mathrm{d}t\]</span></p><p>称之为「Cotes 系数」。由此可以得到等距节点的 Newton-Cotes 公式：</p><p><span class="math display">\[Q_n(f)=(b-a)\sum_{j=0}^nC_jf(x_j)\]</span></p><h3 id="特殊情况">特殊情况</h3><ul><li><p>梯形公式：<span class="math inline">\(n=1, x_0=a,x_1=b\)</span>，</p><p><span class="math display">\[  Q_1(f)=\frac{b-a}{2}(f(a)+f(b))  \]</span></p></li><li><p>Simpson 公式（抛物线公式）：<span class="math inline">\(n=2,x_0=a, x_2=b, x_1=\frac{a+b}{2}\)</span>，</p><p><span class="math display">\[  Q_2(f)=\frac{b-a}{6}(f(a)+4f(\frac{a+b}{2})+f(b))  \]</span></p></li><li><p>Cotes 公式：<span class="math inline">\(n=4\)</span>，</p><p><span class="math display">\[  Q_4(f)=\frac{2h}{45}(7f(a)+32f(a+h)+12f(a+2h)+32f(a+3h)+7f(b))  \]</span></p></li></ul><h3 id="收敛性">收敛性</h3><p><strong>Newton-Cotes 公式并不总是收敛于积分的真值。</strong></p><h3 id="数值稳定性">数值稳定性</h3><p>设 <span class="math inline">\(f(x_i)\)</span> 的计算值为 <spanclass="math inline">\(\tilde{f}(x_i)\)</span>，且 <spanclass="math inline">\(|f(x_i)-\tilde{f}(x_i)|\leqslant\varepsilon\)</span>，则</p><p><span class="math display">\[|\sum_{j=0}^nH_jf(x_j)-\sum_{j=0}^nH_j\tilde{f}(x_j)|=|\sum_{j=0}^nH_j(f(x_j)-\tilde{f}(x_j))|\leqslant\varepsilon\sum_{j=0}^n|H_j|\]</span></p><ul><li><p>如果 <span class="math inline">\(H_j\)</span> 全是正数，有 <spanclass="math inline">\(|H_j|=H_j\)</span>，那么</p><p><span class="math display">\[  \varepsilon\sum_{j=0}^n|H_j|=\varepsilon\sum_{j=0}^nH_j=(b-a)\varepsilon  \]</span></p><p>这个误差不会因为 <span class="math inline">\(n\)</span>的增大而增大，数值稳定。</p></li><li><p>如果 <span class="math inline">\(H_j\)</span> 有正有负，则 <spanclass="math inline">\(\varepsilon\sum_{j=0}^n|H_j|\)</span> 是可能随<span class="math inline">\(n\)</span>变大而无限增长的，数值不稳定。</p></li></ul><p><strong>只有 <span class="math inline">\(n\leqslant7\)</span> 和<span class="math inline">\(n=9\)</span> 的 Newton-Cotes 公式 <spanclass="math inline">\(H_j\)</span> 是全正的。</strong></p><h3 id="代数精度与余项">代数精度与余项</h3><ul><li><p>当 <span class="math inline">\(n\)</span> 为奇数时，NC 公式有<span class="math inline">\(n\)</span> 次代数精度。设 <spanclass="math inline">\(f\in C^{n+1}[a, b]\)</span>，则总是 <spanclass="math inline">\(\exists\xi\in(a, b)\)</span>，使得</p><p><span class="math display">\[  I(f)-Q(f)=E(f)=\frac{f^{(n+1)}(\xi)}{(n+1)!}\int\limits_a^bp_{n+1}(x)\mathrm{d}x  \]</span></p></li><li><p>当 <span class="math inline">\(n\)</span> 为偶数时，NC 公式有<span class="math inline">\((n+1)\)</span> 次代数精度。设 <spanclass="math inline">\(f\in C^{n+2}[a, b]\)</span>，则总是 <spanclass="math inline">\(\exists\xi\in(a, b)\)</span>，使得</p><p><span class="math display">\[  I(f)-Q(f)=E(f)=\frac{f^{(n+2)}(\xi)}{(n+2)!}\int\limits_a^bxp_{n+1}(x)\mathrm{d}x  \]</span></p></li></ul><p>常用 NC 公式的余项（也就是误差）：</p><ul><li>梯形公式（<span class="math inline">\(n=1,h=b-a\)</span>）：<spanclass="math inline">\(-\frac{h^3}{12}f&#39;&#39;(\eta)\)</span>；</li><li>Simpson 公式（<spanclass="math inline">\(n=2,h=\frac{b-a}{2}\)</span>）：<spanclass="math inline">\(-\frac{h^5}{90}f^{(4)}(\eta)\)</span>；</li><li>Cotes 公式（<spanclass="math inline">\(n=4,h=\frac{b-a}{4}\)</span>）：<spanclass="math inline">\(-\frac{8h^7}{945}f^{(6)}(\eta)\)</span>。</li></ul><h2 id="复化的-newton-cotes-公式">复化的 Newton-Cotes 公式</h2><p>所谓「复化」，是指将区间 <span class="math inline">\([a, b]\)</span>进行 <span class="math inline">\(n\)</span>等分后，在每个小区间上用一些简单的求积公式（例如梯形公式或 Simpson公式），然后进行求和。</p><h3 id="复化的梯形公式">复化的梯形公式</h3><p>记 <span class="math inline">\(h=\frac{b-a}{n}\)</span>，<spanclass="math inline">\(x_i=x_0+ih\)</span>。</p><p><span class="math display">\[\begin{aligned}T_n&amp;=\sum_{i=0}^{n-1}\frac{h}{2}(f(x_i)+f(x_{i+1})) \\&amp;= \frac{h}{2}(f(a)+2\sum_{i=1}^{n-1}f(x_i)+f(b))\end{aligned}\]</span></p><p>如果在 <span class="math inline">\(T_n\)</span>的基础上，将每个区间平分，即 <span class="math inline">\([x_i,x_{i+1}]\to[x_i, x_{i+\frac{1}{2}}], [x_{i+\frac{1}{2}},x_{i+1}]\)</span>，得到 <span class="math inline">\(2n\)</span>等分的复化梯形公式 <spanclass="math inline">\(T_{2n}=\frac{h}{4}\sum_{i=0}^{n-1}(f(x_i)+2f(x_{i+\frac{1}{2}})+f(x_{i+1}))\)</span>。</p><p>记 <spanclass="math inline">\(U_n=h\sum_{i=0}^{n-1}f(x_{i+\frac{1}{2}})\)</span>，有</p><p><span class="math display">\[T_{2n}=\frac{1}{2}(T_n+U_n)\]</span></p><p>这提供了一种计算高阶复化梯形公式的方法。例如，要计算 <spanclass="math inline">\(T_8\)</span>，只要按 <spanclass="math inline">\(T_1\to T_2\to T_4\to T_8\)</span>的顺序算就可以了。</p><h3 id="复化的-simpson-公式">复化的 Simpson 公式</h3><p>记 <span class="math inline">\(h=\frac{b-a}n\)</span>，<spanclass="math inline">\(x_i=x_0+ih\)</span>。</p><p><span class="math display">\[\begin{aligned}S_n&amp;=\frac{h}6\sum_{i=0}^{n-1}(f(x_i)+4f(x_{i+\frac{1}{2}})+f(x_{i+1}))\\ &amp;=\frac{h}6(f(a)+4\sum_{i=0}^{n-1}f(x_{i+\frac{1}{2}})+2\sum_{i=1}^{n-1}f(x_i)+f(b))\\&amp;=\frac{1}{3}T_n+\frac{2}{3}U_n=\frac{4T_{2n}-T_n}{3}\end{aligned}\]</span></p><p>即，用高一阶的复化梯形公式就可以计算出复化 Simpson公式。这种计算方式比较方便。</p><h3 id="复化的-cotes-公式">复化的 Cotes 公式</h3><p><span class="math display">\[C_n=\frac{h}{90}(7f(a)+32\sum_{i=0}^{n-1}f(x_{i+\frac{1}{4}})+12\sum_{i=0}^{n-1}f(x_{i+\frac{1}{2}})+32\sum_{i=0}^{n-1}f(x_{i+\frac{3}{4}})+14\sum_{i=1}^{n-1}f(x_i)+7f(b))\]</span></p><p>使用 <span class="math inline">\(S_{2n}\)</span> 和 <spanclass="math inline">\(S_n\)</span> 表示：</p><p><span class="math display">\[C_n=\frac{4^2S_{2n}-S_{n}}{4^2-1}\]</span></p>]]></content>
    
    
    <categories>
      
      <category>课程笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算方法:插值与数值逼近</title>
    <link href="/%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95-%E6%8F%92%E5%80%BC%E4%B8%8E%E6%95%B0%E5%80%BC%E9%80%BC%E8%BF%91.html"/>
    <url>/%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95-%E6%8F%92%E5%80%BC%E4%B8%8E%E6%95%B0%E5%80%BC%E9%80%BC%E8%BF%91.html</url>
    
    <content type="html"><![CDATA[<h2 id="多项式插值">多项式插值</h2><p>多项式插值要做的就是,找一个多项式 <spanclass="math inline">\(y(x)=a_0+a_1x+a_2x^2+\cdots+a_nx^n\)</span>来近似任意函数 <span class="math inline">\(f(x)\)</span>。</p><p>为了让插值尽量精确，我们让 <span class="math inline">\(y(x)\)</span>经过所有的 <spanclass="math inline">\(x_i\)</span>（插值节点）。这样就得到：</p><p><span class="math display">\[\left\{\begin{aligned}a_0+a_1x_0+a_2x_0^2+\cdots+a_nx_0^n&amp;=f(x_0)\\a_0+a_1x_1+a_2x_1^2+\cdots+a_nx_1^n&amp;=f(x_1)\\&amp;\vdots \\a_0+a_1x_n+a_2x_n^2+\cdots+a_nx_n^n&amp;=f(x_n)\\\end{aligned}\right.\]</span></p><p>显然这个方程组的解是唯一的，即：多项式插值具有唯一性。Lagrange插值、Newton插值等只是得到这个方程组的解的不同方式，最终得到的结果是一样的。</p><h2 id="lagrange-插值">Lagrange 插值</h2><h3 id="计算">计算</h3><p><span class="math display">\[L(x)=\sum_{j=0}^nf(x_j)l_j(x)\]</span></p><p>其中</p><p><span class="math display">\[\begin{aligned}l_j(x)&amp;=\frac{(x-x_0)(x-x_1)\cdots(x-x_{j-1})(x-x_{j+1})\cdots(x-x_n)}{(x_j-x_0)(x_j-x_1)\cdots(x_j-x_{j-1})(x_j-x_{j+1})\cdots(x_j-x_n)}\\&amp;= \prod_{i=0, i\neq j}^n\frac{x-x_i}{x_j-x_i}\end{aligned}\]</span></p><p>事实上，<span class="math inline">\(l_j(x)\)</span> 的本质就是 <spanclass="math display">\[\left\{\begin{aligned}&amp;0, x\neq x_j\\ &amp;1, x=x_j\end{aligned}\right.\]</span> 类似布尔函数.</p><p>被插函数可以表示为 <spanclass="math inline">\(f(x)=L(x)+E(x)\)</span>，其中 <spanclass="math inline">\(E(x)\)</span> 即为误差（又叫「插值余项」）。</p><h3 id="误差-余项">误差 / 余项</h3><p><span class="math display">\[E(x)=\frac{f^{(n+1)}(\xi)}{(n+1)!}p_{n+1}(x),p_{n+1}(x)=(x-x_0)(x-x_1)\cdots(x-x_n)\]</span></p><p>其中 <span class="math inline">\(\xi\in(a, b)\)</span>。</p><p>容易得到误差上限 <spanclass="math inline">\(|E(x)|\leqslant\frac{\max\limits_{a&lt;x&lt;b}f^{(n+1)}(x)}{(n+1)!}p_{n+1}(x)\)</span>。事实上，因为多项式插值是唯一的，所有多项式插值的误差和上限都是这个东西。</p><h2 id="newton-插值">Newton 插值</h2><h3 id="计算-1">计算</h3><p>将 <span class="math inline">\(n\)</span>次插值多项式写成如下的形式：</p><p><span class="math display">\[y(x)=a_0+a_1(x-x_0)+a_2(x-x_0)(x-x_1)+\cdots+a_n(x-x_0)(x-x_1)\cdots(x-x_{n+1})\]</span></p><p>其中：</p><p><span class="math display">\[\begin{aligned}a_0 &amp;= f(x_0)\\a_1 &amp;= \frac{f(x_1)-f(x_0)}{x_1-x_0} \\a_2 &amp;=\frac{\frac{f(x_2)-f(x_0)}{x_2-x_0}-\frac{f(x_1)-f(x_0)}{x_1-x_0}}{x_2-x_1}\\&amp;\cdots\end{aligned}\]</span></p><p>为了便于表示，引入差商的定义。</p><h3 id="差商">差商</h3><p><span class="math display">\[\begin{aligned}f[x_0 x_1] &amp;= \frac{f(x_1)-f(x_0)}{x_1-x_0} \\f[x_0x_1x_2] &amp;= \frac{f[x_0x_2]-f[x_0x_1]}{x_2-x_1} \\f[x_0x_1x_2x_3] &amp;= \frac{f[x_0x_1x_3]-f[x_0x_1x_2]}{x_3-x_2} \\&amp;\cdots \\f[x_0x_1\cdots x_k] &amp;= \frac{f[x_0x_1\cdotsx_{k-2}x_k]-f[x_0x_1\cdots x_{k-2}x_{k-1}]}{x_k-x_{k-1}}\end{aligned}\]</span></p><p>从上到下依次称「一阶差商」「二阶差商」……「<spanclass="math inline">\(k\)</span> 阶差商」。可以证明，<spanclass="math inline">\(a_k=f[x_0x_1\cdots x_k], k=0, 1, 2, \cdots,n\)</span>。</p><p>用差商表示的 Newton 插值多项式：</p><p><span class="math display">\[N_n(x)=f(x_0)+f[x_0x_1](x-x_0)+f[x_0x_1x_2](x-x_0)(x-x_1)+\cdots+f[x_0x_1\cdotsx_n](x-x_0)\cdots(x-x_{n-1})\]</span></p><h3 id="误差-余项-1">误差 / 余项</h3><p><span class="math display">\[E(x)=f[x_0x_1\cdots x_nx](x-x_0)(x-x_1)\cdots(x-x_n)\]</span></p><p>由于多项式插值的唯一性，这个式子的值和 Lagrange插值的余项是相等的，由此可以得到差商和导数的关系：</p><p><span class="math display">\[f[x_0x_1\cdots x_j]=\frac{f^{(j)}(\xi_j)}{j!}\]</span></p><p>其中 <span class="math inline">\(\xi_j\in(x_0, x_j)\)</span>。</p><h2 id="差分与等距节点的插值">差分与等距节点的插值</h2><h3 id="差分">差分</h3><ul><li><span class="math inline">\(k\)</span> 阶向前差分：<spanclass="math inline">\(\Delta^kf(x)=\Delta^{k-1}f(x+h)-\Delta^{k-1}f(x)\)</span>；</li><li>0 阶向前差分：<spanclass="math inline">\(\Delta^0f(x)=f(x)\)</span>；</li><li><span class="math inline">\(k\)</span> 阶向后差分：<spanclass="math inline">\(\nabla^kf(x)=\nabla^{k-1}f(x)-\nabla^{k-1}f(x-h)\)</span>；</li><li>0 阶向后差分：<spanclass="math inline">\(\nabla^0f(x)=f(x)\)</span>；</li><li><span class="math inline">\(k\)</span> 阶中心差分：<spanclass="math inline">\(\delta^kf(x)=\delta^{k-1}f(x+\frac{h}{2})-\delta^{k-1}f(x-\frac{h}{2})\)</span>；</li><li>0 阶中心差分：<spanclass="math inline">\(\delta^0f(x)=f(x)\)</span>。</li></ul><p>向前差分与差商的关系：<span class="math inline">\(f[x_0x_1\cdotsx_k]=\frac{\Delta^kf_0}{k!h^k}=\frac{\nabla^kf_k}{k!h^k}\)</span>。</p><h3 id="newton-向前插值公式">Newton 向前插值公式</h3><p>用差分代替 Newton 插值公式中的差商：</p><p><span class="math display">\[\begin{aligned}N_n(x) =\Delta^0f_0&amp;+\frac{\Delta^1f_0}{h}(x-x_0)+\frac{\Delta^2f_0}{2!h^2}(x-x_1)(x-x_0)+\cdots\\ &amp;+\frac{\Delta^nf_0}{n!h^n}(x-x_{n-1})(x-x_{n-2})\cdots(x-x_0)\end{aligned}\]</span></p><p>用 <span class="math inline">\(x_0+th\)</span> 代替 <spanclass="math inline">\(x\)</span>：</p><p><span class="math display">\[\begin{aligned}N_n(x_0+th) &amp;= \Delta^0f_0+\Delta^1f_0t+\Delta^2f_0\frac{t(t-1)}{2!}+\cdots+\Delta^nf_0\frac{t(t-1)\cdots(t-(n-1))}{n!} \\&amp;= \sum_{j=0}^n\Delta^jf_0\frac{t(t-1)(t-2)\cdots(t-(j-1))}{j!} \\&amp;= \sum_{j=0}^n\Delta^jf_0\mathrm{C}_t^j\end{aligned}\]</span></p><p>（组合数公式：<spanclass="math inline">\(\mathrm{C}_n^m=\frac{n!}{m!(n-m)!}=\frac{n(n-1)(n-2)\cdots(n-(m-1))}{m!}\)</span>。广义的组合数中<span class="math inline">\(n\)</span> 可以是负数、小数）</p><h3 id="newton-向后插值公式">Newton 向后插值公式</h3><p>起始点选 <spanclass="math inline">\(x_n\)</span>，使用向后的差分，可以推出下面的Newton 向后插值公式。</p><p><span class="math display">\[\begin{aligned}N_n(x_n+th)&amp;=\sum_{j=0}^{n}\nabla^jf_n\frac{t(t+1)\cdots(t+j-2)(t+j-1)}{j!} \\&amp;=\sum_{j=0}^n\nabla^jf_n\mathrm{C}_{t+j-1}^{j}\end{aligned}\]</span></p><h2 id="函数的最佳平方逼近">函数的最佳平方逼近</h2><h3 id="问题描述">问题描述</h3><p>先来看连续情况.给定函数 <span class="math inline">\(f(x)\in C[a,b],x\in[a, b];\phi_0,\phi_1,\cdots,\phi_n\)</span>是<spanclass="math inline">\(C[a,b]\)</span>上n+1个线性无关函数，找一个 <spanclass="math inline">\(\phi^*(x)\in\Phi(x)=\mathrm{span}\{\phi_0(x),\phi_1(x), \cdots, \phi_n(x)\}\)</span>，使得</p><p><span class="math display">\[\int\limits_a^b\rho(x)(f(x)-\phi^*(x))^2\mathrm{d}x=\min_{\phi(x)\in\Phi(x)}\int\limits_a^b\rho(x)(f(x)-\phi(x))^2\mathrm{d}x\]</span></p><p>即左侧的积分式取得最小值。式中 <spanclass="math inline">\(\rho(x)\)</span> 是权函数，满足：</p><ul><li><span class="math inline">\(\rho(x)\geqslant 0, \forall x\in[a,b]\)</span>；</li><li><span class="math inline">\(\int_a^b\rho(x)x^k\mathrm{d}x\)</span>存在，<span class="math inline">\(\forall k=0, 1, 2,\cdots\)</span>；</li><li>对任何非负函数 <span class="math inline">\(f(x)\)</span>，若 <spanclass="math inline">\(\int_a^bf(x)\rho(x)\mathrm{d}x=0\)</span>，则<span class="math inline">\(f(x)\equiv0\)</span>。</li></ul><h3 id="求解">求解</h3><p>记 <spanclass="math inline">\(\phi^*(x)=a_0\phi_0(x)+a_1\phi_1(x)+\cdots+a_n\phi_n(x)\)</span>。</p><p>记 <span class="math inline">\(||f-\phi^*||_2^2=F(a_0, a_1, \cdots,a_n)=\int_a^b\rho(x)(f(x)-\phi^*(x))^2\mathrm{d}x\)</span>。令 <spanclass="math inline">\(\frac{\partial F}{\partial a_j}=0\)</span>，有</p><p><span class="math display">\[\begin{aligned}\int\limits_a^b\rho(x)f(x)\phi_j(x)\mathrm{d}x =a_0\int\limits_a^b\rho(x)\phi_0(x)\phi_j(x)\mathrm{d}x&amp;+a_1\int\limits_a^b\rho(x)\phi_1(x)\phi_j(x)\mathrm{d}x+\cdots\\&amp;+ a_n\int\limits_a^b\rho(x)\phi_n(x)\phi_j(x)\mathrm{d}x\end{aligned}\]</span></p><p>记 <span class="math inline">\((f, g)\)</span> 为 <spanclass="math inline">\(\int_a^b\rho(x)f(x)g(x)\mathrm{d}x\)</span>。令<span class="math inline">\(F\)</span>的所有偏导为零，得到下面的线性方程组：</p><p><span class="math display">\[\left[\begin{matrix}(\phi_0,\phi_0) &amp; (\phi_1, \phi_0) &amp; \cdots &amp; (\phi_n,\phi_0) \\(\phi_0,\phi_1) &amp; (\phi_1, \phi_1) &amp; \cdots &amp; (\phi_n,\phi_1) \\\vdots &amp; \vdots &amp; \ddots &amp; \vdots \\(\phi_0,\phi_n) &amp; (\phi_1, \phi_n) &amp; \cdots &amp; (\phi_n,\phi_n) \\\end{matrix}\right]\left[\begin{matrix}a_0 \\ a_1 \\\vdots\\a_n\end{matrix}\right]=\left[\begin{matrix}(f, \phi_0)\\(f, \phi_1)\\\vdots \\(f, \phi_n) \\\end{matrix}\right]\]</span></p><p>求解这个方程组，即可得到最佳平方逼近时的系数。</p><h3 id="误差">误差</h3><p>记 <span class="math inline">\(f-\phi^*(x)=\delta\)</span>，记 <spanclass="math inline">\(||\delta||_2^2\)</span>为「平方误差」，记它的平方根 <spanclass="math inline">\(||\delta||_2\)</span> 为「均方误差」。</p><p><span class="math display">\[\begin{aligned}||\delta||_2^2&amp;=||f-\phi^*||_2^2=(f, f)-(\phi^*, f)\\&amp;=||f||_2^2-\sum_{j=0}^na_j^*(\phi_j, f)\end{aligned}\]</span></p><h3 id="正交函数与正交多项式">正交函数与正交多项式</h3><p>对 <span class="math inline">\(f(x),g(x)\in C[a, b]\)</span>，记<spanclass="math inline">\((f,g)=\int_a^b\rho(x)f(x)g(x)\mathrm{d}x\)</span>，若<span class="math inline">\((f,g)=0\)</span>，称 <spanclass="math inline">\(f(x)\)</span>、<spanclass="math inline">\(g(x)\)</span> 在 <spanclass="math inline">\([a,b]\)</span> 上带权 <spanclass="math inline">\(\rho(x)\)</span> 正交，记作 <spanclass="math inline">\(f\bot g\)</span>。</p><p>如果函数序列 <spanclass="math inline">\(\{\phi_j\}_0^{+\infty}\)</span> 在 <spanclass="math inline">\([a, b]\)</span> 上两两带权 <spanclass="math inline">\(\rho(x)\)</span> 正交，称 <spanclass="math inline">\(\{\phi_j\}\)</span> 为 <spanclass="math inline">\([a, b]\)</span> 上带权 <spanclass="math inline">\(\rho(x)\)</span> 的正交函数族。</p><p>例如：<span class="math inline">\(1, \sin x, \cos x, \sin 2x, \cos2x, \cdots\)</span> 是在 <span class="math inline">\([-\pi,\pi]\)</span>上带权 <span class="math inline">\(\rho(x)\equiv1\)</span>的正交函数族，因为</p><p><span class="math display">\[\begin{aligned}(1, 1)&amp;=\int\limits_{-\pi}^{\pi}\mathrm{d}x=2\pi\\(\sin nx, \sin mx)&amp;=\int\limits_{-\pi}^\pi\sin nx\sinmx\mathrm{d}x=\left\{\begin{aligned}&amp;\pi,m=n\\&amp;0, m\neqn\end{aligned}\right. \\(\cos nx, \cos mx)&amp;=\int\limits_{-\pi}^\pi\cos nx\cosmx\mathrm{d}x=\left\{\begin{aligned}&amp;\pi,m=n\\&amp;0, m\neqn\end{aligned}\right. \\(\cos nx, \sin mx)&amp;=\int\limits_{-\pi}^\pi\cos nx\sinmx\mathrm{d}x=0 \\\end{aligned}\]</span></p><p>如果 <span class="math inline">\(\phi_n(x)\)</span> 为首项系数非零的<span class="math inline">\(n\)</span> 次多项式，称 <spanclass="math inline">\(\{\phi_j\}\)</span> 为正交多项式族。</p><p><img src="../assets/Untitled.png" /></p><p>使用正交多项式族作为 <span class="math inline">\(\Phi(x)\)</span>进行最佳平方逼近，这样得到的左侧矩阵是对角阵。</p><h3 id="曲线拟合最小二乘法">曲线拟合（最小二乘法）</h3><p>曲线拟合即是离散情况的最佳平方逼近问题。给定已知 <spanclass="math inline">\((m+1)\)</span> 个数据点的离散函数 <spanclass="math inline">\(f(x), x\in[a, b]\)</span>，找一个 <spanclass="math inline">\(\phi^*(x)\in\Phi(x)=\mathrm{span}\{\phi_0(x),\phi_1(x), \cdots, \phi_n(x)\}\)</span>，使得</p><p><span class="math display">\[||f-\phi^*||_2^2=F(a_0, a_1,\cdots,a_n)=\min_{\phi\in\Phi}\sum_{j=0}^m\rho(x_j)(f(x_j)-\phi(x_j))^2\]</span></p><p>定义离散情况的内积</p><p><span class="math display">\[(f,g)=\sum_{i=0}^m\rho(x_i)f(x_i)g(x_i)\]</span></p><p>使用与前文相同的解法，可以解出系数 <spanclass="math inline">\(a_i,i=0, 1, \cdots, n\)</span>。</p><p>同样可以定义离散情况下的平方误差</p><p><span class="math display">\[||\delta||_2^2=||f-\phi^*||_2^2=\sum_{i=0}^m\rho(x_i)(f_i-\phi(x_i))^2\]</span></p><p>以及均方误差</p><p><span class="math display">\[||\delta||_2=\sqrt{||\delta||_2^2}=\sqrt{\sum_{i=0}^m\rho(x_i)(f_i-\phi(x_i))^2}\]</span></p><p>特别注意，在曲线拟合这里的「均方误差」没有「均」，即不用将根号里的东西乘以<span class="math inline">\(\frac{1}{m}\)</span>。</p>]]></content>
    
    
    <categories>
      
      <category>课程笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面向对象课程第一章:Java基础</title>
    <link href="/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AF%BE%E7%A8%8B%E7%AC%AC%E4%B8%80%E7%AB%A0-Java%E5%9F%BA%E7%A1%80.html"/>
    <url>/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AF%BE%E7%A8%8B%E7%AC%AC%E4%B8%80%E7%AB%A0-Java%E5%9F%BA%E7%A1%80.html</url>
    
    <content type="html"><![CDATA[<h1 id="java-基础">Java 基础</h1><p>因为 Java 语言和 C/C++在很多语法上相似甚至完全一致（例如各种控制语句），因此这里只列出 Java 与C 家族不同的语言特性。</p><h2 id="数据类型">数据类型</h2><h3 id="基本数据类型">基本数据类型</h3><p>Java 一共有 8 种「基本数据类型」。</p><table><thead><tr class="header"><th>类型</th><th>空间</th><th>范围</th><th>备注</th></tr></thead><tbody><tr class="odd"><td>byte</td><td>1 字节</td><td><span class="math inline">\(-128 \text{--} 127\)</span></td><td></td></tr><tr class="even"><td>short</td><td>2 字节</td><td><span class="math inline">\(-2^{15}\text{--}2^{15}-1\)</span></td><td></td></tr><tr class="odd"><td>int</td><td>4 字节</td><td><span class="math inline">\(-2^{31}\text{--}2^{31} - 1\)</span></td><td></td></tr><tr class="even"><td>long</td><td>8 字节</td><td><span class="math inline">\(-2^{63}\text{--}2^{63} - 1\)</span></td><td>声明常量要加「L」</td></tr><tr class="odd"><td>float</td><td>4 字节</td><td>——</td><td>声明常量要加「F」</td></tr><tr class="even"><td>double</td><td>8 字节</td><td>——</td><td>浮点数的默认类型</td></tr><tr class="odd"><td>char</td><td>16 字节</td><td>UTF-16</td><td></td></tr><tr class="even"><td>boolean</td><td>——</td><td>false 或 true</td><td>不能用 0 和非 0 代替</td></tr></tbody></table><h3 id="引用类型">引用类型</h3><p>类 <code>class</code>、接口 <code>interface</code>和数组都是引用类型。</p><h2 id="输入输出">输入输出</h2><h3 id="输入">输入</h3><p>Java 的标准输入流是一个 <code>InputStream</code>对象，有两种常用的读取方式：</p><ul><li><p>用读字符流的方法将 <code>System.in</code> 读到一个<code>BufferedReader</code> 中。</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">BufferedReader</span> <span class="hljs-variable">stdin</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(System.in));<br>stdin.readLine() <span class="hljs-comment">// &lt;= 得到用户输入的字符串</span><br></code></pre></td></tr></table></figure></p></li><li><p>用 <code>java.util.Scanner</code> 对 <code>System.in</code>进行封装。</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Scanner</span> <span class="hljs-variable">stdin</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>stdin.nextLine() <span class="hljs-comment">// &lt;= 得到用户输入的字符串</span><br></code></pre></td></tr></table></figure></p></li></ul><h3 id="输出">输出</h3><ul><li><code>System.out.print()</code> 不换行输出。</li><li><code>System.out.println()</code> 换行输出。</li><li><code>System.out.printf()</code> 格式化输出，语法同 C 标准库的<code>printf()</code>。</li></ul><h2 id="数组">数组</h2><p>Java 中的「数组」是确定长度的，一经创建就不能再加长了。</p><h3 id="声明和创建">声明和创建</h3><p>在创建数组时，要么指定长度，要么给出所有的项。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>]; <span class="hljs-comment">// 指定长度</span><br><span class="hljs-type">double</span>[] anotherArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[]&#123; <span class="hljs-number">2.1</span>, <span class="hljs-number">4.5</span>, <span class="hljs-number">4.2</span> &#125;; <span class="hljs-comment">// 指定项</span><br></code></pre></td></tr></table></figure><h3 id="长度和索引">长度和索引</h3><p>可以使用 <code>arr.length</code> 得到一个数组的长度。数组的下标从 0开始，到 <code>length - 1</code> 结束。</p><h3 id="数组是引用类型">数组是引用类型</h3><p>所谓「引用类型」，可以理解为 C家族中的「指针」。下面的代码解释了「引用」的本质。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123; <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span> &#125;;<br>System.out.println(arr[<span class="hljs-number">2</span>]);       <span class="hljs-comment">// 打印 2</span><br>arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123; <span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span> &#125;;    <span class="hljs-comment">// 现在 arr 指向了一个新的数组，旧的数组会被 JVM 回收</span><br>System.out.println(arr[<span class="hljs-number">2</span>]);       <span class="hljs-comment">// 打印 6</span><br></code></pre></td></tr></table></figure><h3 id="数组中的引用类型">数组中的引用类型</h3><p>思考下面代码的输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">String[] name = &#123; <span class="hljs-string">&quot;HIT&quot;</span>, <span class="hljs-string">&quot;SZ&quot;</span>, <span class="hljs-string">&quot;C++&quot;</span> &#125;;<br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> name[<span class="hljs-number">2</span>];<br>name[<span class="hljs-number">2</span>] = <span class="hljs-string">&quot;Java&quot;</span>;<br>System.out.println(name[<span class="hljs-number">2</span>]);<br>System.out.println(s);<br></code></pre></td></tr></table></figure><p>结果为</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">Java</span><br><span class="hljs-comment">C</span><span class="hljs-literal">++</span><br></code></pre></td></tr></table></figure><p>内存映射图：</p><figure><img src="../assets/basicOfJava_1.png" alt="basicOfJava_1" /><figcaption aria-hidden="true">basicOfJava_1</figcaption></figure><h3 id="多维数组">「多维」数组</h3><p>没有所谓的「多维数组」，它本质上是「数组的数组」。例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[][] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>][];<br></code></pre></td></tr></table></figure><p>是一个长度为 5 的「数组」数组，它内部的 5个数组因为现在还没有初始化，所以长度可以不给出。我们当然也可以在定义给出所有的项，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[][] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[][]&#123; &#123; <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-number">2</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">9</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125; &#125;;<br></code></pre></td></tr></table></figure><p>显然，多维数组中的每一行不一定要一样长。</p><h2 id="异常">异常</h2><p>Java 的异常捕获结构为 <code>try</code> - <code>catch</code> -<code>finally</code>。其中 <code>catch</code> 和 <code>finally</code>可以只出现一个。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// 做点啥</span><br>&#125; <span class="hljs-keyword">catch</span> (<span class="hljs-comment">/** 异常 **/</span>) &#123;<br>    <span class="hljs-comment">// 出现异常时做的事</span><br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>    <span class="hljs-comment">// 不管出现异常与否都要做的事</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="类与对象">类与对象</h2><h3 id="对象">对象</h3><ol type="1"><li>定义：客观存在的具体实体，具有明确定义的状态和行为</li><li>特征：标识符、属性、操作<ol type="1"><li>属性：与对象关联的变量，描述对象的静态特性</li><li>操作：与对相关联的函数，描述对象的动态特性</li></ol></li></ol><h3 id="类">类</h3><ol type="1"><li>与对象<ol type="1"><li>类是对象的抽象，是创建对象的模板</li><li>对象是类的具体事例</li><li>同一个类可以定义多个对象</li></ol></li><li>二者比较<ol type="1"><li>类是静态的，在程序设计的时候就定义好了</li><li>对象是动态的，在程序执行的时候可以被创建、修改、删除</li></ol></li></ol><h3 id="类的构造">类的构造</h3><p>类的访问权限：</p><figure><img src="../assets/basicOfJava_2.png" alt="basicOfJava_2" /><figcaption aria-hidden="true">basicOfJava_2</figcaption></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 见上表</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">private</span> String name;    <span class="hljs-comment">// private: 只有本类能访问。</span><br><span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> age;      <span class="hljs-comment">// protected: 包外不能访问。但如果子类在包外，也能访问。</span><br><span class="hljs-type">int</span> id;                 <span class="hljs-comment">// default: 包外不能访问。如果子类在包外，也不能访问。</span><br> <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> gender;  <span class="hljs-comment">// public: 谁都可以访问</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br><span class="hljs-built_in">this</span>.name = name;<br><span class="hljs-built_in">this</span>.age = age;<br>id = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name)</span> &#123;<br><span class="hljs-built_in">this</span>(name, <span class="hljs-number">22</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="静态类">静态类</h3><ol type="1"><li>静态成员属于类所有而不是某一具体对象所有</li><li>加载时间<ol type="1"><li>静态成员在类加载的时候被静态地分配地址空间和方法的入口地址</li><li>静态属性当且仅当在类初次加载的时候初始化</li></ol></li><li>实例<ol type="1"><li>非静态对象在创建对象的时候初始化，存在多个实例副本，各个对象之间的副本不互相影响</li><li>静态对象被所有的对象共享，在内存中只有一个副本</li></ol></li><li><code>static</code>属性是全局属性，可以直接通过类名访问，所以又叫类属性</li><li>调用限制<ol type="1"><li><code>static</code> 方法不可访问非 <code>static</code> 的方法：非<code>static</code> 的对象必须要实例化才能访问调</li><li>非 <code>static</code> 的方法可以访问 <code>static</code>的方法：通过类名访问</li></ol></li><li>静态块<ol type="1"><li><p>可以放在类的任何地方，类中可以有多个 <code>static</code>块</p></li><li><p>语法：</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">static</span> &#123;<br>totalNum = <span class="hljs-number">10000</span>;<br>System.out.println(<span class="hljs-string">&quot;static block run!&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></p></li><li><p>生命周期：在类加载的时候执行且只执行一次</p></li><li><p>用法：用于初始化静态变量和调用静态方法</p></li></ol></li><li>静态是否破坏了面向对象的特性？<ol type="1"><li>静态属于类而非具体对象</li><li>具有一定程度上的全局性：初始化时加载到内存，并且所有对象有访问权限</li><li>保持类的封装性</li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>课程笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Programming</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>锐评铃芽之旅</title>
    <link href="/%E9%94%90%E8%AF%84%E9%93%83%E8%8A%BD%E4%B9%8B%E6%97%85.html"/>
    <url>/%E9%94%90%E8%AF%84%E9%93%83%E8%8A%BD%E4%B9%8B%E6%97%85.html</url>
    
    <content type="html"><![CDATA[<h1 id="铃芽之旅所传达的">铃芽之旅所传达的</h1><p>称<铃芽之旅>为新海诚三部曲之三实在是很有道理.沿袭着一贯的灾难描写的文脉,铃芽对于灾难的描写似乎更为翔实,灾难甚至成为了本片剧情的核心驱动力,对灾难中情感的表达也成为了本片表达的核心--不同于前两部仅仅着眼于对爱情的描写,人与人之间的更泛化的情感在本片中被显式地推到了台前.不论是关门时候男主明确的昭告,希望在当下的幸福能延续更久;或是女主在关门时对土地上曾有的生生不息的想象;亦或是门后的常世中宁静的生活,影片中出现的种种要素都在试图讨论着这份灾难中的泛化的感情.它关乎人与人之间的一切情感,或者说,正是人与人之间朴素的温情.</p><p>几乎可以断言的是,正是为了处理这样的更泛化的感情,新海才会选择公路片(至少算是有公路要素的片子?)这种形式以及其带来的崭新的展开方式.正是如此才让更多人的相遇成为可能,才让人在无情的灾难面前得以先验地认识到情感的温度.而对于感情的后验式的认知则是由男女主这条线来处理的.两种不同属性的关系,分别勾勒着对于感情的先验的和后验的认知.</p><h1 id="传达到了吗">传达到了吗</h1><p>事实上,两条不同的勾勒路线都没有很好地完成使命.对情感的后验式的认知要想成立,首先要求的是这份情感要先验地存在--而片中男女主关系其实是很稀薄的.诚然影片有着"女主在小时候在常世中就见过男主"这种叙事诡计,但是这并不能弥补恋爱的"单薄".一段关系如果要更馥郁,势必需要一些私密的叙事空间,像是<君名>中两人长期的互换身体体验对方的私密生活,或是<天气>中只属于两人的奋斗历程.而这样的私密空间在铃芽中是几乎不存在的.相比于<君名><天气>中新海宁愿用一个甚至多个场景去单独呈现主角间的互动,新海却让铃芽的男主在开场15分钟后即陷入掉线状态,后期也只是一直为了追寻大臣而奔忙.虽然本片的恋爱的确平淡,但是在这样的奔忙之后,却是女主的"我要去找喜欢的人了"这样一句台词直接点明了亲密关系,这种关系的厚度显然是不足的.</p><p>先验式认知的情感处理得也有同样的缺乏厚度的问题.公路旅途上的相遇虽然直白地试图展现人与人之间的温情,但是影像上的处理是如此泛化,三幕场景都只是点到为止.新海诚当然是内敛的,但是内敛不意味着蜻蜓点水,不意味着主角自身情感对观众情感的引导完全失位.为什么是失位的呢?关门时涌入铃芽耳中的是泛泛的言语和声音,人间的温情缺少一个确切的情感落地点;姨妈对铃芽的爱也是泛泛而谈--姨妈为了铃芽做的牺牲几乎只有在一次争吵中草草交代了事,同样缺少确切的情感落地点;妈妈对铃芽的爱更是几无笔墨,灾难中最亲密的人之间的情感更成为了无法落地的空中楼阁.当感情无法锚定在一个确切的时空位置,只能流于泛泛,感情的厚度必然是不足的.</p><p>关键场景的缺失,让全片对灾难的表达同样浅尝辄止.在<君名>中,我们有陨石坑上主角的相见;在<天气>中,我们有男女主的天空坠落和男主的长距离奔跑--但铃芽中缺少这么一个具有力度的场景.唯一的力度可能也只是来自于铃芽回到老家挖出的日记中写有3.11的那一页,而且也是严重不足的--尽管影片中不时穿插着涂黑日记的画面,但是铃芽找到日记的过程是如此顺利成章--没有任何犹豫和模糊.涂黑日记本身是人脑对创伤性经历不可避免的模糊化的具象,包括前文铃芽对椅子缺腿的原因的闪烁其辞也体现着这种模糊,但是找到日记的过程却没有任何模糊,甚至在找到日记后也没有任何对过往记忆的确认,3.11就这样被直接糊脸--缺少了对记忆碎片的整理,缺少了私人化的情感体验,缺少了影像上的蓄力和角色情感的倾泻,单单通过一个场外的符号,带出的表达力度真的足够吗?我的评断是否定的.而作为全片灾难的集中象征的3.11就这样被轻描淡写,全片的关键场景由此不复存在.</p><p>我们甚至还可以批评片子的演出手段.3DLO的引入让更复杂的镜头成为可能,演出上的奇观自然也多了不少--铃芽开头奔跑的跟摇,椅子追逐猫猫时的多个运动镜头...但是奇观多了就一定好吗?如果奇观没有地基支撑,那么奇观的泛滥就只会像对着观众喊"狼来了"一般,最终使得奇观也无法调动观众的注意力.当然本片不少奇观造的都不错,但是总归是有那么几个缺少地基(比如开头的跟摇).而且我们还没有说到这些奇观画面上的不协调.</p><h1 id="铃芽背后的其他">铃芽背后的其他</h1><p>尽管闭门师在竭力避免蚓厄的发生,但<铃芽>中却放置了一个不可改变不可避免的"3.11".由此我们可以断言,<铃芽>某种程度上是对于灾难的再认知--与<你的名字>中试图挽回灾难中失去的爱人,<天气之子>中主动选择爱人拥抱灾难不同的是,<铃芽>中的核心灾难,也即"3.11,"首先是被放在一个不可处置的地位的.因此影片的所有情节都是在接受这一事实的基础上加以展开,而完全不同于前作中的"反抗"要素.</p><p><铃芽>中的新海在尽力告诉观众,接受灾难并坚定地生活下去才是面对灾难的解药,领悟了这一点后我们就能明白为什么3条腿的草太椅子依然能灵活地奔跑,即使是失去了曾经拥有的一条腿--即使灾后失去了曾经拥有的美好生活,我们依然能接受这一事实,我们生活如常,社会运转如常.</p><p>但是这种如常的背后并非不存在隐忧.灾难带来的伤痛真的就能随着时间流逝,随着一份轻描淡写的"接受"之心,而散入记忆的长河直至无影无踪吗?新海的回答当然是否定的,正如他自述的那样,"3.11"依然是他创作过程中的持续低音;正如影片中那座游乐场,始终停留在人们心中无法抹去;正如铃芽涂黑的一页页日记,总是在梦中闯入她的思绪.</p><p>不如说铃芽执意回老家正是为了寻求一份和解,事实上灾难中的幸存者或许都需要这份和解.铃芽在门中看到的辽阔的常世,那里面并不是悲伤,而是失去了情感的记忆.这种麻木是值得警惕的.可以猜测,要石的身体之所以冷若冰霜,正是因为对失去的哀叹化作了无边的麻木与虚无.幸存者也好,要石也好,都需要在对灾难的反复审视中确认生的可贵,从而让生的动力支撑自己在此时此地多停留一刻甚至一秒.</p><p><铃芽>关注的正是这种"后灾难"的疗愈,是痛苦背后更深刻的创伤的弥合过程.新海给出的回答,不是随着时间试着遗忘,而是在追思与审视中,了解生的可贵;影片中的灾难不再是一种需要避讳的苦难,而是需要确认的人生必然.</p><p>对新海来说,这何尝不是一种进步呢?</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
      <category>动画</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动画评论</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
