<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CryptoCTF 2024 Writeup</title>
    <link href="/CryptoCTF-2024.html"/>
    <url>/CryptoCTF-2024.html</url>
    
    <content type="html"><![CDATA[<p>CryptoCTF期间只顾着准备国赛，等到想起来的时候比赛已经结束了...姑且慢慢复现吧</p><span id="more"></span><h2 id="easy">Easy</h2><h3 id="alibos">Alibos</h3><blockquote><p>task</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> d, flag<br><br>get_context().precision = <span class="hljs-number">1337</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pad</span>(<span class="hljs-params">m, d</span>):<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>(m)) &lt; d:<br>m = <span class="hljs-built_in">str</span>(m) + <span class="hljs-string">&#x27;1&#x27;</span> * (d - <span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>(m)))<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(m)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">genkey</span>(<span class="hljs-params">d</span>):<br>skey = getRandomRange(<span class="hljs-number">10</span> ** (d - <span class="hljs-number">1</span>), <span class="hljs-number">10</span> ** d)<br>pkey = <span class="hljs-built_in">int</span>(<span class="hljs-number">10</span>**d * (sqrt(skey) - floor(sqrt(skey))))<br><span class="hljs-keyword">return</span> pkey, skey<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">m, pkey</span>):<br>m = pad(m, <span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>(pkey)))<br>d = <span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>(pkey))<br>c = (pkey + d ** <span class="hljs-number">2</span> * m) % (<span class="hljs-number">10</span> ** d)<br><span class="hljs-keyword">return</span> c<br><br>pkey, skey = genkey(d)<br><br>m = bytes_to_long(flag)<br>c = encrypt(m, pkey)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;pkey = <span class="hljs-subst">&#123;pkey&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;enc  = <span class="hljs-subst">&#123;c&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><p>没什么好说的。</p><blockquote><p>exp</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># sage</span><br>c = <br>pkey = <br>PR = Zmod(<span class="hljs-number">10</span>^<span class="hljs-number">313</span>)<br>d = <span class="hljs-number">313</span><br>m = PR(c-pkey)/PR(d^<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(m)<br><span class="hljs-comment"># 6170704326493336128242608193100736601774626903966803036318189045381903593682775829229200905376968543264526051111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111</span><br>m = <span class="hljs-number">617070432649333612824260819310073660177462690396680303631818904538190359368277582922920090537696854326452605</span><br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br><span class="hljs-comment"># CCTF&#123;h0M3_m4De_cRyp70_5ySTeM_1N_CryptoCTF!!!&#125;</span><br></code></pre></td></tr></table></figure><h3 id="mashy">Mashy</h3><blockquote><p>task</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5<br><span class="hljs-keyword">from</span> binascii <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> salt, flag<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">die</span>(<span class="hljs-params">*args</span>):<br>pr(*args)<br>quit()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pr</span>(<span class="hljs-params">*args</span>):<br>s = <span class="hljs-string">&quot; &quot;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>, args))<br>sys.stdout.write(s + <span class="hljs-string">&quot;\n&quot;</span>)<br>sys.stdout.flush()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sc</span>():<br><span class="hljs-keyword">return</span> sys.stdin.buffer.readline()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">xor</span>(<span class="hljs-params">s1, s2</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>([s1[_] ^ s2[_] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s1))])<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>border = <span class="hljs-string">&quot;┃&quot;</span><br>pr(        <span class="hljs-string">&quot;┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓&quot;</span>)<br>pr(border, <span class="hljs-string">&quot;.: Hi all, she did Mashy, you should do it too! Are you ready? :. &quot;</span>, border)<br>pr(        <span class="hljs-string">&quot;┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛&quot;</span>)<br><br>REC = []<br>cnt, STEP = <span class="hljs-number">0</span>, <span class="hljs-number">7</span><br>sh = md5(salt).digest()<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>pr(border, <span class="hljs-string">f&#x27;Please send your first input:  &#x27;</span>)<br>d1 = sc().strip()<br>pr(border, <span class="hljs-string">f&#x27;Please send your second input: &#x27;</span>)<br>d2 = sc().strip()<br><span class="hljs-keyword">try</span>:<br>d1 = hexlify(unhexlify(d1))<br>d2 = hexlify(unhexlify(d2))<br>h1 = md5(unhexlify(d1)).digest()<br>h2 = md5(unhexlify(d2)).digest()<br><span class="hljs-keyword">except</span>:<br>die(border, <span class="hljs-string">&#x27;Your inputs are not valid! Bye!!!&#x27;</span>)<br><span class="hljs-keyword">if</span> d1 != d2 <span class="hljs-keyword">and</span> d1 <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> REC <span class="hljs-keyword">and</span> d2 <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> REC:<br><span class="hljs-keyword">if</span> md5(xor(d1, d2)).hexdigest() != <span class="hljs-string">&#x27;ae09d7510659ca40eda3e45ca70e9606&#x27;</span>:<br><span class="hljs-keyword">if</span> hexlify(xor(xor(h1, h2), sh)) == <span class="hljs-string">b&#x27;a483b30944cbf762d4a3afc154aad825&#x27;</span>:<br>REC += [d1, d2]<br><span class="hljs-keyword">if</span> cnt == STEP:<br>die(border, <span class="hljs-string">f&#x27;Congrats! the flag: <span class="hljs-subst">&#123;flag&#125;</span>&#x27;</span>)<br>pr(border, <span class="hljs-string">&#x27;Good job, try next level :P&#x27;</span>)<br>cnt += <span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br>die(border, <span class="hljs-string">&#x27;Your input is not correct! Bye!&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>die(border, <span class="hljs-string">&#x27;No this one! Sorry!!&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>die(border, <span class="hljs-string">&#x27;Kidding me!? Bye!!&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>main()<br><br></code></pre></td></tr></table></figure><p>md5(salt)还要猜，真是酣畅淋漓的Crypto啊😅😅😅</p><p>那就直接赌a483b30944cbf762d4a3afc154aad825就是md5(salt)，没想到还真是...fastcoll秒了</p><h2 id="medium">Medium</h2><h3 id="melek">Melek</h3><blockquote><p>task</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment">#!/usr/bin/env sage</span><br><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> flag <span class="hljs-keyword">import</span> flag<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">msg, nbit</span>):<br>m, p = bytes_to_long(msg), getPrime(nbit)<br><span class="hljs-keyword">assert</span> m &lt; p<br>e, t = randint(<span class="hljs-number">1</span>, p - <span class="hljs-number">1</span>), randint(<span class="hljs-number">1</span>, nbit - <span class="hljs-number">1</span>)<br>C = [randint(<span class="hljs-number">0</span>, p - <span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(t - <span class="hljs-number">1</span>)] + [<span class="hljs-built_in">pow</span>(m, e, p)]<br>R.&lt;x&gt; = GF(p)[]<br>f = R(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(t): f += x**(t - i - <span class="hljs-number">1</span>) * C[i]<br>P = [<span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(nbit))]<br>shuffle(P)<br>P = P[:t]<br>PT = [(a, f(a)) <span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> [randint(<span class="hljs-number">1</span>, p - <span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(t)]]<br><span class="hljs-keyword">return</span> e, p, PT<br><br>nbit = <span class="hljs-number">512</span><br>enc = encrypt(flag, nbit)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;enc = <span class="hljs-subst">&#123;enc&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><p>给了一个 <span class="math inline">\(t-1\)</span>次多项式上的t个点，常数项是 <spanclass="math inline">\(m^{e}\bmod{p}\)</span>,直接Lagrange插值求出多项式然后拿常数项去解RSA就行。注意这里e和phin不互素。</p><blockquote><p>exp</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># sage</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><br><span class="hljs-built_in">exec</span>(<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;output.txt&quot;</span>).read())<br><br>e, p, PT = enc<br><br>R.&lt;x&gt; = PolynomialRing(Zmod(p))<br><br>poly = R.lagrange_polynomial(PT)<br>ct = poly.coefficients()[<span class="hljs-number">0</span>]<br><br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> GF(p)(ct).nth_root(e, <span class="hljs-built_in">all</span>=<span class="hljs-literal">True</span>):<br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">int</span>(c)))<br><br><span class="hljs-comment"># b&#x27;CCTF&#123;SSS_iZ_4n_3fF!ciEn7_5ecr3T_ShArIn9_alGorItHm!&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="nazdone">Nazdone</h3><blockquote><p>task</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> params, flag<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sol</span>(<span class="hljs-params">m, a, z</span>):<br>p = m * (a - <span class="hljs-number">1</span>) % <span class="hljs-number">2</span> + <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>R = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, a))<br>shuffle(R)<br><span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> R[:z]:<br>p += getRandomRange(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>) * m ** r<br><span class="hljs-keyword">if</span> isPrime(p):<br><span class="hljs-keyword">return</span> p<br><span class="hljs-keyword">else</span>:<br>p = m * (a - <span class="hljs-number">1</span>) % <span class="hljs-number">2</span> + <span class="hljs-number">1</span><br><br><br>p, q, r = [sol(*params) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;007&#x27;</span>]<br>n = p * q * r<br>m = bytes_to_long(flag)<br>c = <span class="hljs-built_in">pow</span>(m, params[<span class="hljs-number">0</span>] ** <span class="hljs-number">3</span> + params[<span class="hljs-number">2</span>] - <span class="hljs-number">2</span>, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;n = <span class="hljs-subst">&#123;n&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c = <span class="hljs-subst">&#123;c&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><p>已知的信息只有素数的生成方式，需要想办法把n分解掉。</p><p>看到题目首先想到的是maple出过的一道多项式上进行Pollard's p-1分解的<ahref="https://github.com/maple3142/My-CTF-Challenges/tree/master/ImaginaryCTF%202023/Sus">题目</a>，但是这里压根不知道生成多项式长什么样，那Pollard'sp-1分解这条路就走不通了。</p><p>所以得想办法把params里的至少一项恢复出来。事实上题目给出的条件是在说，n的因数在m进制表示下的系数都很小，除了最低位以外都是0或1，所以n在m进制表示下的系数其实也不会很大。从统计学上来看，也就是n在m进制表示下的系数和不会很大，那就先画个图统计一下m变化时这些系数和的变化趋势：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># ipynb</span><br><span class="hljs-keyword">from</span> matplotlib <span class="hljs-keyword">import</span> pyplot <span class="hljs-keyword">as</span> plt<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">base_expan</span>(<span class="hljs-params">n, m</span>):<br>    expan = []<br>    <span class="hljs-keyword">while</span> n!=<span class="hljs-number">0</span>:<br>        expan.append(n%m)<br>        n = n//m<br>    <span class="hljs-keyword">return</span> expan[::-<span class="hljs-number">1</span>]<br><br>n = <br>basesum = []<br><span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>,<span class="hljs-number">1000</span>):<br>    bases = base_expan(n, m)<br>    basesum.append((m,<span class="hljs-built_in">sum</span>(bases)))<br><br>plt.plot(basesum)<br>plt.show()<br></code></pre></td></tr></table></figure><figure><img src="../assets/image-4.png" alt="很明显的跳变" /><figcaption aria-hidden="true">很明显的跳变</figcaption></figure><p>看下跳变点具体的值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># ipynb</span><br>msort = <span class="hljs-built_in">sorted</span>(basesum[<span class="hljs-number">300</span>:<span class="hljs-number">400</span>], key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(msort[<span class="hljs-number">0</span>])<br><br><span class="hljs-comment"># (361, 8497)</span><br></code></pre></td></tr></table></figure><p>看起来m是361，但是验证一下就会发现这样求得的系数并不符合题意：</p><figure><img src="../assets/image-5.png" alt="寄！" /><figcaption aria-hidden="true">寄！</figcaption></figure><p>这样求出来的系数有不在 <span class="math inline">\(\{0,1\}\)</span>内的数。不过它们全是19的倍数，而且我们正好还有 <spanclass="math inline">\(19^{2} == 361\)</span> ，那就说明m其实是19。</p><p>接下来就可以考虑在多项式环上分解n了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># sage</span><br>n = <br>c = <br>m = <span class="hljs-number">19</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">base_expan</span>(<span class="hljs-params">n, m</span>):<br>    expan = []<br>    <span class="hljs-keyword">while</span> n!=<span class="hljs-number">0</span>:<br>        expan.append(n%m)<br>        n = n//m<br>    <span class="hljs-keyword">return</span> expan<br><br>PR.&lt;x&gt; = PolynomialRing(ZZ)<br>f = PR(base_expan(n, m))<br>p = f.factor()<br><span class="hljs-built_in">print</span>(p)<br><span class="hljs-keyword">for</span> pp, i <span class="hljs-keyword">in</span> p:<br>    <span class="hljs-built_in">print</span>(pp(m))<br><br><span class="hljs-comment"># (x^106 + x^81 + x^77 + x^59 + x^47 + x^42 + x^22 + x^11 + x^7 + 2) * (x^107 + x^88 + x^51 + x^43 + x^37 + x^36 + x^35 + x^18 + x^14 + 2) * (x^108 + x^93 + x^74 + x^64 + x^31 + 2)</span><br><span class="hljs-comment"># 3530869780887683268140728773245395170410635845517928489976021534009516369358447511411853596093628646212566313257712207746790503704123439</span><br><span class="hljs-comment"># 67086525836865982094673880600810256005961617151283317566078153226175705789594094624822652838168627925461219084263915001883644637391279141</span><br><span class="hljs-comment"># 1274643990900453659882765495755380673132370043776742526720540623203930562265302201405804416214498793910236254519606076438989349099317154363</span><br></code></pre></td></tr></table></figure><p>然后还需要爆一下z的值去得到e。根据每个多项式因子的项数可以猜到z大概在15左右。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>n = <br>c = <br>p = <br>q = <br>r = <br><br>m = <span class="hljs-number">19</span><br><span class="hljs-keyword">for</span> z <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">20</span>):<br>    <span class="hljs-keyword">try</span>:<br>        e = m ** <span class="hljs-number">3</span> + z - <span class="hljs-number">2</span><br>        phin = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)*(r-<span class="hljs-number">1</span>)<br>        d = inverse(e, phin)<br>        m_ = long_to_bytes(<span class="hljs-built_in">pow</span>(c, d, n))<br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">b&#x27;CCTF&#x27;</span> <span class="hljs-keyword">in</span> m_):<br>            <span class="hljs-built_in">print</span>(m_)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-comment"># b&#x27;CCTF&#123;nUmb3r5_1N_D!fFerEn7_8As35_4r3_n!cE!?&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>成功。(还好最后没再来一个e和phin不互素...)</p><h3 id="joe-19">Joe-19</h3><blockquote><p>task</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment">#!/usr/bin/env sage</span><br><br><span class="hljs-keyword">from</span> GPT <span class="hljs-keyword">import</span> GPT6 <span class="hljs-comment"># deep fake </span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> flag <span class="hljs-keyword">import</span> flag<br><br>P = [GPT6(<span class="hljs-string">&#x27;A 512-bit prime appears in consecutive digits of e&#x27;</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)]<br>n, m = prod(P), bytes_to_long(flag)<br>c = <span class="hljs-built_in">pow</span>(m, <span class="hljs-number">0x10001</span>, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;n = <span class="hljs-subst">&#123;n&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c = <span class="hljs-subst">&#123;c&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><p>GPT的题那就扔给GPT吧...4o模型吐出来的代码长下面这样</p><blockquote><p>exp</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> mpmath<br><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> isprime<br><br><span class="hljs-comment"># 设置 mpmath 计算精度（假设计算 20000 位小数）</span><br><span class="hljs-comment"># 这里AI选定的本来是5000，试了几次发现只有在15000-20000位之间才能找到n的第一个质因数</span><br>mpmath.mp.dps = <span class="hljs-number">20000</span><br>n = <br><span class="hljs-comment"># 获取自然常数 e 的小数部分（去掉小数点）</span><br>e_str = <span class="hljs-built_in">str</span>(mpmath.e).replace(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br><br><span class="hljs-comment"># 遍历每一段 154 位长的数字，因为512bit在十进制下长度约为154</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(e_str) - <span class="hljs-number">153</span>):<br>    number_str = e_str[i:i + <span class="hljs-number">154</span>]<br>    number = <span class="hljs-built_in">int</span>(number_str)<br>    <br>    <span class="hljs-keyword">if</span> isprime(number) <span class="hljs-keyword">and</span> (n % number == <span class="hljs-number">0</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Found a prime number: <span class="hljs-subst">&#123;number&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">break</span>  <span class="hljs-comment"># 找到一个就退出</span><br><br><span class="hljs-comment"># 7728751393377105569802455757436190501772466214587592374418657530064998056688376964229825501195065837843125232135309371235243969149662310110328243570065781</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> inverse,long_to_bytes<br><br>c = <br>p = <span class="hljs-number">7728751393377105569802455757436190501772466214587592374418657530064998056688376964229825501195065837843125232135309371235243969149662310110328243570065781</span><br><br>d = inverse(<span class="hljs-number">65537</span>,p-<span class="hljs-number">1</span>)<br>m = <span class="hljs-built_in">pow</span>(c,d,p)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br><br><span class="hljs-comment"># b&#x27;CCTF&#123;ASIS_h1r3_7aL3nT5_t0_cO1La8orAt3_!N_Crypto_CTF!&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>嘿，她还真就在第一个质因数的地方出了！</p><h3 id="honey">Honey</h3><blockquote><p>task</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> sqrt<br><span class="hljs-keyword">from</span> flag <span class="hljs-keyword">import</span> flag<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen_params</span>(<span class="hljs-params">nbit</span>):<br>p, Q, R, S = getPrime(nbit), [], [], []<br>d = <span class="hljs-built_in">int</span>(sqrt(nbit &lt;&lt; <span class="hljs-number">1</span>))<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(d):<br>Q.append(getRandomRange(<span class="hljs-number">1</span>, p - <span class="hljs-number">1</span>))<br>R.append(getRandomRange(<span class="hljs-number">0</span>, p - <span class="hljs-number">1</span>))<br>S.append(getRandomRange(<span class="hljs-number">0</span>, p - <span class="hljs-number">1</span>))<br><span class="hljs-keyword">return</span> p, Q, R, S<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">m, params</span>):<br>p, Q, R, S = params<br><span class="hljs-keyword">assert</span> m &lt; p<br>d = <span class="hljs-built_in">int</span>(sqrt(p.bit_length() &lt;&lt; <span class="hljs-number">1</span>))<br>C = []<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(d):<br>r, s = [getRandomNBitInteger(d) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;01&#x27;</span>]<br>c = Q[_] * m + r * R[_] + s * S[_]<br>C.append(c % p)<br><span class="hljs-keyword">return</span> C<br><br><br>nbit = <span class="hljs-number">512</span><br>params = gen_params(<span class="hljs-number">512</span>)<br>m = bytes_to_long(flag)<br>C = encrypt(m, params)<br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;params_enc.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)<br>f.write(<span class="hljs-string">f&#x27;p = <span class="hljs-subst">&#123;params[<span class="hljs-number">0</span>]&#125;</span>\n&#x27;</span>)<br>f.write(<span class="hljs-string">f&#x27;Q = <span class="hljs-subst">&#123;params[<span class="hljs-number">1</span>]&#125;</span>\n&#x27;</span>)<br>f.write(<span class="hljs-string">f&#x27;R = <span class="hljs-subst">&#123;params[<span class="hljs-number">2</span>]&#125;</span>\n&#x27;</span>)<br>f.write(<span class="hljs-string">f&#x27;S = <span class="hljs-subst">&#123;params[<span class="hljs-number">3</span>]&#125;</span>\n&#x27;</span>)<br>f.write(<span class="hljs-string">f&#x27;C = <span class="hljs-subst">&#123;C&#125;</span>&#x27;</span>)<br>f.close()<br></code></pre></td></tr></table></figure><p>我们知道 <spanclass="math inline">\(mQ_{i}+r_{i}R_{i}+s_{i}S_{i}\equiv{C_{i}}\bmod{p}\)</span>,并且<span class="math inline">\(r_{i}, s_{i}\)</span>相较于 <spanclass="math inline">\(Q, R, S\)</span>都是比较小的，所以很自然地考虑LLL。</p><p>形式上是HNP的套路，拿两组消去m就是经典HNP形式，多引入几组构造个格肯定就拿下了。但是我懒，先试试看只拿一组构造的格能不能干出来，毕竟r和s实在是很小。</p><blockquote><p>exp</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>p = <br>Q =  <span class="hljs-comment"># Q_0</span><br>R =  <span class="hljs-comment"># R_0</span><br>S =  <span class="hljs-comment"># S_0</span><br>C =  <span class="hljs-comment"># C_0</span><br><br><br>L = Matrix(QQ,[<br>    [<span class="hljs-number">1</span>/<span class="hljs-number">2</span>^<span class="hljs-number">320</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,Q],<br>    [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,R],<br>    [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,S],<br>    [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>^<span class="hljs-number">320</span>,-C],<br>    [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,p]<br>])<br>L[:,-<span class="hljs-number">1</span>:] *= <span class="hljs-number">2</span>^<span class="hljs-number">320</span><br>L = L.LLL()<br><span class="hljs-built_in">print</span>(L)<br><br><span class="hljs-comment"># L[-1][-2] == 2^320</span><br><br>r0, s0 = L[-<span class="hljs-number">1</span>][<span class="hljs-number">1</span>], L[-<span class="hljs-number">1</span>][<span class="hljs-number">2</span>] <span class="hljs-comment"># 2638621544, 3219364802</span><br><br><br>m = (C - r0*R - s0*S)*inverse(Q,p) % p<br><br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br><br><span class="hljs-comment"># b&#x27;CCTF&#123;3X7eNdED_H!dD3n_nNm8eR_pR0Bl3m_iN_CCTF!!&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>稍微调一下格的大小，直接一组就出了，给的那么多组Q,R,S甚至都没什么用...</p><h3 id="alilbols">Alilbols</h3><blockquote><p>task</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> d, flag<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">genkey</span>(<span class="hljs-params">d</span>):<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>f = getRandomRange(<span class="hljs-number">1</span>, <span class="hljs-built_in">int</span>(sqrt(<span class="hljs-number">2</span>) * <span class="hljs-number">10</span> ** d))<br>g = getRandomRange(<span class="hljs-number">10</span> ** d, <span class="hljs-built_in">int</span>(sqrt(<span class="hljs-number">2</span>) * <span class="hljs-number">10</span> ** d))<br><span class="hljs-keyword">if</span> gcd(f, <span class="hljs-number">10</span> * g) == <span class="hljs-number">1</span>:<br>q = <span class="hljs-number">4</span> * <span class="hljs-number">100</span> ** d<br>h = inverse(f, q) * g % q<br><span class="hljs-keyword">if</span> gcd(h, <span class="hljs-number">10</span> * d) == <span class="hljs-number">1</span>:<br><span class="hljs-keyword">break</span><br>pkey, skey = (d, h), (f, g)<br><span class="hljs-keyword">return</span> pkey, skey<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">m, pkey</span>):<br>d, h = pkey<br>q = <span class="hljs-number">4</span> * <span class="hljs-number">100</span> ** d<br><span class="hljs-keyword">assert</span> m &lt; <span class="hljs-number">10</span> ** d<br>r = getRandomRange(<span class="hljs-number">1</span>, <span class="hljs-number">10</span> ** d // <span class="hljs-number">2</span>)<br>c = (r * h + m + r) % q<br><span class="hljs-keyword">return</span> c<br><br>pkey, _ = genkey(d)<br>m = bytes_to_long(flag)<br>c = encrypt(m, pkey)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;h = <span class="hljs-subst">&#123;pkey[<span class="hljs-number">1</span>]&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c = <span class="hljs-subst">&#123;c&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><p>很经典的NTRU，我们有</p><p><span class="math display">\[c=(r(h+1)+m)\bmod{q}\]</span></p><p>其中只有h已知。各个参数的范围都在代码里，不赘述了，总之这里的q不知道，得找到d的值去恢复q。直接枚举是可行的，不过也可以先猜一波h的十进制位数恰好就是2d位，若真，则d为563。</p><p>造个格子跑一下：</p><blockquote><p>exp</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># sage</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><br>h = <br>c = <br>d = <span class="hljs-number">563</span><br>q = <span class="hljs-number">4</span> * <span class="hljs-number">100</span> ** d<br>M = Matrix(ZZ,[<br>    [<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,h+<span class="hljs-number">1</span>],<br>    [<span class="hljs-number">0</span>,<span class="hljs-number">2</span>^<span class="hljs-number">2048</span>,-c],<br>    [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,q]<br>])<br><br><br>M = M.LLL()<br><br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">abs</span>(M[-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>])))<br><br><span class="hljs-comment"># b&#x27;CCTF&#123;4_c0N9rU3n7!aL_Pu81iC_k3Y_cRyp70_5ySTeM_1N_CCTF!!&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>然后就真的拿到了。</p><h3 id="ally">Ally</h3><p>非常有CryptoCTF味道的题，"只需"求解一个Diophantineequation即可。对我这种懒人，手解显然是不在考虑范围内的，先搜索一波前人智慧。</p><p>搜了下方程的形式还真搜出来<ahref="https://projecteuclid.org/journals/bulletin-of-the-belgian-mathematical-society-simon-stevin/volume-17/issue-2/On-a-Diophantine-Equation-of-Stroeker/10.36045/bbms/1274896199.full">一篇论文</a></p><p>不过很遗憾，论文开篇就表示N是奇数的情况已经研究过了，因此本篇只研究偶数的情况...更抽象的是N是奇数情况时的参考文献根本搜不到（如果正在阅读本文的你恰好找到了link，麻烦贴在评论区好吗😊😊）</p><p>不过这篇文章里还是有一些地方提到了odd的情况，比如</p><p><code>If v = N, then 4u = N + 3, which is impossible since N + 3 is odd. Thus, v ̸= N</code></p><p>如果我偏要v=N呢？这时我们有</p><p><span class="math display">\[\begin{aligned}2x &amp;= v−u+l+1 \\2y &amp;= v−u−l+1 \\v &amp;= p \\p &amp;= N \\uv &amp;= Nl \\4u &amp;= p+3\end{aligned}\]</span></p><p>代换一下有</p><p><span class="math display">\[\begin{aligned}2x &amp;= 3u+l-2 \\2y &amp;= 3u-l-2 \\u &amp;= l\end{aligned}\]</span></p><p>所以我们得到 <span class="math inline">\(x=2u-1, y=u-1\)</span></p><p>验个证先：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># sage</span><br>PR.&lt;u&gt; = PolynomialRing(ZZ)<br>p = <span class="hljs-number">4</span>*u-<span class="hljs-number">3</span><br>x = <span class="hljs-number">2</span>*u-<span class="hljs-number">1</span><br>y = u-<span class="hljs-number">1</span><br>LL = p*(x-y)^<span class="hljs-number">3</span><br>RR = (x^<span class="hljs-number">2</span>+y)*(x+y^<span class="hljs-number">2</span>)<br><br><span class="hljs-built_in">print</span>(LL==RR)<br></code></pre></td></tr></table></figure><figure><img src="../assets/image-6.png" alt="能Sagemath的为什么要手推呢" /><figcaption aria-hidden="true">能Sagemath的为什么要手推呢</figcaption></figure><p>按这个格式提交答案就好了。</p><blockquote><p>exp</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> re<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_ans</span>(<span class="hljs-params">bits</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        p = getPrime(bits)<br>        <span class="hljs-keyword">if</span> p % <span class="hljs-number">4</span> == <span class="hljs-number">1</span>:<br>            k = p // <span class="hljs-number">4</span><br>            x, y = <span class="hljs-number">2</span> * k + <span class="hljs-number">1</span>, k<br>            <span class="hljs-keyword">return</span> p, x, y<br>        <br>conn = remote(<span class="hljs-string">&#x27;00.cr.yp.toc.tf&#x27;</span>, <span class="hljs-number">13777</span>)<br>pattern = <span class="hljs-string">r&#x27;(.+?)-bit&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>):<br>    conn.recvuntil(<span class="hljs-string">&#x27;send your&#x27;</span>)<br>    s = conn.recvline().decode()<br>    mat = re.search(pattern, s)<br>    bits = <span class="hljs-built_in">int</span>(mat.group(<span class="hljs-number">1</span>))<br>    p, x, y = get_ans(bits)<br>    conn.sendline(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;p&#125;</span>&#x27;</span>)<br>    conn.sendline(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;x&#125;</span>,<span class="hljs-subst">&#123;y&#125;</span>&#x27;</span>)<br><br>conn.interactive()<br><br><span class="hljs-comment"># Congratz! You got the flag: b&#x27;CCTF&#123;Di0phaNtinE_eQuaT1on_iZ_4n_equ4tion_wiTh_int3ger_solu7Ions_0nly!&#125;&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Writeups</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>imaginaryCTF round46</title>
    <link href="/imaginaryCTF-round46.html"/>
    <url>/imaginaryCTF-round46.html</url>
    
    <content type="html"><![CDATA[<h1 id="misc">Misc</h1><h2 id="spooky-sound">Spooky Sound</h2><p>wav，先拖下来Audacity看一眼频谱，果然就有flag。</p><figure><img src="../assets/image.png" alt="flag" /><figcaption aria-hidden="true">flag</figcaption></figure><h2 id="last-minute">Last Minute</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    srand(time(<span class="hljs-literal">NULL</span>));<br><br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* flag = <span class="hljs-string">&quot;[redacted]&quot;</span>;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">strlen</span>(flag); i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%02x&quot;</span>, flag[i] ^ (rand() % <span class="hljs-number">256</span>));<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>直截了当的爆破。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">int</span> flag[]=&#123;<span class="hljs-number">0x94</span>,<span class="hljs-number">0x1e</span>,<span class="hljs-number">0x94</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0x87</span>,<span class="hljs-number">0xfa</span>,<span class="hljs-number">0xb0</span>,<span class="hljs-number">0x58</span>,<span class="hljs-number">0xfd</span>,<span class="hljs-number">0xe5</span>,<span class="hljs-number">0xb6</span>,<span class="hljs-number">0x0a</span>,<span class="hljs-number">0x1b</span>,<span class="hljs-number">0xd5</span>,<span class="hljs-number">0x39</span>,<span class="hljs-number">0xee</span>,<span class="hljs-number">0x4d</span>,<span class="hljs-number">0x55</span>,<span class="hljs-number">0xb7</span>,<span class="hljs-number">0x08</span>,<span class="hljs-number">0x70</span>,<span class="hljs-number">0xf1</span>,<span class="hljs-number">0x29</span>,<span class="hljs-number">0xba</span>,<span class="hljs-number">0x6b</span>,<span class="hljs-number">0x2a</span>,<span class="hljs-number">0x76</span>,<span class="hljs-number">0x71</span>,<span class="hljs-number">0x76</span>,<span class="hljs-number">0x58</span>,<span class="hljs-number">0xe4</span>,<span class="hljs-number">0xce</span>,<span class="hljs-number">0xea</span>,<span class="hljs-number">0x1c</span>,<span class="hljs-number">0xc0</span>,<span class="hljs-number">0xb2</span>,<span class="hljs-number">0x5d</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0x84</span>,<span class="hljs-number">0xff</span>,<span class="hljs-number">0x7c</span>,<span class="hljs-number">0x2c</span>,<span class="hljs-number">0x4c</span>,<span class="hljs-number">0xb4</span>,<span class="hljs-number">0x8b</span>,<span class="hljs-number">0xe6</span>,<span class="hljs-number">0x6e</span>,<span class="hljs-number">0x28</span>,<span class="hljs-number">0xa4</span>,<span class="hljs-number">0xd5</span>,<span class="hljs-number">0xed</span>,<span class="hljs-number">0x96</span>,<span class="hljs-number">0x09</span>,<span class="hljs-number">0xfc</span>,<span class="hljs-number">0xc4</span>,<span class="hljs-number">0xc8</span>,<span class="hljs-number">0x6f</span>&#125;;<br><br>    <span class="hljs-type">int</span> len = <span class="hljs-keyword">sizeof</span>(flag) / <span class="hljs-keyword">sizeof</span>(flag[<span class="hljs-number">0</span>]);<br>    <span class="hljs-type">char</span> decrypted[len + <span class="hljs-number">1</span>]; <br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> <span class="hljs-type">int</span> seed = <span class="hljs-number">1715867640</span>; seed &lt; <span class="hljs-number">1715878940</span>; seed++) &#123;<br>        srand(seed);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; len; j++) &#123;<br>            decrypted[j] = flag[j] ^ (rand() % <span class="hljs-number">256</span>);<br>        &#125;<br>        decrypted[len] = <span class="hljs-string">&#x27;\0&#x27;</span>; <br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strstr</span>(decrypted, <span class="hljs-string">&quot;ictf&quot;</span>) != <span class="hljs-literal">NULL</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Seed: %ld\n&quot;</span>, seed);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Decrypted string: %s\n&quot;</span>, decrypted);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="crypto">Crypto</h1><h2 id="xorsar">xorsar</h2><p><code>hbugzchu^gmhqqhof^guv&gt;^0e8c3028|</code></p><p>实验可知<span class="math inline">\(cipher[i] = flag[i] \oplus1\)</span>，xor回去即可。</p><h2 id="random-base">Random Base</h2><p><code>OED8WECRFCS6/TC9$DUICGPEFQEGS6BM6*.CN-DZ2</code></p><p>字母特征猜出是base45。</p><h2 id="strange-base">Strange Base</h2><p><code>aQ==Yw==dA==Zg==ew==dg==Mw==cg==eQ==Xw==NQ==Nw==cg==NA==bg==Zw==Mw==Xw==Yg==NA==cw==Mw==Xw==Ng==NA==IQ==fQ==</code></p><p>很容易看出来是逐字符的base64，4字一组decode即可。</p><h2 id="so-much-xor">So much XOR</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> xor <span class="hljs-comment"># pwntools xor function</span><br><span class="hljs-keyword">import</span> random<br>flag = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag.txt&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>).read()<br>key1 = <span class="hljs-string">b&#x27;supersecurekey&#x27;</span><br>key2=<span class="hljs-string">b&#x27;verysecretkey&#x27;</span><br>iters1 = random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>)<br>iters2 = random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>)<br>enc = flag<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(iters1):<br>    enc = xor(enc,key1)<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(iters2):<br>        enc = xor(enc,key2)<br><br><span class="hljs-comment"># b&#x27;\x1a\x16\x04\x03\t\x00\n&lt;\x18\x07\x06\x03:\x00\x16\x01/\x16\x1d,\t\n\x01\x06\t\x0e\x18&#x27;</span><br></code></pre></td></tr></table></figure><p>异或满足交换律和结合律，并且和同一个数异或两次会还原自身，所以做的这么多异或无非就是异或了0次或者1次。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> xor <span class="hljs-comment"># pwntools xor function</span><br><br>cipher = <span class="hljs-string">b&#x27;\x1a\x16\x04\x03\t\x00\n&lt;\x18\x07\x06\x03:\x00\x16\x01/\x16\x1d,\t\n\x01\x06\t\x0e\x18&#x27;</span><br>key1 = <span class="hljs-string">b&#x27;supersecurekey&#x27;</span><br>key2=<span class="hljs-string">b&#x27;verysecretkey&#x27;</span><br><span class="hljs-built_in">print</span>(xor(cipher, key1))<br><span class="hljs-built_in">print</span>(xor(cipher, key2))<br><span class="hljs-built_in">print</span>(xor(xor(cipher, key1),key2))<br></code></pre></td></tr></table></figure><h1 id="reverse">Reverse</h1><h2 id="tape-reader">Tape Reader</h2><p>程序会简单地读取纸带做对应操作。纸带和操作都明确给出了，逆操作即可。需要注意的是，BinaryNinja似乎解析纸带数组时会出现错误，这部分最好用IDA去做。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIZE 21</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">char</span> command[] = <span class="hljs-string">&quot;aaiasiasassaiaasaiaiaaasssiasisaasiasissaiaasaiasisaisaisaiiaasaiassissaiasii&quot;</span>;<br>    <span class="hljs-type">int</span> arr[SIZE] = &#123;<span class="hljs-number">0x81</span>, <span class="hljs-number">0x6a</span>, <span class="hljs-number">0x7f</span>, <span class="hljs-number">0x6b</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x6e</span>, <span class="hljs-number">0x7a</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x5e</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x6a</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x6f</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x6f</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x74</span>&#125;;<br>    <span class="hljs-type">int</span> v4 = <span class="hljs-number">21</span>;<br>    <span class="hljs-type">int</span> i, len = <span class="hljs-built_in">strlen</span>(command);<br><br>    <span class="hljs-keyword">for</span> (i = len - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; --i) &#123;<br>        <span class="hljs-keyword">switch</span> (command[i]) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;a&#x27;</span>:<br>                arr[v4] -= <span class="hljs-number">5</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;i&#x27;</span>:<br>                --v4;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;s&#x27;</span>:<br>                arr[v4] += <span class="hljs-number">3</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;x&#x27;</span>:<br>                arr[v4] ^= arr[v4 + <span class="hljs-number">1</span>];<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">continue</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; SIZE; ++i) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0x%x&quot;</span>, arr[i]);<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Writeups</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DragonKnight CTF 2024 Writeup</title>
    <link href="/DragonKnight-CTF-2024-Writeup.html"/>
    <url>/DragonKnight-CTF-2024-Writeup.html</url>
    
    <content type="html"><![CDATA[<p>在Del0n1x里打的一场比赛，把Crypto方向的全解了——当然，主要是得益于题目的idea大部分都是借鉴的，所以只要检索能力强基本就能AK。</p><h1 id="crypto">Crypto</h1><h2 id="crypto_签到">Crypto_签到</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>m = <span class="hljs-string">b&#x27;flag&#123;********&#125;&#x27;</span><br>a =  getPrime(<span class="hljs-number">247</span>)<br>b =  getPrime(<span class="hljs-number">247</span>)<br>n =  getPrime(<span class="hljs-number">247</span>)<br><br>seed = bytes_to_long(m)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LCG</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, seed, a, b, m</span>):<br>        self.seed = seed  <br>        self.a = a  <br>        self.b = b  <br>        self.m = m  <br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">generate</span>(<span class="hljs-params">self</span>):<br>        self.seed = (self.a * self.seed + self.b) % self.m<br>        self.seed = (self.a * self.seed + self.b) % self.m<br>        <span class="hljs-keyword">return</span> self.seed<br><br>seed = bytes_to_long(m)<br><br>output = LCG(seed,a,b,n)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(getPrime(<span class="hljs-number">16</span>)):<br>    output.generate()<br><br><span class="hljs-built_in">print</span>(output.generate())<br><span class="hljs-built_in">print</span>(output.generate())<br><span class="hljs-built_in">print</span>(output.generate())<br><span class="hljs-built_in">print</span>(output.generate())<br><span class="hljs-built_in">print</span>(output.generate())<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">5944442525761903973219225838876172353829065175803203250803344015146870499</span><br><span class="hljs-string">141002272698398325287408425994092371191022957387708398440724215884974524650</span><br><span class="hljs-string">42216026849704835847606250691811468183437263898865832489347515649912153042</span><br><span class="hljs-string">67696624031762373831757634064133996220332196053248058707361437259689848885</span><br><span class="hljs-string">19724224939085795542564952999993739673429585489399516522926780014664745253</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>每次输出更新两次内部状态的LCG。看成一个新的系数分别为<spanclass="math inline">\(a&#39;=a^{2},b&#39;=(a+1)b\)</span>的LCG就好。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><br>output = [<span class="hljs-number">5944442525761903973219225838876172353829065175803203250803344015146870499</span>,<span class="hljs-number">141002272698398325287408425994092371191022957387708398440724215884974524650</span>,<span class="hljs-number">42216026849704835847606250691811468183437263898865832489347515649912153042</span>,<span class="hljs-number">67696624031762373831757634064133996220332196053248058707361437259689848885</span>,<span class="hljs-number">19724224939085795542564952999993739673429585489399516522926780014664745253</span>]<br>t = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(output)):<br>    t.append(output[i]-output[i-<span class="hljs-number">1</span>])<br><br>T = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(t)-<span class="hljs-number">1</span>):<br>    T.append(t[i+<span class="hljs-number">1</span>]*t[i-<span class="hljs-number">1</span>] - t[i]**<span class="hljs-number">2</span>)<br><br>m = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(T)-<span class="hljs-number">1</span>):<br>    mm = gmpy2.gcd(T[i],T[i+<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">if</span> isPrime(mm):<br>        m.append(<span class="hljs-built_in">int</span>(mm))<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>):<br>            <span class="hljs-keyword">if</span> isPrime(mm // i):<br>                mm = mm // i<br>                m.append(<span class="hljs-built_in">int</span>(mm))<br>                <span class="hljs-keyword">break</span><br>    <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> m:<br>    a = gmpy2.invert(t[<span class="hljs-number">0</span>],i) * t[<span class="hljs-number">1</span>] % i<br>    b = output[<span class="hljs-number">1</span>] - a*output[<span class="hljs-number">0</span>] % i<br>    a_ = gmpy2.invert(a,i)<br><br>    seed = a_ * (output[<span class="hljs-number">0</span>]-b) % i<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>**<span class="hljs-number">16</span>):<br>        seed = a_ * (seed - b) % i<br>        flag = long_to_bytes(seed)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;flag&#x27;</span> <span class="hljs-keyword">in</span> flag:<br>            <span class="hljs-built_in">print</span>(flag)<br><br></code></pre></td></tr></table></figure><h2 id="matrixrsa_revenge">MatrixRSA_Revenge</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># Sage</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> os<br><br>flag = <span class="hljs-string">b&quot;DRKCTF&#123;??????????????&#125;&quot;</span> + os.urandom(<span class="hljs-number">212</span>)<br><br>p = getPrime(<span class="hljs-number">120</span>)<br>q = getPrime(<span class="hljs-number">120</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;p = <span class="hljs-subst">&#123;p&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;q = <span class="hljs-subst">&#123;q&#125;</span>&quot;</span>)<br><br>part = [bytes_to_long(flag[<span class="hljs-number">16</span>*i:<span class="hljs-number">16</span>*(i+<span class="hljs-number">1</span>)]) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)]<br><br>M = Matrix(Zmod(n),[<br>    [part[<span class="hljs-number">4</span>*i+j] <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)<br>])<br><br>e = <span class="hljs-number">65537</span><br>C = M ** e<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;C = <span class="hljs-subst">&#123;<span class="hljs-built_in">list</span>(C)&#125;</span>&quot;</span>)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">p = 724011645798721468405549293573288113   </span><br><span class="hljs-string">q = 712853480230590736297703668944546433</span><br><span class="hljs-string">C = [(354904294318305224658454053059339790915904962123902870614765704810196137, 307912599668649689143528844269686459695648563337814923172488152872006235, 143644686443811064172873392982322248654471792394264352463341325181752577, 22995887787365556743279529792687264972121816670422146768160153217903088), (111349308911096779758451570594323566987628804920420784718347230085486245, 370237591900013263581099395076767089468466012835217658851568690263421449, 305451886364184428434479088589515273362629589399867618474106045683764897, 454103583344277343974714791669312753685583930212748198341578178464249150), (168497521640129742759262423369385500102664740971338844248603058993335309, 228941893018899960301839898935872289351667488000643221589230804176281482, 340080333594340128998141220817079770261711483018587969623825086357581002, 122922413789905368029659916865893297311475500951645918611759627764993518), (10332477229415731242316540110058798318207430965033579181240340751539101, 238172263316130590821973648893483382211906906298557131324791759298887701, 487586702165464601760230182019344052665496627253691596871783460314632260, 12238020921585443139790088280608644406695242899000592355653073240122626)]</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>加密过程就是在<spanclass="math inline">\(Z/nZ\)</span>上对明文矩阵做了幂运算。一个直观的思路是把C分别放在模p和模q下去考虑，因为我们知道一般线性群<spanclass="math inline">\(GL_4(F_p)\)</span>是有限群，所以在这个群上面<spanclass="math inline">\(M^{n}=M^{n\ mod\ od}\)</span>，<spanclass="math inline">\(od\)</span>为群阶。</p><p>order的计算方法可以参考<ahref="https://math.stackexchange.com/questions/34271/order-of-general-and-special-linear-groups-over-finite-fields">这里</a></p><p><spanclass="math inline">\(C=M^{e}\)</span>，所以我们只要恰当选取指数就可以让模p和模q下的C经过幂运算之后得到模p和模q的<spanclass="math inline">\(M\)</span>，接下来CRT组合回去就好。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># Sage</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>C = [[<span class="hljs-number">354904294318305224658454053059339790915904962123902870614765704810196137</span>, <span class="hljs-number">307912599668649689143528844269686459695648563337814923172488152872006235</span>, <span class="hljs-number">143644686443811064172873392982322248654471792394264352463341325181752577</span>, <span class="hljs-number">22995887787365556743279529792687264972121816670422146768160153217903088</span>], [<span class="hljs-number">111349308911096779758451570594323566987628804920420784718347230085486245</span>, <span class="hljs-number">370237591900013263581099395076767089468466012835217658851568690263421449</span>, <span class="hljs-number">305451886364184428434479088589515273362629589399867618474106045683764897</span>, <span class="hljs-number">454103583344277343974714791669312753685583930212748198341578178464249150</span>], [<span class="hljs-number">168497521640129742759262423369385500102664740971338844248603058993335309</span>, <span class="hljs-number">228941893018899960301839898935872289351667488000643221589230804176281482</span>, <span class="hljs-number">340080333594340128998141220817079770261711483018587969623825086357581002</span>, <span class="hljs-number">122922413789905368029659916865893297311475500951645918611759627764993518</span>], [<span class="hljs-number">10332477229415731242316540110058798318207430965033579181240340751539101</span>, <span class="hljs-number">238172263316130590821973648893483382211906906298557131324791759298887701</span>, <span class="hljs-number">487586702165464601760230182019344052665496627253691596871783460314632260</span>, <span class="hljs-number">12238020921585443139790088280608644406695242899000592355653073240122626</span>]]<br><br>p = <span class="hljs-number">724011645798721468405549293573288113</span><br>q = <span class="hljs-number">712853480230590736297703668944546433</span><br>e = <span class="hljs-number">65537</span><br>G1 = matrix(GF(p), <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, C)<br>G2 = matrix(GF(q), <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, C)<br><span class="hljs-comment"># 分别考虑mod p和mod q的finite field情况</span><br>od_p = product([p ^ <span class="hljs-number">4</span> - p ^ i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)])<br>od_q = product([q ^ <span class="hljs-number">4</span> - q ^ i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)])<br><span class="hljs-comment"># 有限群，适当选取指数使得运算结果为自身</span><br>inv_p = inverse(e, od_p)<br>inv_q = inverse(e, od_q)<br>dic1 = <span class="hljs-built_in">list</span>((G1^inv_p)[<span class="hljs-number">0</span>])<br>dic2 = <span class="hljs-built_in">list</span>((G2^inv_q)[<span class="hljs-number">0</span>])<br><br><span class="hljs-comment"># CRT组合回去</span><br>p = <span class="hljs-number">724011645798721468405549293573288113</span><br>q = <span class="hljs-number">712853480230590736297703668944546433</span><br><span class="hljs-keyword">for</span> mp, mq <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(dic1,dic2):<br>m = crt([ZZ(mp), ZZ(mq)], [p, q])<br>res = long_to_bytes(m)<br><span class="hljs-built_in">print</span>(res)<br><br><span class="hljs-comment"># b&#x27;DRKCTF&#123;a58986e7-&#x27;</span><br><span class="hljs-comment"># b&#x27;33e5-4f65-8c22-b&#x27;</span><br><span class="hljs-comment"># b&#x27;8a5e620752d&#125;V%\x17\xf1&#x27;</span><br><span class="hljs-comment"># b&#x27;K\xe0d\x0e\xde\xc2\xd1\xf1\xc0\xa4v\xe7\xcb\x13\x9c\x13&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="ezdes">EzDES</h2><p>加密用的DES弱密钥，直接解密。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> DES<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad, unpad<br><br>key = <span class="hljs-string">b&#x27;\x01\x01\x01\x01\x01\x01\x01\x01&#x27;</span><br>des = DES.new(key, DES.MODE_ECB)<br>enc = <span class="hljs-string">b&#x27;t\xe4f\x19\xc6\xef\xaaL\xc3R&#125;\x08;K\xc9\x88\xa6|\nF\xc3\x12h\xcd\xd3x\xc3(\x91\x08\x841\xca\x8b\xc1\x94\xb5\x9f[\xcd\xc6\x9f\xf9\xf6\xca\xf5\x1a\xda\x16\xcf\x89\x154\xa1\xfe\xc5\x16\xcf\x89\x154\xa1\xfe\xc5&#x27;</span><br><br>dec = des.decrypt(enc)<br><span class="hljs-built_in">print</span>(dec)<br><br><span class="hljs-comment"># DRKCTF&#123;We4k_K3y_1s_V3ry_D4nger0us_In_DES&#125;</span><br></code></pre></td></tr></table></figure><h2 id="midrsa">MidRSA</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> gmpy2<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_Key1</span>(<span class="hljs-params">ebits</span>):<br>    e = [getPrime(ebits) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)]<br>    <span class="hljs-keyword">return</span> e<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt1</span>(<span class="hljs-params">message,e</span>):<br>    n = gmpy2.next_prime(bytes_to_long(message) &lt;&lt; <span class="hljs-number">300</span>)<br>    m = getPrime(<span class="hljs-number">256</span>)<br>    c = [<span class="hljs-built_in">int</span>(<span class="hljs-built_in">pow</span>(m,e[i],n)) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(e))]<br>    <span class="hljs-keyword">return</span> c<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_Key2</span>(<span class="hljs-params">nbits</span>):<br>    p = getPrime(nbits // <span class="hljs-number">2</span>)<br>    q = getPrime(nbits // <span class="hljs-number">2</span>)<br>    n = p*q<br>    e = [random.getrandbits(nbits // <span class="hljs-number">4</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br>    <span class="hljs-keyword">return</span> n,e<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt2</span>(<span class="hljs-params">message,e,n</span>):<br>    m = bytes_to_long(message)<br>    c = [<span class="hljs-built_in">int</span>(<span class="hljs-built_in">pow</span>(m,e[i],n)) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(e))]<br>    <span class="hljs-keyword">return</span> c<br>    <br><span class="hljs-keyword">assert</span> flag.startswith(<span class="hljs-string">b&quot;DRKCTF&#123;&quot;</span>)<br><br>flag1 = flag[:<span class="hljs-built_in">len</span>(flag)//<span class="hljs-number">2</span>]<br>flag2 = flag[<span class="hljs-built_in">len</span>(flag)//<span class="hljs-number">2</span>:]<br><br>ebits = <span class="hljs-number">7</span><br>e1 = generate_Key1(ebits)<br>cipher1 = encrypt1(flag1,e1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;e1 =&quot;</span>,e1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;cipher1 =&quot;</span>,cipher1)<br><br>nbits = <span class="hljs-number">1024</span><br>n,e2 = generate_Key2(nbits)<br>cipher2 = encrypt2(flag2,e2,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;e2 =&quot;</span>,e2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;cipher2 =&quot;</span>,cipher2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n =&quot;</span>,n)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">e1 = [109, 71, 109, 73]</span><br><span class="hljs-string">cipher1 = [36272047346364825234770733058042613197790911431212158822254782055957208837848605160852567043492625692783344073921185227328379941291979083011033, 13421582077901767047291741873622169312010984740586925881415103229648835151589774736786336965745532072099996467445790339749720696886313635920080, 36272047346364825234770733058042613197790911431212158822254782055957208837848605160852567043492625692783344073921185227328379941291979083011033, 41425183140413487232780768389488969603566343428250573532166425276868000949579663990819005141199597640625439816343697426958648927294289659127871]</span><br><span class="hljs-string">e2 = [79572758141493570128961125255246129069540961757778793209698370333142346488381, 80555585862127636800866563977080055603517001358195529410497461746213789997225, 44651921320695090688745333790065512192118202496468714141526113242887125432380]</span><br><span class="hljs-string">cipher2 = [58600444300331800249882073146233995912287198739549440714207984476331259754331716531491187240053630185776787152600165426285021284302994699108557023545574315706006132536588848833818758624067461985444940651823107522770906474037882323326792755635934081822967331031854184791299228513024491344725765476710816941057, 16511944800191885973496391252612222059697387587833308714567450121364756390806094606646424594583975159634952911600665271092389815248477961923357683297311169260578508157717777465241680062644118354471550223231057620392252324514411927096940875466794869671163453991620492008856178108060167556176019729800517994337, 80885008609388989196377721090246742575908473911131498982960117640742106565184297197238656375198284856442596226398287448931285735903463892735111244609358611618958293002176923706195402338331128766464276441210238388187625107435781170368017908610916585774514676482124401329575553658828115269495158818527164441546]</span><br><span class="hljs-string">n = 93468142044831350317940409833603031534515663349871776634867176846669780024082517910566484997161088199091160371537367121403194814422867749777235397168852158723228851090445429617275680206703935781244466363279841409768649097588586494453125840436600639420286950914680651600232197982546122764845043227394567787283</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>encrypt1一眼LLL+GCD求解，思路参考<ahref="https://github.com/maple3142/My-CTF-Challenges/tree/master/ImaginaryCTF/Round%2026/no_modulus">maple佬的这道题目</a>，encrypt2直接共模攻击。</p><p>注意打的时候去掉encrypt1里重复的一组e和c。</p><p>(其实encrypt1就是抄的maple的这道题吧...)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># Sage</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br><span class="hljs-built_in">exec</span>(<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;output.txt&quot;</span>).read())<br><br>L = matrix(es).T.augment(matrix.identity(<span class="hljs-built_in">len</span>(es)))<br>L[:, <span class="hljs-number">0</span>] *= <span class="hljs-number">2</span> ^ <span class="hljs-number">2048</span><br>L = L.LLL()<br><span class="hljs-built_in">print</span>(L[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>:])<br><span class="hljs-built_in">print</span>(L[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>:])<br>xx = product([ZZ(y) ^ x <span class="hljs-keyword">for</span> x, y <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(L[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>:], cs)])<br>yy = product([ZZ(y) ^ x <span class="hljs-keyword">for</span> x, y <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(L[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>:], cs)])<br>n = gcd(xx.numer() - xx.denom(), yy.numer() - yy.denom())<br><span class="hljs-built_in">print</span>(n)<br><span class="hljs-built_in">print</span>(long_to_bytes(n&gt;&gt;<span class="hljs-number">300</span>))<br><br><span class="hljs-comment"># Python</span><br><span class="hljs-keyword">import</span> gmpy2 <span class="hljs-keyword">as</span> gp<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">egcd</span>(<span class="hljs-params">a, b</span>):<br><span class="hljs-keyword">if</span> a == <span class="hljs-number">0</span>:<br><span class="hljs-keyword">return</span> (b, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br><span class="hljs-keyword">else</span>:<br>g, y, x = egcd(b % a, a)<br><span class="hljs-keyword">return</span> (g, x - (b // a) * y, y)<br><br>n = <span class="hljs-number">93468142044831350317940409833603031534515663349871776634867176846669780024082517910566484997161088199091160371537367121403194814422867749777235397168852158723228851090445429617275680206703935781244466363279841409768649097588586494453125840436600639420286950914680651600232197982546122764845043227394567787283</span><br>c1 = <span class="hljs-number">58600444300331800249882073146233995912287198739549440714207984476331259754331716531491187240053630185776787152600165426285021284302994699108557023545574315706006132536588848833818758624067461985444940651823107522770906474037882323326792755635934081822967331031854184791299228513024491344725765476710816941057</span><br>c2 = <span class="hljs-number">16511944800191885973496391252612222059697387587833308714567450121364756390806094606646424594583975159634952911600665271092389815248477961923357683297311169260578508157717777465241680062644118354471550223231057620392252324514411927096940875466794869671163453991620492008856178108060167556176019729800517994337</span><br>e1 = <span class="hljs-number">79572758141493570128961125255246129069540961757778793209698370333142346488381</span><br>e2 = <span class="hljs-number">80555585862127636800866563977080055603517001358195529410497461746213789997225</span><br>s = egcd(e1, e2)<br>s1 = s[<span class="hljs-number">1</span>]<br>s2 = s[<span class="hljs-number">2</span>]<br><span class="hljs-keyword">if</span> s1&lt;<span class="hljs-number">0</span>:<br>s1 = - s1<br>c1 = gp.invert(c1, n)<br><span class="hljs-keyword">elif</span> s2&lt;<span class="hljs-number">0</span>:<br>s2 = - s2<br>c2 = gp.invert(c2, n)<br><br>m = <span class="hljs-built_in">pow</span>(c1,s1,n)*<span class="hljs-built_in">pow</span>(c2,s2,n) % n<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(m)[<span class="hljs-number">2</span>:])<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-built_in">hex</span>(m)[<span class="hljs-number">2</span>:]))<br><br><br><span class="hljs-comment"># DRKCTF&#123;5d0b96e8-e069-4378-82e7-120e4b761a0b&#125;</span><br></code></pre></td></tr></table></figure><h2 id="myencrypto">MyEncrypto</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag      <br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getMyPrime</span>():              <br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:              <br>        r = random.getrandbits(<span class="hljs-number">64</span>)              <br>        _p = r**<span class="hljs-number">6</span> -<span class="hljs-number">3</span>*r**<span class="hljs-number">5</span> - r**<span class="hljs-number">4</span> + r**<span class="hljs-number">2</span> - r - <span class="hljs-number">6</span><br>        _q = r**<span class="hljs-number">7</span> + <span class="hljs-number">2</span>*r**<span class="hljs-number">6</span> + r**<span class="hljs-number">5</span> + <span class="hljs-number">4</span>*r**<span class="hljs-number">4</span> + <span class="hljs-number">7</span>*r**<span class="hljs-number">2</span> + r + <span class="hljs-number">4653</span><br>        <span class="hljs-keyword">if</span> isPrime(_p) <span class="hljs-keyword">and</span> isPrime(_q):              <br>            <span class="hljs-keyword">return</span> _p, _q<br>                      <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">enc</span>(<span class="hljs-params">m, n</span>):                        <br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">pow</span>(m, <span class="hljs-number">65537</span>, n)              <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">LCG</span>(<span class="hljs-params">s,a,b,n</span>):<br>    <span class="hljs-keyword">return</span> (a*s + b) % n<br><br><br>seed = bytes_to_long(flag)<br>P = getPrime(<span class="hljs-number">512</span>)<br>a = random.randrange(<span class="hljs-number">0</span>,P)<br>b = random.randrange(<span class="hljs-number">0</span>,P)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Roll</span>():<br>    <span class="hljs-keyword">global</span> seed<br>    seed = LCG(seed,a,b,P)<br>    <span class="hljs-keyword">return</span> seed % <span class="hljs-number">2</span>**<span class="hljs-number">16</span><br><br>p, q = getMyPrime()<br>n = p * q              <br>enc_P = enc(P, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;n = <span class="hljs-subst">&#123;n&#125;</span>&quot;</span>)              <br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;enc_P = <span class="hljs-subst">&#123;enc_P&#125;</span>&quot;</span>)<br><br>out = []<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">40</span>):<br>    out.append(Roll())<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;a = <span class="hljs-subst">&#123;a&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;b = <span class="hljs-subst">&#123;b&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;out = <span class="hljs-subst">&#123;out&#125;</span>&quot;</span>)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">r = 1248775963213848425</span><br><span class="hljs-string">P = 10679387699123200522776360035184725927822172255453595568464894884736102462568579313264894449779104030120028056158023524486966766295648236135714849745610937</span><br><span class="hljs-string">n = 17959692613208124553115435318871530105762927141420294800783695207170608966804977782615874404539156257549097962410144332053383210075663138848832474791712256427111304125146378883542387121684653496644116081809328796925343393644118376497507</span><br><span class="hljs-string">enc_P = 17215745298239635988196009014709535403293865406390546681749129213899045156482782458937447412919331336842808052179915132663427715069134196783415529688715962754860563850858056507148936427379551986735103284388996678146580229028006898491552</span><br><span class="hljs-string">a = 2759277675743644814124420138047586760905070650864591936190199977578763421196999718749092450720072564786874114432179104175692800471519816376692104515142375</span><br><span class="hljs-string">b = 8111240578821759579875175166986910195923820191652867334412871591814076020421468033017946066268237980082938735686222173713853299600396887041341974719819186</span><br><span class="hljs-string">out = [39566, 15295, 19818, 55685, 49100, 6517, 2675, 9567, 37243, 40312, 42906, 35874, 44178, 1256, 40298, 29149, 35721, 19886, 63020, 50116, 6844, 39897, 16134, 50218, 44609, 46188, 52712, 49903, 20933, 5441, 19411, 8330, 6904, 39350, 60853, 43446, 35910, 43728, 61533, 13757]</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>核心idea抄了osu!gaming CTF 2024的<ahref="https://tiefsee5037008.github.io/posts/Osu!gaming-CTF-Writeup/#lucky-roll-gaming">lucky-roll-gaming</a>，拿现成的exp直接打就行。</p><p>多项式求根就能分解n然后拿到P。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># Sage</span><br><br><span class="hljs-comment"># R = PolynomialRing(QQ, &#x27;r&#x27;)</span><br><span class="hljs-comment"># f = r^13 - r^12 - 6*r^11 - r^10 - 12*r^9 + 4*r^8 - 27*r^7 + 4634*r^6 - 13970*r^5 - 4670*r^4 - 6*r^3 + 4610*r^2 - 4659*r - 27918 - 17959692613208124553115435318871530105762927141420294800783695207170608966804977782615874404539156257549097962410144332053383210075663138848832474791712256427111304125146378883542387121684653496644116081809328796925343393644118376497507</span><br><span class="hljs-comment"># print(f.roots())</span><br><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>p = <span class="hljs-number">10679387699123200522776360035184725927822172255453595568464894884736102462568579313264894449779104030120028056158023524486966766295648236135714849745610937</span><br>a = <span class="hljs-number">2759277675743644814124420138047586760905070650864591936190199977578763421196999718749092450720072564786874114432179104175692800471519816376692104515142375</span><br>b = <span class="hljs-number">8111240578821759579875175166986910195923820191652867334412871591814076020421468033017946066268237980082938735686222173713853299600396887041341974719819186</span><br>out = [<span class="hljs-number">39566</span>, <span class="hljs-number">15295</span>, <span class="hljs-number">19818</span>, <span class="hljs-number">55685</span>, <span class="hljs-number">49100</span>, <span class="hljs-number">6517</span>, <span class="hljs-number">2675</span>, <span class="hljs-number">9567</span>, <span class="hljs-number">37243</span>, <span class="hljs-number">40312</span>, <span class="hljs-number">42906</span>, <span class="hljs-number">35874</span>, <span class="hljs-number">44178</span>, <span class="hljs-number">1256</span>, <span class="hljs-number">40298</span>, <span class="hljs-number">29149</span>, <span class="hljs-number">35721</span>, <span class="hljs-number">19886</span>, <span class="hljs-number">63020</span>, <span class="hljs-number">50116</span>, <span class="hljs-number">6844</span>, <span class="hljs-number">39897</span>, <span class="hljs-number">16134</span>, <span class="hljs-number">50218</span>, <span class="hljs-number">44609</span>, <span class="hljs-number">46188</span>, <span class="hljs-number">52712</span>, <span class="hljs-number">49903</span>, <span class="hljs-number">20933</span>, <span class="hljs-number">5441</span>, <span class="hljs-number">19411</span>, <span class="hljs-number">8330</span>, <span class="hljs-number">6904</span>, <span class="hljs-number">39350</span>, <span class="hljs-number">60853</span>, <span class="hljs-number">43446</span>, <span class="hljs-number">35910</span>, <span class="hljs-number">43728</span>, <span class="hljs-number">61533</span>, <span class="hljs-number">13757</span>]<br><br>l = out<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">lcg</span>(<span class="hljs-params">s, a, b, p</span>):<br>    <span class="hljs-keyword">return</span> (a * s + b) % p<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_roll</span>():<br>    <span class="hljs-keyword">global</span> seed<br>    seed = lcg(seed, a, b, p)<br>    <span class="hljs-keyword">return</span> seed % (<span class="hljs-number">2</span>**<span class="hljs-number">16</span>)<br>n = <span class="hljs-built_in">len</span>(out)<br>A = [[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)] <br>inv100 = <span class="hljs-built_in">pow</span>((<span class="hljs-number">2</span>**<span class="hljs-number">16</span>),-<span class="hljs-number">1</span>,p)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n-<span class="hljs-number">1</span>):<br>    A[i][i] = p<br>    A[n-<span class="hljs-number">1</span>][i] = a**(i+<span class="hljs-number">1</span>)%p<br>    A[n][i] = (a*l[<span class="hljs-number">0</span>]+b-l[<span class="hljs-number">1</span>])*inv100%p <span class="hljs-keyword">if</span> i==<span class="hljs-number">0</span> <span class="hljs-keyword">else</span> (a*A[n][i-<span class="hljs-number">1</span>] + (a*l[i]+b-l[i+<span class="hljs-number">1</span>])*inv100)%p<br>A[n-<span class="hljs-number">1</span>][n-<span class="hljs-number">1</span>] = <span class="hljs-number">1</span><br>A[n][n] = p//(<span class="hljs-number">2</span>**<span class="hljs-number">15</span>)<br>A = Matrix(A)<br>B = A.LLL()<br>h0 = B[<span class="hljs-number">0</span>][-<span class="hljs-number">2</span>]<br>s0 = h0*(<span class="hljs-number">2</span>**<span class="hljs-number">16</span>)+l[<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(s0)<br><span class="hljs-comment"># s0-b = 1483033737693873089096042460610839746772642846474405267737556964198658333296466607424613619372059057716295177556213725041644228019066398600830469791395036</span><br>message = ((s0-b)*inverse(a,p))%p<br><span class="hljs-built_in">print</span>(long_to_bytes(message))<br><br><span class="hljs-comment"># b&#x27;DRKCTF&#123;a57b63a6-ecf5-46d3-a501-2d359a4fd168&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>花絮：赛场上自己吭哧吭哧造了个格，结果p只要大一点就不能正常工作，一度以为这一题卡界了...最后拿别人的exp一遍过，还好没有错过一血😇</p><h1 id="misc">Misc</h1><h2 id="func_pixels">func_pixels</h2><figure><img src="../assets/LEIMU_encoded.png" alt="唉唉，二次元" /><figcaption aria-hidden="true">唉唉，二次元</figcaption></figure><p>拿到图片发现左上有一些异常像素，结合题目的func考虑flag像素的分布应该类似函数图像，脚本提取<spanclass="math inline">\(y=x^2\)</span>和<spanclass="math inline">\(y=x^3\)</span>的像素值，两个融合起来就是flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br>image_path = <span class="hljs-string">&#x27;LEIMU_encoded.png&#x27;</span><br>image = Image.<span class="hljs-built_in">open</span>(image_path)<br><br>str1 = <span class="hljs-string">&quot;&quot;</span><br>str2 = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    pixel_value = image.getpixel((i, i**<span class="hljs-number">2</span>))<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">chr</span>(pixel_value[j]).isascii()):<br>            str1 += <span class="hljs-built_in">chr</span>(pixel_value[j])<br>        <span class="hljs-keyword">else</span>:<br>            str1 += <span class="hljs-string">&quot; &quot;</span><br><span class="hljs-built_in">print</span>(str1)<br><span class="hljs-comment"># for i in range(10):</span><br><span class="hljs-comment">#     pixel_value = image.getpixel((i, i))</span><br><span class="hljs-comment">#     print(f&#x27;Linear: &#123;chr(pixel_value[0]), chr(pixel_value[1]), chr(pixel_value[2])&#125;&#x27;)</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    pixel_value = image.getpixel((i, i**<span class="hljs-number">3</span>))<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">chr</span>(pixel_value[j]).isascii()):<br>            str2 += <span class="hljs-built_in">chr</span>(pixel_value[j])<br>        <span class="hljs-keyword">else</span>:<br>            str2 += <span class="hljs-string">&quot; &quot;</span><br><span class="hljs-built_in">print</span>(str2)<br><br><span class="hljs-comment"># DRKCTF&#123;H HA AH _L iM Is oC te </span><br><span class="hljs-comment"># DRKCTF&#123; AH HA A_ ei uI So ut &#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Writeups</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CISCN 2024 Qual Writeup</title>
    <link href="/CISCN-2024-Qual-Writeup.html"/>
    <url>/CISCN-2024-Qual-Writeup.html</url>
    
    <content type="html"><![CDATA[<p>解了点Crypto和Misc题目，记录下自己的题解。题目的附件在探姬佬的<ahref="https://github.com/CTF-Archives/CISCN2024">repo</a>里可以找到，就不再额外说明题目了。</p><h1 id="misc">Misc</h1><h2 id="通风机">通风机</h2><p>TriID识别出是SybaseiAnywhere的database，不过似乎并不对。Google了一下基本都指向Siemens的S7-200Program，随便找了个<ahref="https://plc4me.com/download-step-7_v4-s7-200-siemens-plc-software-real-100/">下载站</a>下载安装。这里建议装在虚拟机，毕竟我对于这类下载站都不很信任，并且这个上古软件本身就很脏...</p><p>安装之后也并不能直接打开这个mwp文件，找一份mwp文件对比一下+各方搜索，确认是文件头缺少了3字节。添加上<code>47 4A 4B</code>之后正常打开，在SymbolTable里有</p><figure><img src="../assets/7f920daec9affbe2765bb844dc0d0875.png"alt="通风机" /><figcaption aria-hidden="true">通风机</figcaption></figure><p>base64 decode即可。</p><p><code>flag&#123;2467ce26-fff9-4008-8d55-17df83ecbfc2&#125;</code></p><p>Update: 复现发现直接binwalk-e分离文件后strings就能拿到那串base64。这个套路我本来还挺熟悉的，结果赛场上还是太路径依赖了...</p><h2 id="盗版软件">盗版软件</h2><p>很神奇的题目，解压得到一个dmp和一个exe。最初直接010editor人肉盯帧dmp文件找到了个<code>www.waodown.com</code>，交flag碰壁数十次之后觉得应该不是这个域名...后来和队友头脑风暴了半个小时，想起来头天晚上复盘前些年的CISCN时用到的gimp，抱着试试看的心态将dmp作为rawdata打开图像，手工fuzz了位移和宽高(unintendedsolution可能？抽象做法)后整出来了：</p><figure><img src="../assets/截屏2024-05-19%2017.30.15.png" alt="gimp-yyds" /><figcaption aria-hidden="true">gimp-yyds</figcaption></figure><p>IP地址还得从exe入手，扔沙箱里看到exe运行后生成了loader.exe和一个png。对malware有经验的应该马上就能反应过来png里大概有shellcode，而loader就是加载Shellcode连接C2执行后续恶意行为的。png丢到Stegsolve里盯出来了LSB隐写：</p><figure><img src="../assets/image-1.png" alt="&quot;稀疏嵌入&quot;" /><figcaption aria-hidden="true">"稀疏嵌入"</figcaption></figure><p>典型的<code>50 4B 03 04</code>，zip头。让GPT搓个脚本提取出zip：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">extract_bytes</span>(<span class="hljs-params">input_file, output_file</span>):<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(input_file, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f_in, <span class="hljs-built_in">open</span>(output_file, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f_out:<br>            byte_index = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>                byte = f_in.read(<span class="hljs-number">1</span>)  <span class="hljs-comment"># 读取一个字节</span><br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> byte:  <span class="hljs-comment"># 判断是否已经读到文件末尾</span><br>                    <span class="hljs-keyword">break</span><br>                <span class="hljs-keyword">if</span> byte_index % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:  <span class="hljs-comment"># 每隔一个字节提取一个字节</span><br>                    f_out.write(byte)  <span class="hljs-comment"># 写入提取的字节</span><br>                byte_index += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;An error occurred: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># 指定输入文件和输出文件的路径</span><br>input_file = <span class="hljs-string">&quot;1.bin&quot;</span><br>output_file = <span class="hljs-string">&quot;output.zip&quot;</span><br><br><span class="hljs-comment"># 调用提取字节的函数</span><br>extract_bytes(input_file, output_file)<br></code></pre></td></tr></table></figure><p>提取之后删除多余的一坨文件尾，解压得到.b。.b看起来很像base85，猜测解码之后就是Shellcode——你说的对，但是题目给的loader.exe压根就不是exe而是一坨0xff(或许我的附件有问题？)，我一度以为还需要手搓Shellcodeloader😅</p><p>解码后的文件丢VT上一堆报毒(貌似是MetaSploit家族的？)，但是YARA规则没识别出IP。丢<ahref="https://s.threatbook.com/report/file/a97946c34d2d8642820f196a54a6e8d78cf4f58a97e417be9696d7fd19e7fc95">微步</a>发现已经有结果了，应该是做出来的前人传的吧：</p><figure><img src="../assets/image-2.png" alt="前人的智慧" /><figcaption aria-hidden="true">前人的智慧</figcaption></figure><p>MD5之后，提交，get。</p><p>可惜此时已经黑灯了，导致后来队友出的另外两道题只能挑一道提交，不过好在另两道最后都是50分，倒也没有亏什么分数😇</p><p>flag{096e8b0f9daf10869f013c1b7efda3fd}</p><h2 id="神秘文件">神秘文件</h2><p>和队友合力解的，硬控3h是真的坐牢🤪</p><p>细节不想写了，大概说一下卡住的几个点吧。</p><ol type="1"><li><p>宏里面的RC4没有密钥，且密码学工具箱不能正常解密(也可能我操作不当，欢迎交流)。(找了一下午密钥你告诉我密钥为空？)</p></li><li><p>属性里的<code>ha?again?</code>是没用的</p></li><li><p>第四张PPT里检查阅读顺序可以拿到Part7</p></li><li><p>幻灯片母版里有Part8。其实这里直接解压PPT会发现一个看似没有用到的文本框，作为线索可以找到这个点。</p></li></ol><h1 id="crypto">Crypto</h1><h2 id="古典密码">古典密码</h2><p>感谢cyberchef，在我走投无路的时候信手筛选了下Cipher，把第一个AtbashCipher拖进去直接就魔法棒了🪄</p><figure><img src="../assets/image-3.png" alt="大厨我好喜欢你啊" /><figcaption aria-hidden="true">大厨我好喜欢你啊</figcaption></figure><h2 id="ovo">OvO</h2><p>挺不错的数学题，听人说跟XY的某个Copper是同一篇Paper？不过我是没看出来，欢迎各位指教。</p><p>一个有用的观察是<span class="math inline">\(e//n =rr\)</span>，这样就消去了一个变量。我们拿到的e经过了截位，并且高位信息明显跟p，q有关，所以需要想办法抠出点p或者q的高位信息。</p><p>在纸上推算一会儿可以发现，<span class="math inline">\(65537 + kk * p+ rr * ((p+1) * (q+1)) +1\)</span>这个式子乘上p是可以再消去一个变量的，接下来就可以尝试多项式求根了。</p><p>如果e没有截位，那么我们拿到<span class="math inline">\(f = (65537*x +kk*x^2 + (kk+2)*n*x + (kk+2)*x^2 + (kk+2)*n + (kk+3)*x) -e*x\)</span>之后直接f.roots()就可以得到p。但是e经过了截位，所以得到的x其实比p要大/小一点，不过这已经可以让我们拿到p的高位了——拿到高位就够了。后面就是简单的p高位泄露。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Sage</span><br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>n = <span class="hljs-number">111922722351752356094117957341697336848130397712588425954225300832977768690114834703654895285440684751636198779555891692340301590396539921700125219784729325979197290342352480495970455903120265334661588516182848933843212275742914269686197484648288073599387074325226321407600351615258973610780463417788580083967</span><br>e = <span class="hljs-number">37059679294843322451875129178470872595128216054082068877693632035071251762179299783152435312052608685562859680569924924133175684413544051218945466380415013172416093939670064185752780945383069447693745538721548393982857225386614608359109463927663728739248286686902750649766277564516226052064304547032760477638585302695605907950461140971727150383104</span><br>c = <span class="hljs-number">14999622534973796113769052025256345914577762432817016713135991450161695032250733213228587506601968633155119211807176051329626895125610484405486794783282214597165875393081405999090879096563311452831794796859427268724737377560053552626220191435015101496941337770496898383092414492348672126813183368337602023823</span><br><span class="hljs-comment"># rr = e//n, rr == 331118458487559161870846961263454730639,以下的rr事实上是kk（</span><br>rr = <span class="hljs-number">331118458487559161870846961263454730637</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Copper</span>(<span class="hljs-params">n, c, e, rr</span>):<br>R.&lt;x&gt; = PolynomialRing(RealField(<span class="hljs-number">1024</span>))<br>f = (<span class="hljs-number">65537</span>*x + rr*x^<span class="hljs-number">2</span> + (rr+<span class="hljs-number">2</span>)*n*x + (rr+<span class="hljs-number">2</span>)*x^<span class="hljs-number">2</span> + (rr+<span class="hljs-number">2</span>)*n + (rr+<span class="hljs-number">3</span>)*x) - e*x<br>f = f.monic()<br>res = f.roots()<br><span class="hljs-keyword">if</span>(res):<br><span class="hljs-keyword">return</span> res<br><br>res = Copper(n, c, e, rr)<br><span class="hljs-keyword">for</span> root <span class="hljs-keyword">in</span> res:<br>    p_hi = <span class="hljs-built_in">int</span> (root[<span class="hljs-number">0</span>])<br>    PR.&lt;x&gt; = PolynomialRing(Zmod(n))<br>    ff = x + p_hi<br>    roots_1 = ff.monic().small_roots(X=<span class="hljs-number">2</span>^<span class="hljs-number">200</span>, beta=<span class="hljs-number">0.3</span>)<br>    <span class="hljs-keyword">if</span> roots_1:<br>        p = <span class="hljs-built_in">int</span>(roots_1[<span class="hljs-number">0</span>]) + p_hi<br>        q = n//p<br>        e = <span class="hljs-number">65537</span> + rr * p + (rr+<span class="hljs-number">2</span>) * (p+<span class="hljs-number">1</span>) * (q+<span class="hljs-number">1</span>) + <span class="hljs-number">1</span><br>        d = inverse(e, (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br>        m = <span class="hljs-built_in">pow</span>(c, d, n)<br>        <span class="hljs-built_in">print</span>(long_to_bytes(m))<br></code></pre></td></tr></table></figure><p>嗯，exp里的Copper函数其实不是CopperSmith，之所以叫这个是因为是从CopperSmith的板子改过来的，我懒得改名字了（轻喷qwq</p><h2 id="hash">*hash</h2><p>Python 2.7内置的hash是魔改了一点的fnvhash，问问GPT就可以得到实现细节。爆破的时候使用中间相遇的手法，可以大幅降低时间复杂度。</p><p>因为赛场上没去翻源码又理解错了GPT的回复，以为输出前异或的是bitlength，所以最后与flag失之交臂😭😭其实Python 2.7的hash最后是与bytelength做异或后输出。 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> inverse<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> trange<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    start_time = time.time()<br>    mask = (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">64</span>) - <span class="hljs-number">1</span><br>    lookup_table = &#123;&#125;<br><br>    <span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> trange(<span class="hljs-number">256</span>, desc=<span class="hljs-string">&quot;Building table&quot;</span>):<br>        x = <span class="hljs-number">0</span><br>        x = (x ^ (a &lt;&lt; <span class="hljs-number">7</span>)) &amp; mask<br>        x = ((x * <span class="hljs-number">1000003</span>) ^ a) &amp; mask<br>        <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>            x2 = ((x * <span class="hljs-number">1000003</span>) ^ b) &amp; mask<br>            <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>                x3 = ((x2 * <span class="hljs-number">1000003</span>) ^ c) &amp; mask<br>                lookup_table[x3] = <span class="hljs-built_in">bytes</span>([a, b, c])<br><br>    ni = inverse(<span class="hljs-number">1000003</span>, <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">64</span>)<br>    target_value = <span class="hljs-number">7457312583301101235</span><br><br>    <span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> trange(<span class="hljs-number">256</span>, desc=<span class="hljs-string">&quot;Searching&quot;</span>):<br>        <span class="hljs-comment"># 这里异或的是字节长度</span><br>        r1 = (target_value ^ <span class="hljs-number">7</span>) &amp; mask<br>        r1 = ((r1 ^ a) * ni) &amp; mask<br>        <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>            r2 = ((r1 ^ b) * ni) &amp; mask<br>            <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>                r3 = ((r2 ^ c) * ni) &amp; mask<br>                <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>                    r4 = ((r3 ^ d) * ni) &amp; mask<br>                    <span class="hljs-keyword">if</span> r4 <span class="hljs-keyword">in</span> lookup_table:<br>                        <span class="hljs-built_in">print</span>(lookup_table[r4] + <span class="hljs-built_in">bytes</span>([d, c, b, a]))<br>                        end_time = time.time()<br>                        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Time elapsed: <span class="hljs-subst">&#123;(end_time - start_time) / <span class="hljs-number">60</span>&#125;</span> minutes&quot;</span>)<br>                        <span class="hljs-keyword">return</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure></p><figure><img src="../assets/yyds.png" alt="6分钟就可以了" /><figcaption aria-hidden="true">6分钟就可以了</figcaption></figure><p>翻了一下CTFwiki，发现直接拿格子去打也是可以的，实验了一下速度确实快上不少。只能说学海无涯了。</p><h1 id="reverse">Reverse</h1><h2 id="asm_re">asm_re</h2><p>三脚猫水平的我也只能做做Re签到了（</p><p>汇编很长，不想看的话直接丢给GPT，GPT大概率会告诉你这玩意儿的主体逻辑的位置。稍微审计一下发现就是个仿射+异或，直接逆回去就行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">expected_data = [<span class="hljs-number">0x1fd7</span>,<span class="hljs-number">0x21b7</span>,<span class="hljs-number">0x1e47</span>,<span class="hljs-number">0x2027</span>,<span class="hljs-number">0x26e7</span>,<span class="hljs-number">0x10d7</span>,<span class="hljs-number">0x1127</span>,<span class="hljs-number">0x2007</span>,<span class="hljs-number">0x11c7</span>,<span class="hljs-number">0x1e47</span>,<span class="hljs-number">0x1017</span>,<span class="hljs-number">0x1017</span>,<span class="hljs-number">0x11f7</span>,<span class="hljs-number">0x2007</span>,<span class="hljs-number">0x1037</span>,<span class="hljs-number">0x1107</span>,<span class="hljs-number">0x1f17</span>,<span class="hljs-number">0x10d7</span>,<span class="hljs-number">0x1017</span>,<span class="hljs-number">0x1017</span>,<span class="hljs-number">0x1f67</span>,<span class="hljs-number">0x1017</span>,<span class="hljs-number">0x11c7</span>,<span class="hljs-number">0x11c7</span>,<span class="hljs-number">0x1017</span>,<span class="hljs-number">0x1fd7</span>,<span class="hljs-number">0x1f17</span>,<span class="hljs-number">0x1107</span>,<span class="hljs-number">0x0f47</span>,<span class="hljs-number">0x1127</span>,<span class="hljs-number">0x1037</span>,<span class="hljs-number">0x1e47</span>,<span class="hljs-number">0x1037</span>,<span class="hljs-number">0x1fd7</span>,<span class="hljs-number">0x1107</span>,<span class="hljs-number">0x1fd7</span>,<span class="hljs-number">0x1107</span>,<span class="hljs-number">0x2787</span>]<br><br><span class="hljs-comment"># 将预期数据转换为字符串</span><br>flag_chars = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(expected_data)):<br>    byte_value = expected_data[i]<br>    char = <span class="hljs-built_in">chr</span>((((byte_value - <span class="hljs-number">0x1E</span>)^ <span class="hljs-number">0x4D</span>) - <span class="hljs-number">0x14</span> ) // <span class="hljs-number">0x50</span>)<br>    flag_chars.append(char)<br><br><span class="hljs-comment"># 恢复的 flag</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span>.join(flag_chars)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Recovered flag: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>注意提取目标的数组的时候调一下分组大小和端序就行。</p>]]></content>
    
    
    <categories>
      
      <category>Writeups</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Crypto</tag>
      
      <tag>Misc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>imaginaryCTF-round45</title>
    <link href="/imaginaryCTF-round45.html"/>
    <url>/imaginaryCTF-round45.html</url>
    
    <content type="html"><![CDATA[<h1 id="imaginaryctf-round45-crypto-writeup">imaginaryCTF Round45 CryptoWriteup</h1><p>以Ciprocamin的名义solo的比赛,预计以后每个月都会写一次Crypto方向的wp,姑且鞭策下自己.</p><span id="more"></span><h2 id="time">time</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/local/bin/python</span><br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">message, key</span>):<br>    cipher = AES.new(key, AES.MODE_ECB)<br>    ciphertext = cipher.encrypt(pad(message, AES.block_size))<br>    <span class="hljs-keyword">return</span> ciphertext<br><br>flag = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag.txt&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>).read().strip()<br>random.seed(<span class="hljs-built_in">int</span>(time.time()))<br>key = random.randbytes(<span class="hljs-number">16</span>)<br><br>encrypted_flag = encrypt(flag, key)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Encrypted flag (in hex):&quot;</span>, encrypted_flag.<span class="hljs-built_in">hex</span>())<br></code></pre></td></tr></table></figure><p>nc连上之后会根据服务器端的时间设置seed,简单爆破一下就可以获得AESkey.</p><h2 id="time2">time2</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/local/bin/python</span><br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">message, key</span>):<br>    cipher = AES.new(key, AES.MODE_ECB)<br>    ciphertext = cipher.encrypt(pad(message, AES.block_size))<br>    <span class="hljs-keyword">return</span> ciphertext<br><br>flag = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag.txt&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>).read().strip()<br>random.seed(<span class="hljs-built_in">int</span>(os.urandom(<span class="hljs-number">64</span>).<span class="hljs-built_in">hex</span>(),<span class="hljs-number">16</span>)) <span class="hljs-comment"># super secure!</span><br>key = <span class="hljs-string">b&#x27;&#x27;</span><br>x=random.randbytes(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>key += x<br>random.seed(<span class="hljs-built_in">int</span>(x.<span class="hljs-built_in">hex</span>(),<span class="hljs-number">16</span>))<br>x = random.randbytes(<span class="hljs-number">1</span>)<br>encrypted_flag = encrypt(flag, key)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Encrypted flag (in hex):&quot;</span>, encrypted_flag.<span class="hljs-built_in">hex</span>())<br><br><span class="hljs-comment"># Encrypted flag (in hex): 04b5b9e11ee236a1c0784882d3f8efe9cc28b2993971a83413907e9833190e2a99e611c748966d61489f84ea2f331c7c</span><br></code></pre></td></tr></table></figure><p>爆破key的首字节即可. <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad, unpad<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">ciphertext, key</span>):<br>    cipher = AES.new(key, AES.MODE_ECB)<br>    plaintext = unpad(cipher.decrypt(ciphertext), AES.block_size)<br>    <span class="hljs-keyword">return</span> plaintext<br><br><br>ciphertext = long_to_bytes(<span class="hljs-number">0x04b5b9e11ee236a1c0784882d3f8efe9cc28b2993971a83413907e9833190e2a99e611c748966d61489f84ea2f331c7c</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">256</span>):<br>key = <span class="hljs-string">b&#x27;&#x27;</span><br>x = <span class="hljs-built_in">bytes</span>([i])<br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>key += x<br>random.seed(<span class="hljs-built_in">int</span>(x.<span class="hljs-built_in">hex</span>(),<span class="hljs-number">16</span>))<br>x=random.randbytes(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">try</span>:<br>flag = decrypt(ciphertext,key)<br><span class="hljs-keyword">if</span>(<span class="hljs-string">b&#x27;ictf&#x27;</span> <span class="hljs-keyword">in</span> flag):<br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-keyword">except</span>:<br><span class="hljs-keyword">continue</span><br><br><br></code></pre></td></tr></table></figure></p><h2 id="crack">crack</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/local/bin/python</span><br><span class="hljs-keyword">import</span> random<br>flag = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag.txt&#x27;</span>).read()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Welcome! Let&#x27;s play a game!&quot;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_menu</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;&quot;1) Get random bits</span><br><span class="hljs-string">2) Guess number</span><br><span class="hljs-string">3) Exit&quot;&quot;&quot;</span>)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>print_menu()<br>x = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Choice: &quot;</span>))<br><span class="hljs-keyword">if</span> x == <span class="hljs-number">1</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;How many random numbers do you want?&quot;</span>)<br>r = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>arr = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(r):<br>arr.append(random.getrandbits(<span class="hljs-number">32</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Here you go: <span class="hljs-subst">&#123;arr&#125;</span>&#x27;</span>)<br><span class="hljs-keyword">if</span> x == <span class="hljs-number">2</span>:<br>to_guess = random.randint(<span class="hljs-number">0</span>,<span class="hljs-number">65535</span>*<span class="hljs-number">65537</span>)<br>guess = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Enter guess: &quot;</span>))<br><span class="hljs-keyword">if</span> guess == to_guess:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Wow! Here&#x27;s your flag: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Incorrect!&#x27;</span>)<br>exit()<br><span class="hljs-keyword">if</span> x == <span class="hljs-number">3</span>:<br>exit()<br></code></pre></td></tr></table></figure><p>可以选择获取的随机数的数量,然后要求预测一个随机数.Python默认内置的随机数发生器是MT19937,只要获取连续输出的624个32-bit随机数就可以预测随后的随机数序列.这里使用randcrack一把梭.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random, time<br><span class="hljs-keyword">from</span> randcrack <span class="hljs-keyword">import</span> RandCrack<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>io = remote(<span class="hljs-string">&#x27;34.72.43.223&#x27;</span>,<span class="hljs-string">&#x27;49133&#x27;</span>)<br>io.sendline(<span class="hljs-string">b&#x27;1&#x27;</span>)<br>io.sendline(<span class="hljs-string">b&#x27;624&#x27;</span>)<br>io.readuntil(<span class="hljs-string">b&#x27;Here you go: &#x27;</span>)<br>arr = (io.readline().strip())<br>x = <span class="hljs-string">b&#x27;arr = &#x27;</span> + arr<br><span class="hljs-built_in">exec</span>(x)<br><br>rc = RandCrack()<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">624</span>):<br>rc.submit(arr[i])<br><br>answer = rc.predict_randint(<span class="hljs-number">0</span>, <span class="hljs-number">65535</span>*<span class="hljs-number">65537</span>)<br>io.sendline(<span class="hljs-string">b&#x27;2&#x27;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(answer).encode())<br>io.readuntil(<span class="hljs-string">b&quot;Wow! Here&#x27;s your flag: &quot;</span>)<br><span class="hljs-built_in">print</span>(io.readline().strip())<br></code></pre></td></tr></table></figure></p><h2 id="scissor">Scissor</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">flag = <span class="hljs-string">&#x27;REDACTED&#x27;</span><br>ciphertext = <span class="hljs-string">b&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> flag:<br>ciphertext += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(i)+<span class="hljs-number">0x1337</span>).encode()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;ciphertext = <span class="hljs-subst">&#123;ciphertext.<span class="hljs-built_in">hex</span>()&#125;</span>&#x27;</span>)<br><br><span class="hljs-comment"># ciphertext = e18ea0e18e9ae18eabe18e9de18eb2e18e9ae18daae18ea9e18daee18da8e18e9de18da8e18daae18e9be18e96e18da8e18daae18daae18daee18e96e18e9fe18dabe18eafe18da7e18ea9e18d98e18eb4</span><br></code></pre></td></tr></table></figure><p>观察输出的密文可以发现每6字节一组,每组减去0x1337即可.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>c_list = [<span class="hljs-number">0xe18ea0</span>,<span class="hljs-number">0xe18e9a</span>,<span class="hljs-number">0xe18eab</span>,<span class="hljs-number">0xe18e9d</span>,<span class="hljs-number">0xe18eb2</span>,<span class="hljs-number">0xe18e9a</span>,<span class="hljs-number">0xe18daa</span>,<span class="hljs-number">0xe18ea9</span>,<span class="hljs-number">0xe18dae</span>,<span class="hljs-number">0xe18da8</span>,<span class="hljs-number">0xe18e9d</span>,<span class="hljs-number">0xe18da8</span>,<span class="hljs-number">0xe18daa</span>,<span class="hljs-number">0xe18e9b</span>,<span class="hljs-number">0xe18e96</span>,<span class="hljs-number">0xe18da8</span>,<span class="hljs-number">0xe18daa</span>,<span class="hljs-number">0xe18daa</span>,<span class="hljs-number">0xe18dae</span>,<span class="hljs-number">0xe18e96</span>,<span class="hljs-number">0xe18e9f</span>,<span class="hljs-number">0xe18dab</span>,<span class="hljs-number">0xe18eaf</span>,<span class="hljs-number">0xe18da7</span>,<span class="hljs-number">0xe18ea9</span>,<span class="hljs-number">0xe18d98</span>,<span class="hljs-number">0xe18eb4</span>]<br>s = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> c_list:<br>    s+=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(long_to_bytes(i).decode())-<span class="hljs-number">0x1337</span>)<br><span class="hljs-built_in">print</span>(s)<br></code></pre></td></tr></table></figure></p><h2 id="moonjump">Moonjump</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">u</span><span class="hljs-params">(s)</span></span><br>    <span class="hljs-keyword">local</span> r = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">for</span> i = #s, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span> <span class="hljs-keyword">do</span><br>        r = r * <span class="hljs-number">256</span><br>        r = r + <span class="hljs-built_in">string</span>.<span class="hljs-built_in">byte</span>(<span class="hljs-built_in">string</span>.<span class="hljs-built_in">sub</span>(s, i, i))<br>    <span class="hljs-keyword">end</span><br><br>    <span class="hljs-keyword">return</span> r<br><span class="hljs-keyword">end</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sw</span><span class="hljs-params">(t, a, b)</span></span><br>    <span class="hljs-keyword">local</span> x = t[a]<br>    t[a] = t[b]<br>    t[b] = x<br><span class="hljs-keyword">end</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">s</span><span class="hljs-params">(k)</span></span><br>    <span class="hljs-keyword">local</span> r = &#123;&#125;<br><br>    <span class="hljs-keyword">for</span> i = <span class="hljs-number">0</span>, <span class="hljs-number">255</span> <span class="hljs-keyword">do</span><br>        r[i] = i<br>    <span class="hljs-keyword">end</span><br><br>    <span class="hljs-keyword">local</span> j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">local</span> idx = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">for</span> i = <span class="hljs-number">0</span>, <span class="hljs-number">255</span> <span class="hljs-keyword">do</span><br>        idx = (i % #k) + <span class="hljs-number">1</span><br>        j = (j + r[i] + k:<span class="hljs-built_in">sub</span>(idx, idx):<span class="hljs-built_in">byte</span>()) % <span class="hljs-number">256</span><br>        sw(r, i, j)<br>    <span class="hljs-keyword">end</span><br><br>    <span class="hljs-keyword">return</span> r<br><span class="hljs-keyword">end</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">e</span><span class="hljs-params">(p, k)</span></span><br>    <span class="hljs-keyword">local</span> i = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">local</span> j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">local</span> r = <span class="hljs-string">&quot;&quot;</span><br><br>    <span class="hljs-keyword">for</span> l = <span class="hljs-number">1</span>, <span class="hljs-number">3072</span> <span class="hljs-keyword">do</span><br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>        j = (j + k[i]) % <span class="hljs-number">256</span><br>        sw(k, i, j)<br>        t = (k[i] + k[j]) % <span class="hljs-number">256</span><br>    <span class="hljs-keyword">end</span><br><br>    <span class="hljs-keyword">for</span> l = <span class="hljs-number">1</span>, #p <span class="hljs-keyword">do</span><br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>        j = (j + k[i]) % <span class="hljs-number">256</span><br>        sw(k, i, j)<br>        t = (k[i] + k[j]) % <span class="hljs-number">256</span><br>        r = r .. <span class="hljs-built_in">string</span>.<span class="hljs-built_in">char</span>(p:<span class="hljs-built_in">sub</span>(l, l):<span class="hljs-built_in">byte</span>() ~ k[t])<br>    <span class="hljs-keyword">end</span><br><br>    <span class="hljs-keyword">return</span> r<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">local</span> f = <span class="hljs-built_in">assert</span>(<span class="hljs-built_in">io</span>.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;moon.bmp&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>))<br><span class="hljs-keyword">local</span> d = f:<span class="hljs-built_in">read</span>(<span class="hljs-string">&quot;*all&quot;</span>)<br>f:<span class="hljs-built_in">close</span>()<br><br><span class="hljs-keyword">local</span> t = <span class="hljs-built_in">os</span>.<span class="hljs-built_in">time</span>()<br><span class="hljs-built_in">math</span>.<span class="hljs-built_in">randomseed</span>(t)<br><br><span class="hljs-keyword">local</span> o = u(<span class="hljs-built_in">string</span>.<span class="hljs-built_in">sub</span>(d, <span class="hljs-number">11</span>, <span class="hljs-number">14</span>)) + <span class="hljs-number">1</span><br><span class="hljs-keyword">local</span> p = <span class="hljs-built_in">string</span>.<span class="hljs-built_in">sub</span>(d, o, #d)<br><br><span class="hljs-keyword">for</span> i = <span class="hljs-number">1</span>, <span class="hljs-number">1000000000000000</span> <span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">math</span>.<span class="hljs-built_in">random</span>()<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">local</span> ks = s(<span class="hljs-built_in">tostring</span>(<span class="hljs-built_in">math</span>.<span class="hljs-built_in">random</span>(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>^<span class="hljs-number">32</span> - <span class="hljs-number">1</span>)))<br><span class="hljs-keyword">local</span> ct = e(p, ks)<br><br>f = <span class="hljs-built_in">assert</span>(<span class="hljs-built_in">io</span>.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;chall.bmp&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>))<br>f:<span class="hljs-built_in">write</span>(<span class="hljs-built_in">string</span>.<span class="hljs-built_in">sub</span>(d, <span class="hljs-number">0</span>, o - <span class="hljs-number">1</span>) .. ct .. <span class="hljs-built_in">os</span>.<span class="hljs-built_in">date</span>(<span class="hljs-string">&quot;!%d %h %Y, %H:%M&quot;</span>, t))<br>f:<span class="hljs-built_in">close</span>()<br></code></pre></td></tr></table></figure><p>使用随机数生成密钥后对位图的一部分像素做了RC4加密.给出了时间戳,随机数的种子是可以爆破的,无非就60种情况;但是PRNG的中间状态不少于1000000000000000种,直接从头输出的话,耗时是不可接受的.</p><p>通过搜索了解到Lua4.2之后内置的随机数发生器为Xorshiro256**,其提供了一个jump操作,执行一次可以跳过<span class="math inline">\(2^{128}\)</span>个状态,不过简单推演就能知道不适用于本题.</p><p>能不能仿照jump操作,自行实现一个更小步长的jump呢?审了审Lua中Xorshiro256**的源码,发现其实是个linear的PRNG,最后输出时做了个truncate.是线性的就能算出个矩阵,这样转化到了对矩阵做幂运算,用上快速幂之后时间复杂度直接就可以下来.</p><p>最终exp如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># sage</span><br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> ARC4<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rotl</span>(<span class="hljs-params">x, n, nbits=<span class="hljs-number">64</span></span>):<br>    <span class="hljs-keyword">return</span> ((x &lt;&lt; n) % (<span class="hljs-number">2</span>**nbits)) | (x &gt;&gt; (<span class="hljs-number">64</span> - n))<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LuaXoshiro</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, seed=<span class="hljs-number">0</span></span>):<br>        self.seed(seed)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">seed</span>(<span class="hljs-params">self, seed</span>):<br>        self.state = [seed, <span class="hljs-number">0xff</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">raw_seed</span>(<span class="hljs-params">self, state</span>):<br>        self.state = [state &gt;&gt; <span class="hljs-number">192</span>, (state &gt;&gt; <span class="hljs-number">128</span>) % (<span class="hljs-number">2</span>**<span class="hljs-number">64</span>), (state &gt;&gt; <span class="hljs-number">64</span>) % (<span class="hljs-number">2</span>**<span class="hljs-number">64</span>), state % (<span class="hljs-number">2</span>**<span class="hljs-number">64</span>)]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">next</span>(<span class="hljs-params">self</span>):<br>        [s0, s1, s2, s3] = self.state<br>        s2 ^^= s0<br>        s3 ^^= s1<br>        res = rotl((s1 * <span class="hljs-number">5</span>) % (<span class="hljs-number">2</span>**<span class="hljs-number">64</span>), <span class="hljs-number">7</span>) * <span class="hljs-number">9</span> % (<span class="hljs-number">2</span>**<span class="hljs-number">64</span>)<br>        self.state[<span class="hljs-number">0</span>] = s0 ^^ s3<br>        self.state[<span class="hljs-number">1</span>] = s1 ^^ s2<br>        self.state[<span class="hljs-number">2</span>] = s2 ^^ ((s1 &lt;&lt; <span class="hljs-number">17</span>) % (<span class="hljs-number">2</span>**<span class="hljs-number">64</span>))<br>        self.state[<span class="hljs-number">3</span>] = rotl(s3, <span class="hljs-number">45</span>)<br>        <span class="hljs-keyword">return</span> res<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">raw_state</span>(<span class="hljs-params">self</span>):<br>        [s0, s1, s2, s3] = self.state<br>        <span class="hljs-keyword">return</span> (s0 &lt;&lt; <span class="hljs-number">192</span>) + (s1 &lt;&lt; <span class="hljs-number">128</span>) + (s2 &lt;&lt; <span class="hljs-number">64</span>) + s3<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">next_state</span>(<span class="hljs-params">self</span>):<br>        self.<span class="hljs-built_in">next</span>()<br>        <span class="hljs-keyword">return</span> self.raw_state()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">n_to_bit_list</span>(<span class="hljs-params">n, nbits=<span class="hljs-number">256</span></span>):<br>    F = GF(<span class="hljs-number">2</span>)<br>    result = [<span class="hljs-literal">None</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nbits)]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nbits):<br>        result[i] = F((n &gt;&gt; (nbits - i - <span class="hljs-number">1</span>)) % <span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">return</span> result<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bit_list_to_n</span>(<span class="hljs-params">bl</span>):<br>    result = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> bl:<br>        result *= <span class="hljs-number">2</span><br>        result += <span class="hljs-built_in">int</span>(b)<br>    <span class="hljs-keyword">return</span> result<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">transition_matrix</span>(<span class="hljs-params">engine, nbits=<span class="hljs-number">256</span></span>):<br>    state = engine.state<br>    columns = []<br>    <span class="hljs-comment"># calculate the standard matrix</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nbits):<br>        seed = <span class="hljs-number">1</span> &lt;&lt; (nbits - i - <span class="hljs-number">1</span>)<br>        engine.raw_seed(seed)<br>        columns.append(n_to_bit_list(engine.next_state()))<br><br>    engine.state = state<br>    <span class="hljs-keyword">return</span> matrix(GF(<span class="hljs-number">2</span>), columns).transpose()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">jump</span>(<span class="hljs-params">engine, num_steps, mat=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-keyword">if</span> mat <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        mat = transition_matrix(engine)<br><br>    state = engine.raw_state()<br>    v = vector(n_to_bit_list(state))<br>    v2 = mat^num_steps * v<br>    newstate = bit_list_to_n(v2)<br>    engine.raw_seed(newstate)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">lua_nth_random</span>(<span class="hljs-params">e, n, mat=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-comment"># lua advances the state 16 times after setting the seed in math.randomseed</span><br>    jump(e, n + <span class="hljs-number">16</span>, mat)<br>    <span class="hljs-keyword">return</span> e.<span class="hljs-built_in">next</span>() &amp; (<span class="hljs-number">2</span>**<span class="hljs-number">32</span> - <span class="hljs-number">1</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solve</span>():<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;chall.bmp&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        data = f.read()<br>    header = data[:<span class="hljs-number">0x8a</span>]<br>    enc = data[<span class="hljs-number">0x8a</span>:]<br>    dt = datetime.strptime(<span class="hljs-string">&#x27;31 Jan 2020, 20:38 +0000&#x27;</span>, <span class="hljs-string">&#x27;%d %b %Y, %H:%M %z&#x27;</span>)<br>    e = LuaXoshiro()<br>    mat = transition_matrix(e)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">60</span>):<br>        seed = <span class="hljs-built_in">int</span>(dt.timestamp() + i)<br>        e.seed(seed)<br>        key = <span class="hljs-built_in">str</span>(lua_nth_random(e, <span class="hljs-number">1_000_000_000_000_000</span>)).encode()<br>        cipher = ARC4.new(key, drop=<span class="hljs-number">3072</span>)<br>        dec = cipher.decrypt(enc)<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">f&#x27;decrypted/<span class="hljs-subst">&#123;i:02&#125;</span>.bmp&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            f.write(header + dec)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    solve()<br><br><span class="hljs-comment"># ictf&#123;xoshiro_jumps_in_lua_like_a_pro&#125;</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Writeups</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024 XYCTF 部分题解</title>
    <link href="/2024-XYCTF-%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3.html"/>
    <url>/2024-XYCTF-%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3.html</url>
    
    <content type="html"><![CDATA[<p>和同学keyboard,furina一起组了个xing战队打了这场XYCTF.说是新生赛但题目不算很容易,所以姑且记录一下.</p><p>标*的是赛后复盘的题目.</p><h2 id="crypto-happy_to_solve1">Crypto-happy_to_solve1</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sympy<br><span class="hljs-keyword">from</span> secrets <span class="hljs-keyword">import</span> flag<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_happy_prime</span>():<br>    p = getPrime(<span class="hljs-number">512</span>)<br>    q = sympy.nextprime(p ^ ((<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">512</span>) - <span class="hljs-number">1</span>))<br>    <span class="hljs-keyword">return</span> p, q<br><br><br>m = bytes_to_long(flag)<br>p, q = get_happy_prime()<br>n = p * q<br>e = <span class="hljs-number">65537</span><br><span class="hljs-built_in">print</span>(n)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">pow</span>(m, e, n))<br><span class="hljs-comment"># 24852206647750545040640868093921252282805229864862413863025873203291042799096787789288461426555716785288286492530194901130042940279109598071958012303179823645151637759103558737126271435636657767272703908384802528366090871653024192321398785017073393201385586868836278447340624427705360349350604325533927890879</span><br><span class="hljs-comment"># 14767985399473111932544176852718061186100743117407141435994374261886396781040934632110608219482140465671269958180849886097491653105939368395716596413352563005027867546585191103214650790884720729601171517615620202183534021987618146862260558624458833387692782722514796407503120297235224234298891794056695442287</span><br></code></pre></td></tr></table></figure><p>从题目条件可以推出 <span class="math inline">\(p+q=2^{512}+k\)</span>，其中k的大小不会很大。因此构造方程 <spanclass="math inline">\(x^2-(2^{512}+k)x+n=0\)</span>，利用该方程暴力搜索p+q即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><br>n = <span class="hljs-number">24852206647750545040640868093921252282805229864862413863025873203291042799096787789288461426555716785288286492530194901130042940279109598071958012303179823645151637759103558737126271435636657767272703908384802528366090871653024192321398785017073393201385586868836278447340624427705360349350604325533927890879</span><br>c = <span class="hljs-number">14767985399473111932544176852718061186100743117407141435994374261886396781040934632110608219482140465671269958180849886097491653105939368395716596413352563005027867546585191103214650790884720729601171517615620202183534021987618146862260558624458833387692782722514796407503120297235224234298891794056695442287</span><br><br>P.&lt;x&gt; = ZZ[]<br><br>t = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">512</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    f = x ^ <span class="hljs-number">2</span> - t * x + n<br>    rs = f.roots()<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(rs) &gt; <span class="hljs-number">0</span>:<br>        p = rs[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br>        q = n // p<br>        <span class="hljs-keyword">assert</span> p * q == n<br>        <span class="hljs-keyword">break</span><br>    t += <span class="hljs-number">1</span><br>d = inverse_mod(<span class="hljs-number">65537</span>, (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>))<br>m = power_mod(c, d, n)<br><span class="hljs-built_in">print</span>(long_to_bytes(m).decode())<br><span class="hljs-comment"># XYCTF&#123;3f22f4efe3bbbc71bbcc999a0a622a1a23303cdc&#125;</span><br></code></pre></td></tr></table></figure><h2 id="crypto-x0y">Crypto-x0y</h2><p>题目如下 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad<br><span class="hljs-keyword">import</span> os<br><br>flag = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag.txt&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>).read()<br>key = os.urandom(<span class="hljs-number">16</span>)<br>iv = os.urandom(<span class="hljs-number">16</span>)<br>flag = pad(flag, <span class="hljs-number">16</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">aes_encrypt</span>(<span class="hljs-params">key, plaintext</span>):<br>    cipher = AES.new(key, AES.MODE_ECB)<br>    <span class="hljs-keyword">return</span> cipher.encrypt(plaintext)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">key, plaintext, iv</span>):<br>    ciphertext = <span class="hljs-string">b&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(plaintext), AES.block_size):<br>        key_block = aes_encrypt(key, iv)<br>        ciphertext_block = <span class="hljs-built_in">bytes</span>(<br>            [plaintext[i + j] ^ key_block[j] <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(AES.block_size)]<br>        )<br>        ciphertext += ciphertext_block<br>        iv = key_block<br>    <span class="hljs-keyword">return</span> ciphertext<br><br><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;1.print\n2.input\n3.exit&quot;</span>)<br>        a = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&gt; &quot;</span>)<br>        <span class="hljs-keyword">if</span> a == <span class="hljs-string">&quot;1&quot;</span>:<br>            <span class="hljs-built_in">print</span>((iv + encrypt(key, flag, iv)).<span class="hljs-built_in">hex</span>())<br>        <span class="hljs-keyword">elif</span> a == <span class="hljs-string">&quot;2&quot;</span>:<br>            ivs = <span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;iv: &quot;</span>))<br>            inputs = <span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;message: &quot;</span>))<br>            <span class="hljs-built_in">print</span>(encrypt(key, inputs, ivs).<span class="hljs-built_in">hex</span>())<br>        <span class="hljs-keyword">elif</span> a == <span class="hljs-string">&quot;3&quot;</span>:<br>            exit(<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;You need input 1,2,3&quot;</span>)<br>    <span class="hljs-keyword">except</span>:exit(<span class="hljs-number">0</span>)<br><span class="hljs-comment"># b8bade451e6cc96d6f1b1f3a9e0c76cddc21942c4adf94561b4003c7473df446caf7d88b8911ebde71c0716a67cba57460ffe68b84ccea0906dddfb19d9a7223</span><br></code></pre></td></tr></table></figure></p><p>已知iv，且key是选定之后一直不变的，所以key_block其实也是一直不变的。构造一个与密文等长的'0'序列输入即可获取到key_block的值，随后与密文xor即得。</p><p>exp: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Python">cipher=[<span class="hljs-number">0xdc</span>,<span class="hljs-number">0x21</span>,<span class="hljs-number">0x94</span>,<span class="hljs-number">0x2c</span>,<span class="hljs-number">0x4a</span>,<span class="hljs-number">0xdf</span>,<span class="hljs-number">0x94</span>,<span class="hljs-number">0x56</span>,<span class="hljs-number">0x1b</span>,<span class="hljs-number">0x40</span>,<span class="hljs-number">0x03</span>,<span class="hljs-number">0xc7</span>,<span class="hljs-number">0x47</span>,<span class="hljs-number">0x3d</span>,<span class="hljs-number">0xf4</span>,<span class="hljs-number">0x46</span>,<span class="hljs-number">0xca</span>,<span class="hljs-number">0xf7</span>,<span class="hljs-number">0xd8</span>,<span class="hljs-number">0x8b</span>,<span class="hljs-number">0x89</span>,<span class="hljs-number">0x11</span>,<span class="hljs-number">0xeb</span>,<span class="hljs-number">0xde</span>,<span class="hljs-number">0x71</span>,<span class="hljs-number">0xc0</span>,<span class="hljs-number">0x71</span>,<span class="hljs-number">0x6a</span>,<span class="hljs-number">0x67</span>,<span class="hljs-number">0xcb</span>,<span class="hljs-number">0xa5</span>,<span class="hljs-number">0x74</span>,<span class="hljs-number">0x60</span>,<span class="hljs-number">0xff</span>,<span class="hljs-number">0xe6</span>,<span class="hljs-number">0x8b</span>,<span class="hljs-number">0x84</span>,<span class="hljs-number">0xcc</span>,<span class="hljs-number">0xea</span>,<span class="hljs-number">0x09</span>,<span class="hljs-number">0x06</span>,<span class="hljs-number">0xdd</span>,<span class="hljs-number">0xdf</span>,<span class="hljs-number">0xb1</span>,<span class="hljs-number">0x9d</span>,<span class="hljs-number">0x9a</span>,<span class="hljs-number">0x72</span>,<span class="hljs-number">0x23</span>]<br>key=[<span class="hljs-number">0x84</span>,<span class="hljs-number">0x78</span>,<span class="hljs-number">0xd7</span>,<span class="hljs-number">0x78</span>,<span class="hljs-number">0x0c</span>,<span class="hljs-number">0xa4</span>,<span class="hljs-number">0xf5</span>,<span class="hljs-number">0x6e</span>,<span class="hljs-number">0x7a</span>,<span class="hljs-number">0x24</span>,<span class="hljs-number">0x37</span>,<span class="hljs-number">0xa4</span>,<span class="hljs-number">0x24</span>,<span class="hljs-number">0x58</span>,<span class="hljs-number">0xd9</span>,<span class="hljs-number">0x7f</span>,<span class="hljs-number">0xab</span>,<span class="hljs-number">0xc4</span>,<span class="hljs-number">0xed</span>,<span class="hljs-number">0xa6</span>,<span class="hljs-number">0xbd</span>,<span class="hljs-number">0x20</span>,<span class="hljs-number">0xdd</span>,<span class="hljs-number">0xe9</span>,<span class="hljs-number">0x5c</span>,<span class="hljs-number">0xf9</span>,<span class="hljs-number">0x14</span>,<span class="hljs-number">0x5e</span>,<span class="hljs-number">0x56</span>,<span class="hljs-number">0xe6</span>,<span class="hljs-number">0x95</span>,<span class="hljs-number">0x43</span>,<span class="hljs-number">0x56</span>,<span class="hljs-number">0xca</span>,<span class="hljs-number">0xd5</span>,<span class="hljs-number">0xe9</span>,<span class="hljs-number">0xb1</span>,<span class="hljs-number">0xaa</span>,<span class="hljs-number">0x8e</span>,<span class="hljs-number">0x3e</span>,<span class="hljs-number">0x36</span>,<span class="hljs-number">0xbb</span>,<span class="hljs-number">0xa2</span>,<span class="hljs-number">0xbb</span>,<span class="hljs-number">0x99</span>,<span class="hljs-number">0x9e</span>,<span class="hljs-number">0x76</span>,<span class="hljs-number">0x27</span>]<br>plain=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(cipher)):<br>    plain+=<span class="hljs-built_in">chr</span>(cipher[i]^key[i])<br><span class="hljs-built_in">print</span>(plain)<br></code></pre></td></tr></table></figure></p><h2 id="crypto-babyrsamax">Crypto-babyRSAMAX</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> choice<br><br>flag = <span class="hljs-string">b&#x27;XYCTF&#123;******&#125;&#x27;</span><br>e = <span class="hljs-string">&#x27;?&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getBabyPrime</span>(<span class="hljs-params">nbits</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        p = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> p.bit_length() &lt;= nbits:<br>            p *= choice(sieve_base)<br>        <br>        <span class="hljs-keyword">if</span> isPrime(p+<span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">return</span> p+<span class="hljs-number">1</span><br><br>p = getBabyPrime(<span class="hljs-number">512</span>)<br>q = getBabyPrime(<span class="hljs-number">512</span>)<br>n = p*q<br>gift1 = (<span class="hljs-built_in">pow</span>(p,e,n)-<span class="hljs-built_in">pow</span>(q,e,n)) % n<br>gift2 = <span class="hljs-built_in">pow</span>(p+q,e,n)<br><br>t = <span class="hljs-number">65537</span><br>x = bytes_to_long(e)<br>y = <span class="hljs-built_in">pow</span>(x, t, n)<br><br>m = bytes_to_long(flag)<br>c = powmod(m, e, n)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;n = <span class="hljs-subst">&#123;n&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;gift1 = <span class="hljs-subst">&#123;gift1&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;gift2 = <span class="hljs-subst">&#123;gift2&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c = <span class="hljs-subst">&#123;c&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;y = <span class="hljs-subst">&#123;y&#125;</span>&#x27;</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n = 39332423872740210783246069030855946244104982381157166843977599780233911183158560901377359925435092326653303964261550158658551518626014048783435245471536959844874036516931542444719549997971482644905523459407775392702211086149279473784796202020281909706723380472571862792003687423791576530085747716706475220532321</span><br><span class="hljs-string">gift1 = 4549402444746338327349007235818187793950285105091726167573552412678416759694660166956782755631447271662108564084382098562999950228708300902201571583419116299932264478381197034402338481872937576172197202519770782458343606060544694608852844228400457232100904217062914047342663534138668490328400022651816597367310</span><br><span class="hljs-string">gift2 = 111061215998959709920736448050860427855012026815376672067601244053580566359594802604251992986382187891022583247997994146019970445247509119719411310760491983876636264003942870756402328634092146799825005835867245563420135253048223898334460067523975023732153230791136870324302259127159852763634051238811969161011462</span><br><span class="hljs-string">c = 16938927825234407267026017561045490265698491840814929432152839745035946118743714566623315033802681009017695526374397370343984360997903165842591414203197184946588470355728984912522040744691974819630118163976259246941579063687857994193309554129816268931672391946592680578681270693589911021465752454315629283033043</span><br><span class="hljs-string">y = 1813650001270967709841306491297716908969425248888510985109381881270362755031385564927869313112540534780853966341044526856705589020295048473305762088786992446350060024881117741041260391405962817182674421715239197211274668450947666394594121764333794138308442124114744892164155894256326961605137479286082964520217</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>gift1和gift2相加后与n进行gcd即可得到p，由此分解出p,q，迎刃而解。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">import</span> gmpy2<br><br>  <br><br>t = <span class="hljs-number">65537</span><br><br>n = <span class="hljs-number">39332423872740210783246069030855946244104982381157166843977599780233911183158560901377359925435092326653303964261550158658551518626014048783435245471536959844874036516931542444719549997971482644905523459407775392702211086149279473784796202020281909706723380472571862792003687423791576530085747716706475220532321</span><br><br>gift1 = <span class="hljs-number">4549402444746338327349007235818187793950285105091726167573552412678416759694660166956782755631447271662108564084382098562999950228708300902201571583419116299932264478381197034402338481872937576172197202519770782458343606060544694608852844228400457232100904217062914047342663534138668490328400022651816597367310</span><br><br>gift2 = <span class="hljs-number">111061215998959709920736448050860427855012026815376672067601244053580566359594802604251992986382187891022583247997994146019970445247509119719411310760491983876636264003942870756402328634092146799825005835867245563420135253048223898334460067523975023732153230791136870324302259127159852763634051238811969161011462</span><br><br>c = <span class="hljs-number">16938927825234407267026017561045490265698491840814929432152839745035946118743714566623315033802681009017695526374397370343984360997903165842591414203197184946588470355728984912522040744691974819630118163976259246941579063687857994193309554129816268931672391946592680578681270693589911021465752454315629283033043</span><br><br>y = <span class="hljs-number">1813650001270967709841306491297716908969425248888510985109381881270362755031385564927869313112540534780853966341044526856705589020295048473305762088786992446350060024881117741041260391405962817182674421715239197211274668450947666394594121764333794138308442124114744892164155894256326961605137479286082964520217</span><br><br>gift3 = gift1+gift2<br>p = gcd(gift3,n)<br>q = n//p<br>phi = (p - <span class="hljs-number">1</span>)*(q - <span class="hljs-number">1</span>)<br><br>  <br><br><span class="hljs-comment">#解e</span><br><br>d1 = gmpy2.invert(t,phi)<br>e=<span class="hljs-built_in">pow</span>(y,d1,n)<br><span class="hljs-built_in">print</span>(long_to_bytes(e)) <span class="hljs-comment">#因为逆天的出题人把e套了一层bytes所以转一下</span><br><br><span class="hljs-comment"># XYCTF&#123;e==4096&#125;</span><br><br><span class="hljs-comment"># e和phin不互素，CRT启动！</span><br><br>  <br><br><span class="hljs-string">&#x27;&#x27;&#x27;Sage</span><br><span class="hljs-string"></span><br><span class="hljs-string">c = 16938927825234407267026017561045490265698491840814929432152839745035946118743714566623315033802681009017695526374397370343984360997903165842591414203197184946588470355728984912522040744691974819630118163976259246941579063687857994193309554129816268931672391946592680578681270693589911021465752454315629283033043</span><br><span class="hljs-string"></span><br><span class="hljs-string">p=166353789373057352195268575168397750362643822201253508941052835945420624983216456266478176579651490080696973849607356408696043718492499993062863415424578199</span><br><span class="hljs-string"></span><br><span class="hljs-string">q=236438400477521597922950445153796265199072404577183190953114805170522875904551780358338769440558816351105253794964040981919231484098097671084895302287425479</span><br><span class="hljs-string"></span><br><span class="hljs-string">e = 4096</span><br><span class="hljs-string"></span><br><span class="hljs-string">  </span><br><span class="hljs-string"></span><br><span class="hljs-string">for mp in GF(p)(c).nth_root(e, all=True):</span><br><span class="hljs-string">    for mq in GF(q)(c).nth_root(e, all=True):</span><br><span class="hljs-string">        m = crt([ZZ(mp), ZZ(mq)], [p, q])</span><br><span class="hljs-string">        try:</span><br><span class="hljs-string">            res = bytes.fromhex(hex(m)[2:])</span><br><span class="hljs-string">            if res.isascii():</span><br><span class="hljs-string">                print(res)</span><br><span class="hljs-string">        except:</span><br><span class="hljs-string">            pass</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-comment"># b&#x27;XYCTF&#123;Rabin_is_so_biggggg!&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="crypto-factor1">Crypto-factor1</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> gmpy2<br><br><span class="hljs-keyword">import</span> hashlib<br><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>p = getPrime(<span class="hljs-number">512</span>)<br>q = getPrime(<span class="hljs-number">512</span>)<br>d = getPrime(<span class="hljs-number">512</span>)<br>e = gmpy2.invert(d, (p**<span class="hljs-number">3</span> - <span class="hljs-number">1</span>) * (q**<span class="hljs-number">3</span> - <span class="hljs-number">1</span>))<br>flag = <span class="hljs-string">&quot;XYCTF&#123;&quot;</span> + hashlib.md5(<span class="hljs-built_in">str</span>(p + q).encode()).hexdigest() + <span class="hljs-string">&quot;&#125;&quot;</span><br><span class="hljs-built_in">print</span>(e)<br><span class="hljs-built_in">print</span>(p * q)<br><span class="hljs-comment"># 172005065945326769176157335849432320425605083524943730546805772515111751580759726759492349719668775270727323745284785341119685198468883978645793770975366048506237371435027612758232099414404389043740306443065413069994232238075194102578269859784981454218948784071599231415554297361219709787507633404217550013282713899284609273532223781487419770338416653260109238572639243087280632577902857385265070736208291583497988891353312351322545840742380550393294960815728021248513046077985900158814037534487146730483099151396746751774427787635287611736111679074330407715700153025952858666841328055071403960165321273972935204988906850585454805923440635864200149694398767776539993952528995717480620593326867245714074205285828967234591508039849777840636255379730281105670496110061909219669860172557450779495125345533232776767292561378244884362014224844319802810586344516400297830227894063759083198761120293919537342405893653545157892446163</span><br><br><span class="hljs-comment"># 99075185389443078008327214328328747792385153883836599753096971412377366865826254033534293886034828804219037466246175526347014045811852531994537520303063113985486063022444972761276531422538694915030159420989401280012025249129111871649831185047820236417385693285461420040134313833571949090757635806658958193793</span><br></code></pre></td></tr></table></figure><p>e过大，一眼Wiener Attack。需要注意的是，虽然从题目中的条件可以推知<span class="math inline">\(ed\equiv 1 \bmod(\phi(N))\)</span>，但是因为d的范围，使用 <span class="math inline">\(N\)</span>去攻击并不能成功，而是要根据题目中的形式需要使用 <spanclass="math inline">\(N^3\)</span> ，使得d落在可攻击范围之内。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">factor_rsa_wiener</span>(<span class="hljs-params">N, e</span>):<br>    N = Integer(N)<br>    e = Integer(e)<br>    cf = (e / N).continued_fraction().convergents()<br>    <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> cf:<br>        k = f.numer()<br>        d = f.denom()<br>        <span class="hljs-keyword">if</span> k == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">continue</span><br>        phi_N = ((e * d) - <span class="hljs-number">1</span>) / k<br>        b = -(N - phi_N + <span class="hljs-number">1</span>)<br>        dis = b ^ <span class="hljs-number">2</span> - <span class="hljs-number">4</span> * N<br>        <span class="hljs-keyword">if</span> dis.sign() == <span class="hljs-number">1</span>:<br>            dis_sqrt = sqrt(dis)<br>            p = (-b + dis_sqrt) / <span class="hljs-number">2</span><br>            q = (-b - dis_sqrt) / <span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> p.is_integer() <span class="hljs-keyword">and</span> q.is_integer() <span class="hljs-keyword">and</span> (p * q) % N == <span class="hljs-number">0</span>:<br>                p = p % N<br>                q = q % N<br>                <span class="hljs-keyword">if</span> p &gt; q:<br>                    <span class="hljs-keyword">return</span> (p, q)<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-keyword">return</span> (q, p)<br>e=<span class="hljs-number">172005065945326769176157335849432320425605083524943730546805772515111751580759726759492349719668775270727323745284785341119685198468883978645793770975366048506237371435027612758232099414404389043740306443065413069994232238075194102578269859784981454218948784071599231415554297361219709787507633404217550013282713899284609273532223781487419770338416653260109238572639243087280632577902857385265070736208291583497988891353312351322545840742380550393294960815728021248513046077985900158814037534487146730483099151396746751774427787635287611736111679074330407715700153025952858666841328055071403960165321273972935204988906850585454805923440635864200149694398767776539993952528995717480620593326867245714074205285828967234591508039849777840636255379730281105670496110061909219669860172557450779495125345533232776767292561378244884362014224844319802810586344516400297830227894063759083198761120293919537342405893653545157892446163</span><br>n=<span class="hljs-number">99075185389443078008327214328328747792385153883836599753096971412377366865826254033534293886034828804219037466246175526347014045811852531994537520303063113985486063022444972761276531422538694915030159420989401280012025249129111871649831185047820236417385693285461420040134313833571949090757635806658958193793</span><br><span class="hljs-built_in">print</span>(factor_rsa_wiener(n**<span class="hljs-number">3</span>,e))    <br><span class="hljs-comment"># p**3 = 1244017062789857764422667689197770411561706061389715742852841131131435478039738844788314076541516819766126607314172841730975726749473298781835130842627454629568985724966925735905579282826322467200321805458818184179125514763621834851652092846169460275768772863952106838841006859603856275880383937805904493971997262155516186649395940112478889012377196708598220178020268381188803264308066063878770942584129304104857476445838035070537472243418121420612877337721035139</span><br><span class="hljs-comment"># q**3 = 781750817102250814081402150839349648838094352331200646064329593739249658509293014822407869754909590964961253627998562104967609046600602463761387625281775226114093766468854130062539304801906723482222402079346881907551622221610829587775870117982981382377420719340275829723435212262439715988059683115133464900926751096727854874698447640032293397116617936988359535830766353635342613807991926780460233344065075367609934736815239097217192394502104370100558611689435563</span><br></code></pre></td></tr></table></figure><p>这里解出的是 <span class="math inline">\(p^{3}, q^{3}\)</span>，开根后即得p,q。</p><h2 id="crypto-反方向的密码-相思">Crypto-反方向的密码 相思</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> secrets <span class="hljs-keyword">import</span> flag<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hash</span>(<span class="hljs-params">x</span>):<br><span class="hljs-keyword">return</span> hashlib.sha256(x.encode()).digest()<br><br>  <br>  <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pad</span>(<span class="hljs-params">message</span>):<br><span class="hljs-keyword">return</span> message + <span class="hljs-built_in">hash</span>(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(message)))<br><br><br>m = bytes_to_long(pad(flag))<br>p = getStrongPrime(<span class="hljs-number">512</span>)<br>q = getStrongPrime(<span class="hljs-number">512</span>)<br>n = p * q<br>e = <span class="hljs-number">3</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">pow</span>(m, e, n))<br><span class="hljs-built_in">print</span>(n)<br><br><span class="hljs-comment"># 120440199294949712392334113337541924034371176306546446428347114627162894108760435789068328282135879182130546564535108930827440004987170619301799710272329673259390065147556073101312748104743572369383346039000998822862286001416166288971531241789864076857299162050026949096919395896174243383291126202796610039053</span><br><br><span class="hljs-comment"># 143413213355903851638663645270518081058249439863120739973910994223793329606595495141951165221740599158773181585002460087410975579141155680671886930801733174300593785562287068287654547100320094291092508723488470015821072834947151827362715749438612812148855627557719115676595686347541785037035334177162406305243</span><br></code></pre></td></tr></table></figure><p>拿到题目后可以发现padding是很容易爆破的,因此相当于m的低位已知，考虑使用一元CopperSmith攻击如下等式:<span class="math display">\[(low_m+x)^{3}-c\equiv{0}\bmod {n}\]</span>我们要求x的低256bits都是0，因此实际上可以化归为</p><p><spanclass="math display">\[(low_m+x&lt;&lt;256)^{3}-c\equiv{0}\bmod{n}\]</span></p><p>然后使用monic方法化为首一多项式，即可套用CopperSmith攻击并缩小x的攻击范围。</p><p>事实上题目中还给出了flag的高位<code>XYCTF&#123;</code>，因此构造最终exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Copper</span>(<span class="hljs-params">low_m, n, c, LEN</span>):<br>R.&lt;x&gt; = PolynomialRing(Zmod(n), implementation=<span class="hljs-string">&#x27;NTL&#x27;</span>)<br>f = (x*<span class="hljs-number">2</span>^<span class="hljs-number">256</span> + low_m + <span class="hljs-number">97140404930171</span>*<span class="hljs-number">2</span>^(<span class="hljs-number">256</span>+<span class="hljs-number">8</span>*(LEN-<span class="hljs-number">6</span>)))^<span class="hljs-number">3</span> - c<br>f = f.monic()<br>root = f.small_roots(X=<span class="hljs-number">2</span>^(<span class="hljs-number">8</span>*(LEN-<span class="hljs-number">6</span>)),beta=<span class="hljs-number">0.5</span>,epsilon=<span class="hljs-number">0.015</span>)<br><span class="hljs-keyword">if</span>(root):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;root =&#x27;</span>,long_to_bytes(<span class="hljs-built_in">int</span>(root[<span class="hljs-number">0</span>])))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hash</span>(<span class="hljs-params">x</span>):<br><span class="hljs-keyword">return</span> bytes_to_long(hashlib.sha256(x.encode()).digest())<br><br>  <br><br>n = <span class="hljs-number">143413213355903851638663645270518081058249439863120739973910994223793329606595495141951165221740599158773181585002460087410975579141155680671886930801733174300593785562287068287654547100320094291092508723488470015821072834947151827362715749438612812148855627557719115676595686347541785037035334177162406305243</span><br><br>c = <span class="hljs-number">120440199294949712392334113337541924034371176306546446428347114627162894108760435789068328282135879182130546564535108930827440004987170619301799710272329673259390065147556073101312748104743572369383346039000998822862286001416166288971531241789864076857299162050026949096919395896174243383291126202796610039053</span><br><br><span class="hljs-keyword">for</span> LEN <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>,<span class="hljs-number">40</span>):<br>low_m = <span class="hljs-built_in">hash</span>(<span class="hljs-built_in">str</span>(LEN))<br>Copper(low_m, n, c, LEN)<br><span class="hljs-comment"># root = b&#x27;!__d3ng__hu0__1@n__3h@n__Chu__!&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>（比赛中这一题踩了相当严重的坑...Sagemath的small_roots方法默认情况下<span class="math inline">\(\varepsilon=\frac{\beta}{8}\)</span>，如果不调小的话是无法攻击成功的😓GPT给出的建议反而是调大 <spanclass="math inline">\(\varepsilon\)</span>导致白白浪费了两天的时间，所以只能说有疑问还是得看文档）</p><h2 id="crypto-happy_to_solve2">Crypto-happy_to_solve2</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secrets <span class="hljs-keyword">import</span> flag<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_happy_prime</span>():<br>    <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>        p = <span class="hljs-built_in">int</span>(<span class="hljs-string">&quot;&quot;</span>.join([random.choice(<span class="hljs-string">&quot;123&quot;</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">512</span>)]))<br>        q = <span class="hljs-built_in">int</span>(<span class="hljs-string">&quot;&quot;</span>.join([random.choice(<span class="hljs-string">&quot;567&quot;</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">512</span>)]))<br>        <span class="hljs-keyword">if</span> isPrime(p) <span class="hljs-keyword">and</span> isPrime(q):<br>            <span class="hljs-keyword">return</span> (p,q)<br><br>m = bytes_to_long(flag)<br>p ,q= get_happy_prime()<br>n = p * q<br>e = <span class="hljs-number">65537</span><br><span class="hljs-built_in">print</span>(n)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">pow</span>(m, e, n))<br><span class="hljs-comment"># 697906506747097082736076931509594586899561519277373830451275402914416296858960649459482027106166486723487162428522597262774248272216088755005277069446993003521270487750989061229071167729138628583207229945902389632065500739730301375338674342457656803764567184544685006193130563116558641331897204457729877920989968662546183628637193220770495938729301979912328865798266631957128761871326655572836258178871966196973138373358029531478246243442559418904559585334351259080578222274926069834941166567112522869638854253933559832822899069320370733424453856240903784235604251466010104012061821038897933884352804297256364409157501116832788696434711523621632436970698827611375698724661553712549209133526623456888111161142213830821361143023186927163314212097199831985368310770663850851571934739809387798422381702174820982531508641022827776262236373967579266271031713520262606203067411268482553539580686495739014567368858613520107678565628269250835478345171330669316220473129104495659093134763261751546990704365966783697780787341963138501</span><br><span class="hljs-comment"># 153383826085102296581238539677668696644156148059026868813759015106139131297135097831661048493079405226972222492151356105759235749502324303047037349410709021152255315429280760639113724345836532087970918453353723090554450581657930847674930226113840172368662838756446364482977092478979838209396761279326533419699056209983721842484996150025403009644653678928025861445324715419893797015875541525590135843027312322236085581571452084477262582966972702577136904385741443870527205640874446616413917231260133364227248928492574610248881137364204914001412269740461851747883355414968499272944590071623223603501698004227753335552646715567802825755799597955409228004284739743749531270833084850113574712041224896044525292591264637452797151098802604186311724597450780520140413704697374209653369969451501627583467893160412780732575085846467289134920886789952338174193202234175299652687560232593212131693456966318670843605238958724126368185289703563591477049105538528244632434869965333722691837462591128379816582723367039674028619947057144546</span><br><br></code></pre></td></tr></table></figure><p>题目原型是osu!gaming CTF2024的wysi-prime。p,q的十进制数位分别只能是<code>1,2,3</code>和<code>5,6,7</code>，直接构造p，q后dfs即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> product<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><br>n = <span class="hljs-number">697906506747097082736076931509594586899561519277373830451275402914416296858960649459482027106166486723487162428522597262774248272216088755005277069446993003521270487750989061229071167729138628583207229945902389632065500739730301375338674342457656803764567184544685006193130563116558641331897204457729877920989968662546183628637193220770495938729301979912328865798266631957128761871326655572836258178871966196973138373358029531478246243442559418904559585334351259080578222274926069834941166567112522869638854253933559832822899069320370733424453856240903784235604251466010104012061821038897933884352804297256364409157501116832788696434711523621632436970698827611375698724661553712549209133526623456888111161142213830821361143023186927163314212097199831985368310770663850851571934739809387798422381702174820982531508641022827776262236373967579266271031713520262606203067411268482553539580686495739014567368858613520107678565628269250835478345171330669316220473129104495659093134763261751546990704365966783697780787341963138501</span><br>e = <span class="hljs-number">65537</span><br>ciphertext = <span class="hljs-number">153383826085102296581238539677668696644156148059026868813759015106139131297135097831661048493079405226972222492151356105759235749502324303047037349410709021152255315429280760639113724345836532087970918453353723090554450581657930847674930226113840172368662838756446364482977092478979838209396761279326533419699056209983721842484996150025403009644653678928025861445324715419893797015875541525590135843027312322236085581571452084477262582966972702577136904385741443870527205640874446616413917231260133364227248928492574610248881137364204914001412269740461851747883355414968499272944590071623223603501698004227753335552646715567802825755799597955409228004284739743749531270833084850113574712041224896044525292591264637452797151098802604186311724597450780520140413704697374209653369969451501627583467893160412780732575085846467289134920886789952338174193202234175299652687560232593212131693456966318670843605238958724126368185289703563591477049105538528244632434869965333722691837462591128379816582723367039674028619947057144546</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">base10</span>(<span class="hljs-params">ss</span>):<br>    r = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> ss[::-<span class="hljs-number">1</span>]:<br>        r = r * <span class="hljs-number">10</span> + x<br>    <span class="hljs-keyword">return</span> r<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">ps, qs, mod</span>):<br>    <span class="hljs-keyword">if</span> base10(ps) * base10(qs) == n:<br>        <span class="hljs-keyword">yield</span> base10(ps), base10(qs)<br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">for</span> pp, qq <span class="hljs-keyword">in</span> product((<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>), (<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>)):<br>        p = base10(ps + [pp])<br>        q = base10(qs + [qq])<br>        <span class="hljs-keyword">if</span> p * q % mod == n % mod:<br>            <span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> dfs(ps + [pp], qs + [qq], mod * <span class="hljs-number">10</span>)<br><br>p, q = <span class="hljs-built_in">next</span>(dfs([], [], <span class="hljs-number">1</span>))<br>phi = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br>d = <span class="hljs-built_in">pow</span>(e, -<span class="hljs-number">1</span>, phi)<br>m = <span class="hljs-built_in">pow</span>(ciphertext, d, n)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br><span class="hljs-comment"># XYCTF&#123;7f4b2241951976ce5ef6df44503209059997e5085d1bc21f6bef4d9effb29fd0&#125;</span><br></code></pre></td></tr></table></figure><h2 id="crypto-factor3">Crypto-factor3</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> random<br><br>flag = <span class="hljs-string">b&#x27;XYCTF&#123;*****&#125;&#x27;</span><br>m = bytes_to_long(flag)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gainPrime</span>():<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>x = random.getrandbits(<span class="hljs-number">256</span>)<br>y = random.getrandbits(<span class="hljs-number">256</span>)<br><span class="hljs-keyword">if</span> y % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br><span class="hljs-keyword">continue</span><br>p = x ** <span class="hljs-number">3</span> + <span class="hljs-number">3</span> * y ** <span class="hljs-number">3</span><br><span class="hljs-keyword">if</span> p.bit_length() == <span class="hljs-number">768</span> <span class="hljs-keyword">and</span> p % <span class="hljs-number">2</span> == <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> isPrime(p):<br><span class="hljs-keyword">return</span> p<br><br>p, q = gainPrime(), gainPrime()<br>N = p * q<br>phi = (p ** <span class="hljs-number">2</span> + p + <span class="hljs-number">1</span>) * (q ** <span class="hljs-number">2</span> + q + <span class="hljs-number">1</span>)<br>d = getPrime(<span class="hljs-number">320</span>)<br>e = inverse(d, phi)<br>c = d**<span class="hljs-number">2</span>^m<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;N: <span class="hljs-subst">&#123;N&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;e: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;c: <span class="hljs-subst">&#123;c&#125;</span>&quot;</span>)<br><br>  <br><br>N: <span class="hljs-number">913125842482770239379848062277162627509794409924607555622246822717218133091223291889541294440266178282194506242444509803611492259403578922020590849630191477864719052980160940803309686069818208833547621252544423652489179493083138385424424384165228024273745733240109761707533778691158938848158094054261174692601673435971526522219273943464877956131040249169850420336023942653021547841666224446678539579529590840999008107782784268926145671962239929431694391039559247</span><br><br>e: <span class="hljs-number">494518390582436635999115147756676313570637682518235195828939117782099618734167908630788943568232122157772909140885391963441876427590731524706959546524212914108888799081844320513851526790475333924396837458796755678072486028072639014677580265244176441153444956871730684233063789931539669072735599696830757690822185323538738397827461580678488181113667710378657058297572328491762536595872579603698945272140918157163640403488075948987156585480146162739943419183496337465468187233821931312507662218106713861638334075899266373256620752680354704533272722692596941861606161634082613228896420520465402725359166156632884432690715903666803067996854084671477445131853993177110154928274312496230096270510089973592664248613332000290545537840595645944390047611474888693558676781309912289044962293014118087259307560444929227407113819165713213046898243995956550944640168932947118400215917515277554126694376415569909534496134700668701465649939</span><br><br>c: <span class="hljs-number">4450931337369461482106945992542133557585962894030505065110870389112565329875502952762182372926117037373210509516570958483606566274369840551132381128665744266165792377925899683228751870742727716</span><br></code></pre></td></tr></table></figure><p>依然是e很大，考虑使用WienerAttack——因为勒让德定理，我们知道只要保证对于 <spanclass="math inline">\(\phi(N)\)</span>的近似足够精确，连分数就可以覆盖到 <spanclass="math inline">\(\frac{k}{d}\)</span> ，所以这里我们参照代码中<span class="math inline">\(\phi(N)\)</span> 的结构，构造exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><br>e=<span class="hljs-number">494518390582436635999115147756676313570637682518235195828939117782099618734167908630788943568232122157772909140885391963441876427590731524706959546524212914108888799081844320513851526790475333924396837458796755678072486028072639014677580265244176441153444956871730684233063789931539669072735599696830757690822185323538738397827461580678488181113667710378657058297572328491762536595872579603698945272140918157163640403488075948987156585480146162739943419183496337465468187233821931312507662218106713861638334075899266373256620752680354704533272722692596941861606161634082613228896420520465402725359166156632884432690715903666803067996854084671477445131853993177110154928274312496230096270510089973592664248613332000290545537840595645944390047611474888693558676781309912289044962293014118087259307560444929227407113819165713213046898243995956550944640168932947118400215917515277554126694376415569909534496134700668701465649939</span><br>n=<span class="hljs-number">913125842482770239379848062277162627509794409924607555622246822717218133091223291889541294440266178282194506242444509803611492259403578922020590849630191477864719052980160940803309686069818208833547621252544423652489179493083138385424424384165228024273745733240109761707533778691158938848158094054261174692601673435971526522219273943464877956131040249169850420336023942653021547841666224446678539579529590840999008107782784268926145671962239929431694391039559247</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ContinuedFraction</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, numerator, denumerator</span>):<br>        self.numberlist = []  <span class="hljs-comment"># number in continued fraction</span><br>        self.fractionlist = []  <span class="hljs-comment"># the near fraction list</span><br>        self.GenerateNumberList(numerator, denumerator)<br>        self.GenerateFractionList()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">GenerateNumberList</span>(<span class="hljs-params">self, numerator, denumerator</span>):<br>        <span class="hljs-keyword">while</span> numerator != <span class="hljs-number">1</span>:<br>            quotient = numerator // denumerator<br>            remainder = numerator % denumerator<br>            self.numberlist.append(quotient)<br>            numerator = denumerator<br>            denumerator = remainder<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">GenerateFractionList</span>(<span class="hljs-params">self</span>):<br>        self.fractionlist.append([self.numberlist[<span class="hljs-number">0</span>], <span class="hljs-number">1</span>])<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(self.numberlist)):<br>            numerator = self.numberlist[i]<br>            denumerator = <span class="hljs-number">1</span><br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i):<br>                temp = numerator<br>                numerator = denumerator + numerator * self.numberlist[i - j - <span class="hljs-number">1</span>]<br>                denumerator = temp<br>            self.fractionlist.append([numerator, denumerator])<br><br>a = ContinuedFraction(e, n**<span class="hljs-number">2</span>+<span class="hljs-number">2</span>*n*iroot(n,<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>]+n+iroot(n,<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>]+<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> k, d <span class="hljs-keyword">in</span> a.fractionlist:<br>    <span class="hljs-keyword">if</span>(isPrime(d) <span class="hljs-keyword">and</span> d.bit_length()==<span class="hljs-number">320</span>):<br>        <span class="hljs-built_in">print</span>(d)<br><br><span class="hljs-comment"># d = 2109723047551375043305134722302342646596769444055829710618826161103186815230448177424794300667429</span><br></code></pre></td></tr></table></figure><h2 id="crypto-complex_dlp">Crypto-Complex_dlp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secrets <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Complex</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, re, im</span>):<br>        self.re = re<br>        self.im = im<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__mul__</span>(<span class="hljs-params">self, c</span>):<br>        re_ = self.re * c.re - self.im * c.im<br>        im_ = self.re * c.im + self.im * c.re<br>        <span class="hljs-keyword">return</span> Complex(re_, im_)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> self.im == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(self.re)<br>        <span class="hljs-keyword">elif</span> self.re == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">abs</span>(self.im) == <span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;<span class="hljs-string">&#x27;-&#x27;</span> <span class="hljs-keyword">if</span> self.im &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;&#x27;</span>&#125;</span>i&quot;</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.im&#125;</span>i&quot;</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.re&#125;</span> <span class="hljs-subst">&#123;<span class="hljs-string">&#x27;+&#x27;</span> <span class="hljs-keyword">if</span> self.im &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;-&#x27;</span>&#125;</span> <span class="hljs-subst">&#123;<span class="hljs-built_in">abs</span>(self.im)&#125;</span>i&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">complex_pow</span>(<span class="hljs-params">c, exp, n</span>):<br>    result = Complex(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">while</span> exp &gt; <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">if</span> exp &amp; <span class="hljs-number">1</span>:<br>            result = result * c<br>            result.re = result.re % n<br>            result.im = result.im % n<br>        c = c * c<br>        c.re = c.re % n<br>        c.im = c.im % n<br>        exp &gt;&gt;= <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> result<br><br>flag = flag.strip(<span class="hljs-string">b&quot;XYCTF&#123;&quot;</span>).strip(<span class="hljs-string">b&quot;&#125;&quot;</span>)<br>p = <span class="hljs-number">1127236854942215744482170859284245684922507818478439319428888584898927520579579027</span><br>g = Complex(<span class="hljs-number">3</span>, <span class="hljs-number">7</span>)<br>x = bytes_to_long(flag)<br><span class="hljs-built_in">print</span>(complex_pow(g, x, p))<br><span class="hljs-comment"># 5699996596230726507553778181714315375600519769517892864468100565238657988087817 + 198037503897625840198829901785272602849546728822078622977599179234202360717671908i</span><br></code></pre></td></tr></table></figure><p>复数域上的DLP。看到题目我的第一反应是把复数看作二维矩阵，这样就可以转化到实数域上的矩阵DLP，然后将矩阵变换为Jordan标准型就可以愉快地一维DLP了——但是实操后发现题目的复数对应的矩阵特征值有0，导致Jordan标准型并不容易求得。其实在题目要求的离散对数的同余模等式两边取模长就可以很轻松地处理为实数域上的DLP，但是我一时没想到模N的完全剩余系对加法和乘法封闭，反而一直在考虑如何在扩域上继续尝试求解Jordan标准型。直到我开始考虑另一道Complex_RSA的时候我才想到取模长的方法——想到这里就迎刃而解,而此时距离我第一次尝试本题已经过去3天了。exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>g = <span class="hljs-number">3</span>^<span class="hljs-number">2</span>+<span class="hljs-number">7</span>^<span class="hljs-number">2</span><br>c = <span class="hljs-number">5699996596230726507553778181714315375600519769517892864468100565238657988087817</span>^<span class="hljs-number">2</span> + <span class="hljs-number">198037503897625840198829901785272602849546728822078622977599179234202360717671908</span>^<span class="hljs-number">2</span><br>p = <span class="hljs-number">1127236854942215744482170859284245684922507818478439319428888584898927520579579027</span><br><span class="hljs-built_in">print</span>(long_to_bytes(discrete_log(mod(c,p),mod(g,p))))<br><span class="hljs-comment"># b&#x27;___c0mp13x_d1p_15_3@5y_f0r_y0u___&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="crypto-lcg_and_hnp">Crypto-LCG_and_HNP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> secrets <span class="hljs-keyword">import</span> flag<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LCG</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, seed, a, b, p</span>):<br>        self.seed = seed<br>        self.a = a<br>        self.b = b<br>        self.p = p<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">next</span>(<span class="hljs-params">self</span>):<br>        self.seed = (self.seed * self.a + self.b) % self.p<br>        <span class="hljs-keyword">return</span> self.seed &gt;&gt; (self.p.bit_length() - <span class="hljs-number">8</span>)<br><br><br>m = bytes_to_long(flag)<br>p = getPrime(<span class="hljs-number">128</span>)<br>a = random.randint(<span class="hljs-number">1</span>, p)<br>b = random.randint(<span class="hljs-number">1</span>, p)<br>seed = random.randint(<span class="hljs-number">1</span>, p)<br>out = []<br>lcg = LCG(seed, a, b, p)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">30</span>):<br>    out.append(lcg.<span class="hljs-built_in">next</span>())<br>key = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    key += <span class="hljs-built_in">str</span>(lcg.<span class="hljs-built_in">next</span>())<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(key) &gt;= m:<br>        <span class="hljs-keyword">break</span><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;out.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(<span class="hljs-string">f&quot;p=<span class="hljs-subst">&#123;p&#125;</span>\n&quot;</span>)<br>    f.write(<span class="hljs-string">f&quot;a=<span class="hljs-subst">&#123;a&#125;</span>\n&quot;</span>)<br>    f.write(<span class="hljs-string">f&quot;b=<span class="hljs-subst">&#123;b&#125;</span>\n&quot;</span>)<br>    f.write(<span class="hljs-string">f&quot;out=<span class="hljs-subst">&#123;out&#125;</span>\n&quot;</span>)<br>    f.write(<span class="hljs-string">f&quot;c=<span class="hljs-subst">&#123;<span class="hljs-built_in">int</span>(key)^m&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>泄露了30轮的seed的高位。泄露的高位非常少，直觉告诉我是用不了CopperSmith的，遂研究了下格攻击。罗列一下我们知道的信息。记每一轮中已知的高位为 <spanclass="math inline">\(h_i\)</span> ，未知的低位为 <spanclass="math inline">\(l_i\)</span> ，我们有 <spanclass="math display">\[(h_i+l_i)\equiv (a*(h_{i-1}+l_{i-1})+b)\bmodp\]</span> 然后递推一下： <span class="math display">\[\begin{aligned}&amp; \left(h_2+l_2\right) \equiv a *\left(h_1+l_1\right)+b(\bmod m) \\&amp; l_2 \equiv a * l_1+a * h_1+b-h_2(\bmod m) \\ &amp; l_2 \equiv A_1* l_1+B_1(\bmod m) \text { 【设 } A_1=a ; B_1=a * h_1+b-h_2 \text { 】 }\\ &amp; l_3 \equiv a * l_2+a * h_2+b-h_3(\bmod m) \\ &amp; l_3 \equiv a* A_1 * l_1+a * B_1+a * h_2+b-h_3(\bmod m) \\ &amp; l_3 \equiv A_2 *l_1+B_2(\bmod m) \text { 【设 } A_2=a * A_1 ; B_2=a * B_1+a * h_2+b-h_3\text { 】 }\end{aligned}\]</span> 想恢复seed可以先考虑恢复 <spanclass="math inline">\(l_1\)</span> ，我们需要一个线性组合后能组合出<span class="math inline">\(l_1\)</span> 的格基。 那么构造格M如下 <spanclass="math display">\[M=\left[\begin{array}{cccccc}m &amp; &amp; &amp;&amp; &amp; \\ &amp; m &amp; &amp; &amp; &amp; \\ &amp; &amp; \ddots&amp; &amp; &amp; \\ &amp; &amp; &amp; m &amp; &amp; \\ A_1 &amp; A_2&amp; \ldots &amp; A_{29} &amp; 1 &amp; \\ B_1 &amp; B_2 &amp; \ldots&amp; B_{29} &amp; 0 &amp; 2^{128}\end{array}\right]\]</span>对M进行LLL攻击，就有可能覆盖到一个形如 <spanclass="math inline">\([l_2,l_3,\dots,l_30,l_1,2^{128}]\)</span>的向量v（容易看出v在M的行向量构成的格内且v的长度并不很大）</p><p>取得 <span class="math inline">\(l_1\)</span>之后就可以恢复seed：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs Python">p=<span class="hljs-number">183640370379099520304414468793633666661</span><br>a=<span class="hljs-number">36108041497607074474855679331694767924</span><br>b=<span class="hljs-number">65925932211985158779695144876342622462</span><br><br>h = [<span class="hljs-number">0</span>, <span class="hljs-number">34</span>, <span class="hljs-number">95</span>, <span class="hljs-number">100</span>, <span class="hljs-number">114</span>, <span class="hljs-number">16</span>, <span class="hljs-number">23</span>, <span class="hljs-number">17</span>, <span class="hljs-number">118</span>, <span class="hljs-number">115</span>, <span class="hljs-number">29</span>, <span class="hljs-number">73</span>, <span class="hljs-number">47</span>, <span class="hljs-number">12</span>, <span class="hljs-number">133</span>, <span class="hljs-number">78</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">73</span>, <span class="hljs-number">87</span>, <span class="hljs-number">15</span>, <span class="hljs-number">85</span>, <span class="hljs-number">47</span>, <span class="hljs-number">20</span>, <span class="hljs-number">136</span>, <span class="hljs-number">6</span>, <span class="hljs-number">106</span>, <span class="hljs-number">74</span>, <span class="hljs-number">27</span>, <span class="hljs-number">116</span>, <span class="hljs-number">8</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(h)):<br>    h[i] &lt;&lt;= <span class="hljs-number">120</span><br>A = [<span class="hljs-number">1</span>]<br>B = [<span class="hljs-number">0</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(h)-<span class="hljs-number">1</span>):<br>    A.append(a*A[i-<span class="hljs-number">1</span>] % p)<br>    B.append((a*B[i-<span class="hljs-number">1</span>]+a*h[i]+b-h[i+<span class="hljs-number">1</span>]) % p)<br>A = A[<span class="hljs-number">1</span>:]<br>B = B[<span class="hljs-number">1</span>:]<br><br><br>M = matrix(ZZ, <span class="hljs-number">31</span>, <span class="hljs-number">31</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">29</span>):<br>    M[i, i] = p<br>    M[<span class="hljs-number">29</span>, i] = A[i]<br>    M[<span class="hljs-number">30</span>, i] = B[i]<br>    M[i, <span class="hljs-number">29</span>] = M[i, <span class="hljs-number">30</span>] = <span class="hljs-number">0</span><br>M[<span class="hljs-number">29</span>, <span class="hljs-number">29</span>] =  <span class="hljs-number">1</span><br>M[<span class="hljs-number">30</span>, <span class="hljs-number">30</span>] = <span class="hljs-number">2</span>^<span class="hljs-number">128</span><br>M[<span class="hljs-number">29</span>, <span class="hljs-number">30</span>]= <span class="hljs-number">0</span><br><br><br><span class="hljs-comment"># print(M.LLL())</span><br><span class="hljs-comment"># 2^128 = 340282366920938463463374607431768211456</span><br>l1 = <span class="hljs-number">624231359211481698145444691346758315</span><br>h1 = h[<span class="hljs-number">1</span>]<br>s1 = l1+h1<br><span class="hljs-comment">#s1 = a*seed+b %p</span><br>seed = ((s1 - b)*inverse_mod(a,p))%p<br><span class="hljs-built_in">print</span>(seed)<br><span class="hljs-comment"># seed=98265113854859913689289076942864611315</span><br></code></pre></td></tr></table></figure><h2 id="crypto-fakersa">Crypto-fakeRSA</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>flag = <span class="hljs-string">b&#x27;XYCTF&#123;******&#125;&#x27;</span><br>n = ZZ(bytes_to_long(flag))<br>p = getPrime(<span class="hljs-built_in">int</span>(<span class="hljs-number">320</span>))<br><span class="hljs-built_in">print</span>(p)<br><br>G = Zmod(p)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">function</span>(<span class="hljs-params">X, Y, Z</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">part</span>(<span class="hljs-params">a, b, c</span>):<br>        <span class="hljs-keyword">return</span> vector([<span class="hljs-number">9</span> * a - <span class="hljs-number">36</span> * c, <span class="hljs-number">6</span> * a - <span class="hljs-number">27</span> * c, b])<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">parts</span>(<span class="hljs-params">n</span>):<br>        Gx.&lt;a, b, c&gt; = G[]<br>        <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span>: <span class="hljs-keyword">return</span> vector([a, b, c])<br>        mid = parts(n // <span class="hljs-number">2</span>)<br>        result = mid(*mid)<br>        <span class="hljs-keyword">if</span> n % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>: <span class="hljs-keyword">return</span> result<br>        <span class="hljs-keyword">else</span>: <span class="hljs-keyword">return</span> part(*result)<br>    <span class="hljs-keyword">return</span> parts(n)(X, Y, Z)<br><br><span class="hljs-built_in">print</span>(function(<span class="hljs-number">69</span>, <span class="hljs-number">48</span>, <span class="hljs-number">52</span>))<br><br><br><span class="hljs-comment">#1849790472911267366045392456893126092698743308291512220657006129900961168811898822553602045875909</span><br><span class="hljs-comment">#(1431995965813617415860695748430644570118959991271395110995534704629241309597572003500157255135707, 1011565891130611736600822618382801465506651972373410962205810570075870804325974377971089090196019, 784497518859893244278116222363814433595961164446277297084989532659832474887622082585456138030246)</span><br><br></code></pre></td></tr></table></figure><p>将矩阵处理成Jordan标准型即可。思路不难，主要是不了解题目中的代码写法技巧，最终通过几次实验推测出了题目要求。实际上题目要求的是满足 <spanclass="math inline">\(A^{flag}\times\beta=\gamma\)</span> 的flag值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>p = <span class="hljs-number">1849790472911267366045392456893126092698743308291512220657006129900961168811898822553602045875909</span><br>A = [[<span class="hljs-number">9</span>,<span class="hljs-number">0</span>,-<span class="hljs-number">36</span>],[<span class="hljs-number">6</span>,<span class="hljs-number">0</span>,-<span class="hljs-number">27</span>],[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>]]<br>n = <span class="hljs-number">3</span><br>G = matrix(GF(p), n, n, A)<br>G_Jor, P = G.jordan_form(transformation=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(G_Jor)<br>X=[<span class="hljs-number">69</span>,<span class="hljs-number">48</span>,<span class="hljs-number">52</span>]<br>Y=[<span class="hljs-number">1431995965813617415860695748430644570118959991271395110995534704629241309597572003500157255135707</span>,<span class="hljs-number">1011565891130611736600822618382801465506651972373410962205810570075870804325974377971089090196019</span>,<span class="hljs-number">784497518859893244278116222363814433595961164446277297084989532659832474887622082585456138030246</span>]<br>G_2=(~P*matrix(GF(p),<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,X))<br>G_3=(~P*matrix(GF(p),<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,Y))<br><br>x_2=GF(p)(G_2[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>])<br>x_3=GF(p)(G_2[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>])<br>y_2=GF(p)(G_3[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>])<br>y_3=GF(p)(G_3[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>])<br>a_1=y_3/x_3<br>a_2=a_1/GF(p)(<span class="hljs-number">3</span>)<br>flag=(y_2-a_1*x_2)/(a_2*x_3) <br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">int</span>(flag)))<br><span class="hljs-comment"># b&#x27;XYCTF&#123;y0u_finally_f0und_t3h_s3cr3ts!!&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="crypto-random_rr">Crypto-Random_rr</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br>flag=<span class="hljs-string">b&#x27;XYCTF&#123;uuid&#125;&#x27;</span><br>flag = bytes_to_long(flag)<br>n = <span class="hljs-number">472993274721871037103726599805149366727531552333249750035977291933239067588481589544777397613192273114354221827196579379954069925604091911249655707080927769808587176515295614018992848517984372306879552247519117116110554431341268358177159108949791969262793325836353834899335531293329721598226413212541536002401507477776699642647348576111445702197483449777741566350285229621935507081895389023444249054515395783080003733803406382744631528246608154546123270319561514117323480441428953306734274538511770278887429407127143049023747710881993279361892937905382946820141513009017756811296722630617325141162244806884220212939955235410280899112731530527048274396186038160728562551536558223235783656985493518204710943916486379681906506757757594165379493317173050550893487151879681122510523721157284728808336110950008840684602353984682117748018347433177541603140491131603068512706893984834735290809952944273565203183330739252949245209529232254867201402656024997949207918675051941911990640248052951780195402390132237903538546705181463959793972284823588987652138458328270662652334799233015314673544813649692428544375538627858921763941533600553536579901589575693816746953261108022490849251974419402753031545629158199093099096735356165044275617408697</span><br>rr = <span class="hljs-number">11898141078345200236264081467585899457224809417108457314508072413792599039332439547789237898270544336909458761754683941320649771736625000667170176071314483</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate</span>():<br>    fw = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;random&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">648</span>):<br>        fw.write(<span class="hljs-built_in">str</span>(random.getrandbits(<span class="hljs-number">32</span>))+<span class="hljs-string">&quot;\n&quot;</span>)<br>    fw.close()<br>generate()<br>key = <span class="hljs-built_in">str</span>(random.getrandbits(<span class="hljs-number">32</span>))<br>key1= <span class="hljs-built_in">int</span>(<span class="hljs-built_in">str</span>(key)[<span class="hljs-number">0</span>])<br>ks = [randint(<span class="hljs-number">0</span>, rr**(i+key1-<span class="hljs-number">1</span>)) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)]<br>c1 = <span class="hljs-built_in">pow</span>(<span class="hljs-built_in">sum</span>(k*flag**i <span class="hljs-keyword">for</span> i, k <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(ks)), <span class="hljs-number">127</span>, n)<br>c2 = <span class="hljs-built_in">pow</span>(flag, <span class="hljs-number">65537</span>, n)<br>ks = [<span class="hljs-built_in">pow</span>(<span class="hljs-number">69</span>, k+key, rr**(i+key1)) <span class="hljs-keyword">for</span> i, k <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(ks)]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;ks = &#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;c1 = &#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;c2 = &#125;</span>&quot;</span>)<br><span class="hljs-comment"># key = 3168111950</span><br></code></pre></td></tr></table></figure><p>Python内置的随机数发生器是MT19937，因此获取输出的624个32bit随机数就可以探明随机数发生器的内部状态从而预测随后所有的随机数序列。</p><p>此时拿到了key，接下来只要恢复中间使用的ks，再对前面两个式子做gcd就可以了。我不确定能否直接用randcrack预测ks去恢复，所以选择从最后一个式子里恢复ks，需要处理dlp。</p><p>最后一个式子的模数形式比较特别，可以用p-adic的discrete_log去求解dlp。感谢maple佬的<ahref="https://blog.maple3142.net/2022/06/06/seetf-2022-writeups">blog</a>，又学到了新的数学处理手法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> *<br><br>n = <span class="hljs-number">472993274721871037103726599805149366727531552333249750035977291933239067588481589544777397613192273114354221827196579379954069925604091911249655707080927769808587176515295614018992848517984372306879552247519117116110554431341268358177159108949791969262793325836353834899335531293329721598226413212541536002401507477776699642647348576111445702197483449777741566350285229621935507081895389023444249054515395783080003733803406382744631528246608154546123270319561514117323480441428953306734274538511770278887429407127143049023747710881993279361892937905382946820141513009017756811296722630617325141162244806884220212939955235410280899112731530527048274396186038160728562551536558223235783656985493518204710943916486379681906506757757594165379493317173050550893487151879681122510523721157284728808336110950008840684602353984682117748018347433177541603140491131603068512706893984834735290809952944273565203183330739252949245209529232254867201402656024997949207918675051941911990640248052951780195402390132237903538546705181463959793972284823588987652138458328270662652334799233015314673544813649692428544375538627858921763941533600553536579901589575693816746953261108022490849251974419402753031545629158199093099096735356165044275617408697</span><br>rr = <span class="hljs-number">11898141078345200236264081467585899457224809417108457314508072413792599039332439547789237898270544336909458761754683941320649771736625000667170176071314483</span><br>ks = [<span class="hljs-number">1462227062794249126369859823370329795444295554631867449122519463903085153603985900680740216206168716423777588580245877886440288748604020630699018542826979566965387039050150069523167528973701117587082189067128448763762233651697690088165126309640643249893980922783446939093480513501423929380273397400708296781344423099729594996935151205635124630966978346265570102760841188859706856157965455490428917432012469015925570881840242441646984344205989934223312311722527845</span>, <span class="hljs-number">17436088264981004997841810232705191434707487036117316568031039310756229463817709762330626096875057666532776781413031682988478368320631200639484646124749334955850093397553177978996330881043557698983399584498223222105144624884205328876488334329130830465297477669138121963831402080876078357077714205039964108868193841782271495425644463200232523492344001660692840819160127541347575190224749912289543698786833926857916729347030739521501971908837887266088602825603179428932500122868635833564921115729380769315969449959847532694279060981180556955413680421245680949817931938812637093078177255366095925596232172597647804659446</span>, <span class="hljs-number">169559415577702492912881115171844374594897133030580223300760597578879930554761809414648409965790290108683744070236827542547112767931390381215817208191241194452401715396697138137182840759511035487717013487364495797652031544286820278750675326239062595892448739046788242584477837603604028584783800711126256213550041835365566067529075264741159242623075137208552904103323636912832758118607742414554050834861661347524996361121876885982545956793412777613516967651789645670837406737788560923095674100190720996844931263803247711890541497769408802573382496173181275896304033554412089516486158308042512557770316390458745235174270820619821158359708588836275104941171089532593072639298996037834372691067497283819036389853616602440038642702961597540965107104661813887585271108258467582</span>, <span class="hljs-number">353291124480685802122760873619558181197925748758526501461956322344713145481696018545548833112663130052221102526199589136442461136617134139228771440873303781403752812631064169836368616974931324935659661616432397250323791027357698736360780111349622044193849460721756463896782586060025792712427344165223388631274105033257953386232975622550466772244070538660725769821337872161112606157590652531598571409049763994992112562965984307203582687185746063109802744989804265169651236595150092278455325980064053498109201539606445526852506504951020231421164201055246981085535835484260199043182412639045612970769228962343363308833437852540654614315024696428638587640053405690902605225272716392141318356689485996722112797193445203157167283359129296847476836010747322296658815494204920904679373943240361056289263055689989853602794079068762252790541020355479732830748629340531275553956346072236216251442369981439899969148055895199797337493316</span>, <span class="hljs-number">15179303239962972288090709923258186951958171456436855682777477692171617505348532247047242658368307257431505429176030938743052282481669819891838891541215477308429612423006023438195430836574000543742809228546430000091179899316856488547218901706415026288318088205302049807334703045024896255849147262301854988225565498235577522563864689394270282449494777293613090615435735306391538191861818216934248371120219493426168505800995544058108910908179783162033445093246274431640068273309491502382851514221655427718436104350319852529981208352415296770552441024164515192550794244703092453886081781025084452892498434750021938722777929757172650087934502975720197724550995892550276217204632074271485875928952811717435969392225184804651569530492559664256153442664382496786312755369567453642365570522203867667064702855064117777248996452839510530112258447365219153330364325480082364302480271013963043808407808026617207478317657335771085499907980998058580300198585325142615450209133083897393551483195987009899057506802305527262738968147264513649676062280043385168050292062437784343481003416836360329</span>, <span class="hljs-number">104314025112423274137233712089887942843544143270638359212971052274128269239471444157192816218808079846611202214084249469627150795706839411653429768726632207799788014550224322493762432406192490957609286668132611092680358220234900446241372261756133560546933898911405464919838498505955386741631220042481687693247513434548162014035705016381807652211578605534090062861927303094187322830394428003720849259122728764020582018050036758593860110512593538102856625101436236685192028585785277359733026956010177985114124809725271266235518425292300207754430093643901348424098723963444965623388363705031341005891153453971749807676104809873756494951980451522602316873491452723525098105304097227244362803315664527459814806074055296007282695273078439762481309737546526713550861490435485841202437290236273820499123268038887900937637888673263245804550050225236201356152470642062093953920448272200600863673489805148880500648543349624355627609552339313652249538084845763001317045938369921466480729660920730443079784782692236767617383867121962635468379178835807692901877341892412552450901873955386866840632105626000662355131829735238309392134598804443268332424263236647235664725585301289855948091012922650578186399459695913486992557308313400835129903295472</span>, <span class="hljs-number">4343840077241661846268935044680587301922553038527003445558194299629246437770144538620877381238906692028249854972040151877119476048349008469539245051594012783879085195059417005760769680951795800991838280644405366143799108863486512837967757384337716585187068737628553329955797218927948991807398217726158890043209786493155396314350961622153611660511283644242391666275370968989005241503828383899735010790229677725184129352599961733027673035747501574385230757945287667652891580150423322079486963198642876365246595747082980621374167798723795545482544349625906607527172146616536749758514128592808962495027958181278487153055495228539745094046329616245517171769643273537017191271548980274132500153620316208900769372928143878394476769232210760910446165114726727346459588121745157883051053172477968719246421056145184230282266693069367823549866560055702512612897427682313787206166585448900167833527105055197710187205451619052189815465364328045147326853372540758120163941655690535948810941959546749120505801600233689886118090477238999842117697450804442045413189286597419777550661497797676126492038567180797469427287581550651480006192621101368344597554817693129617367587265330631435038864934907358392135820575836786357021588185619258824320681971817694708190104082162236078675439624893099574428154391060852816948575281188326664739692492957173855447270784701674993602965772572705572236661284175838750276</span>, <span class="hljs-number">33232188464261655563179500532261332740673268011927651630320348613939386668276216461522230721806580297413734568274970935459682942632905228878109266134442095157849521426423087852309281434787500339731212538950209119002423508188676963099974651225610558899243654721531277558550493327350452829753190227897808568073543678269898207509403265336445740620238191925668387207191570780928973245140015529624527394339504110166219539275461482559378890285009329265175900569903390034280071197123026951890243045598372762777194271518734277493717862068019851753397533687634966545727487904367806612431117675184708993348444665119927999157611733751268566184403876833185469516137451908620375918418813671459671015165252098516843945558856771686910403711604755349007547521956309000907909321344073563215005461926587582952949359614987174889724241132421264477252674765866525922832869625858802619129860030857164098812287559445509108640318149480136605636205337149260208047286736509632239281682602528730811378780178290081953095940304361016309200367801327179710042344212586894803008913891990437132132154254944818304511848018157641226316486358816741537666493766664969385708412966038685156129617636758707978377511764106375364810771789547724915964400747168477073598611228354770053945278770974453529085850122110633659583211141893829685722257824029598188511772787791704436267726687275674340238387313917520001746093685584958790950657401396602667943161883455431709467342749040393470692558305012064228847045344065542300917341497880086951027085764240682050347639183710265265174608568581</span>, <span class="hljs-number">444779920211605528457399163778798302264962864500581879449061229089239557061028178632115126869104894859226622560444516783454331855728643653865605416497057611218192216553619406318123596530221714071025603907837449777716507496519968322248412164964314856154515711925650355367893348523307966596574094376371033024957143232394835676102505384939927310874548633276763683911796494980021115548783946752097475837673376331732397502955289357489918575906500096508563791334858578196054364575510262549227364768636710590870090347574179185730720326430135005745433229085504757196383182089273767249820043995239845148428050144582143617569531992315827635029452027206779513658792594533984308575410806115812027902735755703109725290139038156207495514857551309765646867686889984088386887429907974093388131425361751082756577755914020028802552784669428525627343682049455098817841762010840270014859394810253384211716918791183946657609375093285440242734069437770190190813413589772304378568548089845839766313942144795085022405996403115650259032402819679689834193687730312737088900035185810701229565183457677574983602078058685068344436316207621825755389502057132478973466812474466361405511892936227130460055637816125221120263639554189413490859455156262013094121152711225170530206766029467454109467305401401846460468093777715624211347060013862325763649394914935407437210178038317290293919361423759769343159231891689139655490453425886071219512994202371899835337440763173124439640514220811318874946924703189200447691715469272243497270647235873464259786562267062001636730421451659510209634262617060501219332722128011149714434675517928550498574212874429311999930642838137400894349532393752915440919307741932816838690395606129263401130</span>, <span class="hljs-number">7602657349299010857087412189053904610014835470031847851883656349200899897074907434799227128793882909815738193292999732731888978083302895341590290406257165745016960805038897127665671830799203429105439046544232550057709873279272509500788880966204623301536523568757142788616714342396835348896652095993273120352216558215593487864297089604696564960677302089801831232789103069985778444311388865194583877243016764859298874263207514989622286824950955134805871171552294553075628653085978727480483509447782713038101591216015129434695340034230885326874585545666722007375755217543974918948104058213162198622707539613172458718150254646150294432030411829433714905174414616923009739539225989262351006787760054622647363592552091025438151580366414103445836645659713990402360169403016672502089016488614454624878982485618028646781661937237681350359808210590576468884385972827124881157769458685969004277110291444619196405001534224888721294643753150729204059438079951844348808565383170513314781032113884141668626087014977362543472261224194658720773278314480331562064521903562028929772245246023044918780612944818960063465178711539798601604042918647125400052489298307932451350609822767956789584605169244797260390089496546479886501231620453426723358141585623383732719446553408376039010770786422589076208046136110959032740167791347231308499822725649244370210435390174503003095419480360405606956944343844737311175070859345840892142099028930344584283138344997292575870767828146422997758547138227712103360348602516685557024226449188853398358276132193649977284120887692434143592539192811494203655959855535383027295793357853938962196086241223840647731695273486642076372427955673144634441281545597498351950046381851656586528708237353884336502685431879297832928729212632646314921058694911651155140211366665485536218812420299903213130769617228499207211355651173115373832276702819917</span>, <span class="hljs-number">84264285782731568162877315100957489042921709978064128681351268312087746569277269486245900009777400169887830271723552358655565447593550146955011831050100818215000508691318113595184405583164046098487595114378660143656870174865126611342542042359190092909153954755450866325242940723529598062222899187359928557844177883049590925651498994463750219753412624841866695746278533280094878847475236701017015819139013181859456526369446971330754812310385508018904191327621492159168820784532796330689921699298448074204812463376397381282323119448865011664447416851175564248969000702694318145335362835482058897168517488161967391334177372697703315388808719141005307789457461912851355132825731054246686755461163054191160703614564317990818604434605413936738139726767800963911739280012496306857434637923374480459728565199969705867209254398601345461449150134011614149873500167983320745189254670021733091744167981087834156449345560645456017335407633688885028006913440590401180339340613693275890333649989994343631183579024732181147263210054753733928915807504572214832934722959416211618552311628264441740006263506928574652072303741962304773970001278403931114817733924209744938397932123215729579525983133592585604481836441256004482294972680139829929612014077833332681473454850703790455910234390018139844986977475904490461864701830158535403553678623812164036013559496102371103327886019446045373299153105962515417300141416878319759519389540938146354852993808369804508844242989928184577744636058484630309125804687764207122455205953467056765480238519667329086954915863584834116160428194118255018588109352554311335461224660821734294806261011545470878130619510996578906865491369421849868743287382195889612248362671647411387033198694140556943015854769888065336118318462104334038850907108272666824691321243254155599118711741561988645703051401242347980726593263524750481061186510425684386819376145632247818469939222055128225225680599982324030716227856712465076900465158037591919290264095582887285060549164180202017670962738795868581166749</span>, <span class="hljs-number">86875322477430958180737121081750310417552562568937472111462285494068077044224883282734365519155742412567742579384640688864318774506290688726649362821127869025823526558190891391368772700819437828837459806248988365684079824273784568628472269256575474035185709547347651993828702097549741334374364807937523943589572886556418546138161477442285095981598112603569341799645993286627117775387075506854483018231019196901947857611575841702330988975450215180893407629689116208362182111134678579611569697431926172879405158644545853375597102146456828749129737059398592090470207221930164907529449914731078780527501106015075222892079609819142004929517650214077829963858911041047626149998836986070729125260139028680402532903187215589441565748744974914634384575746331436503499349361029226889115930910170650991829637232214683931349631413139076186550993209917767820494311457665926894684877305970805039969582722809409057884485422798810134923124618610122219627418825157655548696504402394251875250216209088386596839289090205455355830326463145513637140192806838161127837601889645337809125003492037067870634529636104813436961659217629590299188696646907180990318511335172435862882285594729483438730028804396906143686407113299921602779063868388165847291926366314379673487291861917979020712234162374569910970226596823115360201748087179946804305525598669650976080327154187180758461602309422875784085236535569730334773176739598656049048170461638432200220436248431274572686422522379720157015816524948018313551155878299198696729645812418550240418562460968434597425565276688472550697127256796390159826046074365566403255645195972270118195562599397495009632518911353576570958767630794735474661250425256764192128158589944999335063602995713281667673220224066976800182326927451684095263096450327503087613798593569273550869670074927576509772147487168451681956168877773772760560498198909642263656809675890678191288443016329637625633073593034921242604872479828009991046383160941673220022936977188891725330716968754725864852252393788824966035242075304806536640145214252474418277831012513594308952183851343958969850677298051187040013011759593833806518361877966381266531975488250988830914527197364101</span>, <span class="hljs-number">12512746540434506671622137154487272479684301796741804852784466276118318939301642459078381853231258719083628458347218300308117654564963998239910113998177176145693597297093613404613373790353962391872079537076763899617842035568892498763955045462691124784114867824842208398619557012590225397311703746359043524766454656517843775988786861851276648768563329960194176509861369794873055457605566481169738163028805838726245153501259733517437071411250664053003146288253452678594410757071147688309902950173685554263072263315677468119998237322488014934897657616287531839226555887811741614460852594517274931125186552830901907056814814364537922270306184144816527619368461860735029130410855453249885989873125086119053183377748071520492963343904276809950936122217011456932719335145019854799217844683275916251254411759723367406995497382110560047670724344385060716483035502136838796674166618447372318994376720742190789098253575402714952812659933854943786548064525033834188130429821475033759906784746466100360319090217901641302494652036828536156345999295944207311903908579168517843644212223034389569172093947663228241575508427027088548956357607118349234005954956185598117597472201788146015733232957686350215358611056864787006128071212201859644019363381882103578216957110324101802774053325622415064181605199128828290427210592657379567354577480538732546950307498243047731412124485919082022649710227773753299708907420377570860905912772090222116049362619789689065827376289781835174416236170541192824551498867290178284835242340226614885213085297034699023207334693204443834177633980478287732765627349487390651101805889417613406850491982522373652059294595205056982377527663490663856624298132703619405155068989422975395069609806200717991260670611916599446743505075260280455301127997860556855773088502432536965641419712974469765402344889497455850368646912720700712406187148014080534412935202873400913358906387215078903911309526903672652336133008199048483053203616435313691633319058270312626100467991257715266040851461069620411861732977165671779365665772314236597023035647614424138241559672376552675319414807273488451981119673616629216737966281726964723616994609707694019677386869057732381647985259361201436431774138127924914503212637589804812882400769493547225221791707699401249315407469433861394473469478007958068015775562155959407640271035</span>, <span class="hljs-number">8708772086314275150137563047822324600135662221530061604490923488781196834561031216119766508710300439592586098337033648172158478037428422016638015261006654452028325941079516640378163094114359263904509663697697446450829644183714138570138053299079111099978730162273301464139950471846002885912898793623780911069208262571511170830772519224286142285588233365329150597172851602037056835267890472296625561911616145092230018104567552026345101742597268103327522556484095066615892886223565058357363680363535631942614863586767642475310674520180258183502370763782154430809207907408245635540513317210636762204031484268471851140728225200408406477879491421034411771595550287534644492458168126531514396470443302572852034873709549055869547530655956369042654261333529517571359153739442787262860093740661118519451621018435524810049086927689546375333874177211297659402716374232772574921960004351227056283357373573456626553641214672035447396850649297539465342595024155246359918811294045883925114447310675847751632815638598802360958589640694941216735143869543493813631906641446867757344570346832228628926669569641235390679032157550781745139542693343976899951858605641387961226781860479580622706408871423958897669045935376111333791269969907893321496309204776813332733513920276388085041994007557204267637656364577970814757016037506402807507663275686948184629913418881333357288030576799576733495401166943446587740185387874828772125373722620767643073868513719861621143440955960613060364895903611801265463530162601221089578458698304546551933625165213065587195349408747310822367615685148092899114446129224352042234315865770543693346677200293484242331181710417082363209828386909100998998888639900536186820795298321286714108461675397032864388542110213210827364423163325349547591341479159200210127489502278231430650721377665744894470461939053982524090875574789651853588962397719426413835176058841208314719781852021952695059793831541054574871680705012400864629090745303863048197498118155019461006670125137061405464976922277176269488571398394629261276128473896794210626729855368774199524936087915252643083350806653978162434973122894687105799198912067140963567030871513363285565713597188757003358857092315759659368775879258759880919191003344516366609757523241375325301693755640462733509474415702644254270875174073203609818099246161951619877073996976627155333499346477458629618081495288947853190429723736471113704267980053978389993182103772852202476116179106939188158462552458652108321980165243577989</span>, <span class="hljs-number">600670032931697501164308145888014197492570434182237560158362504047400318743985557099146474331125213856150404793770533457208418057346330441677143608228832189090853249915025345091440471977572520377721353552421230209210878714408072035504562082229497678931477951277415656323261513473676851714174232119110952631892409156281805902829840067360861715042158260954202580085062540987292060373485291126788640037325353253582263912429148264582730931166497761524857603024286533377786733733569503217095911870554634981195459051734711257551318783862993538532061516918229242512785148483203666879172553287417202171558010581931339490420944579378230441427075256586289381172933294401587550551868745979621899498946185449116142910195187754784531077545817750030440559239594200572501795505647816820925940699189807911408560014741609936565474163109147615538288077368434085501495660339791023107653834631734799739401195331082524762689829404043854362928974818455326969933539941993127168162613893714556812406931262398133232164550840686759286879519200522303631666340760585955445333243578595829239195345013932609791828394260147075352440178009791316103080071026057431465935054583990885807722362958473601534263884483797804520563080119843829936517581710475224995487406412704094626227661853966476374689727423649602092208013642493973696165953898208578723428386172214500367650457610332358123936218429284291631085293746168516063238704669713654100448973473107547290896972051178145687724778934856166935295480879225802399479077346027327314330339492654814903821691676533513420126315351413897998334933276481425781316933061160336396245725800475529909180155168951048807842776329370733724945778641650510054608686950632422179126803289332576361096595524712081770649946303450447653874189205658344800236157548893404541684986435295108661952487239009695950009496079506381196591935645314690427759872790821975631216132209928929354223296595481820239561580620161078572691513920025180731146443551810374070796784563832569069540610771634802811283644303060748631402280436293606074124845116433560780371614622560694771710506136314406382632695962443912413902134325317328060708301892967007571381754948796760722223816096248930178117187568894324829422197591098693433015570587292619159140504205675563120383480457405492676888099039922054652604691220210221980510833810667665873272200431377635693722100801416566512889633584494029920362450447581541351127279435858414431885445382278645820452301854483001535497815948240428726604118517960146521827602352741617814422650606656703172306618878677224079000419335204662784233051630328692085443396990051814696765167700904476881356841198817297213897315038</span>, <span class="hljs-number">16802200282185468546709956092597774740677661549186109526956115242473121883967931163131646187704424819015848998645400207990914089013740921040117435052153841770979793783160919446710908856026577921822303736856837341534046856200378566367573847587481842033197417244157615430123019293064402352517730950287717412467467865654183120580805017956735624709774788608215096623799957840473617022005811932787883583498153009349216019520591315741115282954188920266939008472763372248700697866120997747281838993436471646694877967037584713292557154069090849429661358360669249141411401563354311865086301325223201338603660585063135197133579821848197298915130533944228373462645556131332664180638837298172981687095294316288287474397100963640912775346092923086826604630609655904543259441330900502644107449819662176812660489691326329405408557397950478553867742426469439899689820127149948041436799921133103166748621889384866646157787616184868217116001323368301878471584588973680319019047080248726830275150507574175166679909676797693790108124055103246880427997452475987304179562314626608037471679968401792562140826537740199515244895441348559877458197387323837253170889409923432265627983693113613925422770696270052261532295092167140744798998616784973950454662490861686686088097664631333759768155114942862532519746034900590201459240562835926241941887144381202153705241903628166984657567323072355632922438685555213721062141830979317585407175747781177680148572415131107678588710821046069788978524572240303124373546329950302755883009871688891897763945611072996185025629828607383345003927868697847599452468428107980542821610672736393669832455756995387290606284835293616942665638848969022879828703775592928644725559259945529304050112289143946763124018433851771902626785481385869955110673938215223622863613678412315324306153440766902206001688838913230436350171971289551619865068519200736270652193304810653015371888594169504114520468603987418351580463962583790787745908309177358777801427510313483309516938585851407176405272323275406264541269998648558076115710572739949113174179063104037408892800012305672645293826133157192205750448664938758484140537975600112928783731131731160554472918720908169457539285420601699964488745103603485765360051670848460168635009550254451173622724686795853530317243637913985666214527422655976232855531815124677038149005239212580323707459514903671850604938595975480625971419288321333482646971954799306704972896590507695031753549266109898497496991269990475759448688581247659517684220339086012734812415537965920455360852739093844076811759759173303373454199660054006117215442176739570999154607921395801738324345694513716171731402600767074759488172948500119306978382635362273371756452203795420879806823382694171689272398990752964743539328906992588078386684970091097095002524822271111900103</span>]<br>c1 = <span class="hljs-number">363788646363430038957594782766177313516930410013028761096125449525352900311987342432332707389678725464245570305442656091083147693929633253905472222223119105496597576680892700795690978029583841539541374381306488238546636925041645743837795052980068923686651284191050257037214462852085566417008362992641640639862428112228493556483476170926590723955399664612288121797929235261679990399185352352544286959163976884867676390120340127790862048627561021372508575978346406322179713972665443056495181281314029605259955375166316993493231524529034376084736285226932730392410446057610167031627686895389188357267336304140707750661551754532703726810046229782522509583068679068266026330534604220136448779670239303044844594369863033342562614954908580980797071779438702134548396966154384817728024762723793272143181635940946334888845065820620182286804643281323447179363272699368386379953273502775010659085362938622805062632668642982294663858335244396163857338508227323801751681995976156487970781553331051080424612021398707159108830544940316009623664909356175231889874464365926612039289520439021685692867423908585449824825323639525381296026274686349117857285659369998795553471936274903352010099265109629071229881541531543477669574187083631324785284254322</span><br>c2 = <span class="hljs-number">408184822131518156560324293475775283916865330287271026174896526350123511666895281956297307670862799857291692050125369779347444868678108319280695068081984027607535529170555137883873801205238074937937942433229726545428621408643537931796698659949811571615439710035675674461716185346635792745790874541046465708604310892716226150611709100803537856333225160587696062166931121471905405372834167788843039506170303362597157739646424300148724721973787617390725217064863182798206515059995025139870581046657455818390197378360718268577414540468313327849155326977072599665355467818781585456624519602844435476444300792593181233725708809256956289242348798772583396011536497809799519543692707372931861510836406771810916160714625641110048105945905698555148489134800297890071585166636593108936219686471652288476546797128397632673886639590166634763861905600305344338904568157848336645918449260801970498973364463883003344546391045331665345600454985730993059182020185438557159428617482719829271986950641093353253897984198499501965120625507862855814501340943227107501804839977088104677785444986972836309787440401273632064782837200999263612507784233705263545942160822597103292282242714942650302979883274746718391358487897324158260429570732440514025523470979</span><br>final = []<br><br><span class="hljs-comment">#part1 dlog by p-adic</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> trange(<span class="hljs-number">16</span>):<br>    R = Zp(rr, prec=i+<span class="hljs-number">3</span>)<br>    x = (R(ks[i]).log() / R(<span class="hljs-number">69</span>).log()).lift()<br>    final.append(x-<span class="hljs-number">3168111950</span>)<br><br><br><br><span class="hljs-comment">#part2 HGCD</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">HGCD</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-number">2</span> * b.degree() &lt;= a.degree() <span class="hljs-keyword">or</span> a.degree() == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br>    m = a.degree() // <span class="hljs-number">2</span><br>    a_top, a_bot = a.quo_rem(x^m)<br>    b_top, b_bot = b.quo_rem(x^m)<br>    R00, R01, R10, R11 = HGCD(a_top, b_top)<br>    c = R00 * a + R01 * b<br>    d = R10 * a + R11 * b<br>    q, e = c.quo_rem(d)<br>    d_top, d_bot = d.quo_rem(x^(m // <span class="hljs-number">2</span>))<br>    e_top, e_bot = e.quo_rem(x^(m // <span class="hljs-number">2</span>))<br>    S00, S01, S10, S11 = HGCD(d_top, e_top)<br>    RET00 = S01 * R00 + (S00 - q * S01) * R10<br>    RET01 = S01 * R01 + (S00 - q * S01) * R11<br>    RET10 = S11 * R00 + (S10 - q * S11) * R10<br>    RET11 = S11 * R01 + (S10 - q * S11) * R11<br>    <span class="hljs-keyword">return</span> RET00, RET01, RET10, RET11<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">GCD</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-built_in">print</span>(a.degree(), b.degree())<br>    q, r = a.quo_rem(b)<br>    <span class="hljs-keyword">if</span> r == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> b<br>    R00, R01, R10, R11 = HGCD(a, b)<br>    c = R00 * a + R01 * b<br>    d = R10 * a + R11 * b<br>    <span class="hljs-keyword">if</span> d == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> c.monic()<br>    q, r = c.quo_rem(d)<br>    <span class="hljs-keyword">if</span> r == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> d<br>    <span class="hljs-keyword">return</span> GCD(d, r)<br><br>PR.&lt;x&gt; = PolynomialRing(Zmod(n))<br>f1 = <span class="hljs-built_in">sum</span>(k*x**i <span class="hljs-keyword">for</span> i, k <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(final))^((<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">7</span>)-<span class="hljs-number">1</span>) - c1<br>f2 = x^((<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">16</span>)+<span class="hljs-number">1</span>) - c2<br>f2 = f2 % f1<br>res = GCD(f1,f2)<br><br>m = -res.monic().coefficients()[<span class="hljs-number">0</span>]<br>flag = long_to_bytes(<span class="hljs-built_in">int</span>(m))<br><span class="hljs-built_in">print</span>(flag)<br><br></code></pre></td></tr></table></figure><h2 id="re-砸核桃">Re-砸核桃</h2><p>本题纯纯的非预期。</p><p>首先查壳发现是北斗壳，上传VT发现首次上传时间是2019年。考虑到这还是个在CTF比赛里出现的crackme，所以很可能是之前某次比赛的题目。以"北斗+crackme"为关键词检索得到<ahref="https://blog.csdn.net/qq_42967398/article/details/94759944">这篇文章</a></p><p>好了，这下就不用手动脱壳了，很容易吧（</p><h2 id="re-今夕是何年">Re-今夕是何年</h2><p>不知道是什么架构的可执行文件，扔VT上看一看发现是Loongarch.其实直接查看链接的库也能发现是Loongarch。</p><p>参照<ahref="https://zhuanlan.zhihu.com/p/626169693">这篇文章</a>配置QEMU环境，运行后获得flag。</p><h2 id="misc-tcpl">Misc-TCPL</h2><p>同样的手法，识别出是RISC-V架构的可执行文件，配置QEMU环境运行即得。</p><p><ahref="https://decaf-lang.github.io/minidecaf-tutorial/docs/step0/riscv_env.html">环境配置方法</a></p><h2 id="misc-zip神之套">Misc-ZIP神之套</h2><p>经典明文攻击，没什么可说的。</p><h2 id="misc-美妙的歌声">Misc-美妙的歌声</h2><p>频谱图里藏有密码，拿去DeepSound解密即可。</p><h2 id="crypto-反方向的密码-情难">*Crypto-反方向的密码 情难</h2><p>啥比题目，flag长度足足有73字节，爆破的范围没覆盖到导致赛场上没解出来。本身是很显然的二元CopperSmith。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs python">N = <span class="hljs-number">26278624299187148406559772770865336226934633734285979741424867540828670397865189685966828527168795621543490979182417570078991930822041468539855006585233692884235331084907340302530060261742100702658312435180527335101284800616106884692498603300926488358017928867672861988448488439356448543527810620591324774111321619391264173779312033252573140028630441135269056099074531502841259940379636699304810677716177080486265721322966814104627525953974143476452058638927511594884002185219080847495835727300670028011001853179659250270200020884333850083063514830095064730932997593930711871108436386821290545084229347398808220810263</span><br>c = <span class="hljs-number">3335299537518434350008670067273514020883265809787658909900831303201069228111667477512288715627313377374377192065531931991830331266940281529429758933125645068623703704431432931062515459304407129764836169638068667723468109909932687335727824459807903558617156661138991973933280805156893120951135488168923425258119689993859896540097318197048436676318334502053269738046279338047497258783747007084564814994803144049365117574904704816542523015746396519693505167963245600047742456478545640334467678554748227823020862550712083249012329745708139070338928730226897923885785783461594034339595106377701306570280371612953393097739</span><br><br><span class="hljs-keyword">import</span> itertools<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">small_roots</span>(<span class="hljs-params">f, bounds, m, d=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> d:<br>        d = f.degree()<br> <br>    R = f.base_ring()<br>    N = R.cardinality()<br>    <br>    f /= f.coefficients().pop(<span class="hljs-number">0</span>)<br>    f = f.change_ring(ZZ)<br> <br>    G = <span class="hljs-type">Sequence</span>([], f.parent())<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m+<span class="hljs-number">1</span>):<br>        base = N^(m-i) * f^i<br>        <span class="hljs-keyword">for</span> shifts <span class="hljs-keyword">in</span> itertools.product(<span class="hljs-built_in">range</span>(d), repeat=f.nvariables()):<br>            g = base * prod(<span class="hljs-built_in">map</span>(power, f.variables(), shifts))<br>            G.append(g)<br> <br>    B, monomials = G.coefficient_matrix()<br>    monomials = vector(monomials)<br> <br>    factors = [monomial(*bounds) <span class="hljs-keyword">for</span> monomial <span class="hljs-keyword">in</span> monomials]<br>    <span class="hljs-keyword">for</span> i, factor <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(factors):<br>        B.rescale_col(i, factor)<br> <br>    B = B.dense_matrix().LLL()<br> <br>    B = B.change_ring(QQ)<br>    <span class="hljs-keyword">for</span> i, factor <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(factors):<br>        B.rescale_col(i, <span class="hljs-number">1</span>/factor)<br> <br>    H = <span class="hljs-type">Sequence</span>([], f.parent().change_ring(QQ))<br>    <span class="hljs-keyword">for</span> h <span class="hljs-keyword">in</span> <span class="hljs-built_in">filter</span>(<span class="hljs-literal">None</span>, B*monomials):<br>        H.append(h)<br>        I = H.ideal()<br>        <span class="hljs-keyword">if</span> I.dimension() == -<span class="hljs-number">1</span>:<br>            H.pop()<br>        <span class="hljs-keyword">elif</span> I.dimension() == <span class="hljs-number">0</span>:<br>            roots = []<br>            <span class="hljs-keyword">for</span> root <span class="hljs-keyword">in</span> I.variety(ring=ZZ):<br>                root = <span class="hljs-built_in">tuple</span>(R(root[var]) <span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> f.variables())<br>                roots.append(root)<br>            <span class="hljs-keyword">return</span> roots<br>    <span class="hljs-keyword">return</span> []<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hash</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> bytes_to_long(hashlib.sha512(x.encode()).digest() * <span class="hljs-number">2</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">boneh_durfee</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Boneh Durfee&#x27;</span>)<br>    P.&lt;x,y&gt; = PolynomialRing(Zmod(N))<br>    <span class="hljs-keyword">for</span> LEN <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">65</span>,<span class="hljs-number">80</span>):<br>        pad_len = <span class="hljs-built_in">hash</span>(<span class="hljs-built_in">str</span>(LEN)).bit_length()<br>        f=(y + <span class="hljs-built_in">hash</span>(<span class="hljs-built_in">str</span>(LEN)) * <span class="hljs-number">2</span>^(<span class="hljs-number">8</span> * (LEN-LEN//<span class="hljs-number">2</span>)) + x*(<span class="hljs-number">2</span>^(pad_len + <span class="hljs-number">8</span> * (LEN//<span class="hljs-number">2</span>))))^<span class="hljs-number">2</span>-c<br>        <span class="hljs-built_in">print</span>(small_roots(f, bounds = (<span class="hljs-number">2</span>^(<span class="hljs-number">8</span>*(LEN//<span class="hljs-number">2</span>)),<span class="hljs-number">2</span>^(<span class="hljs-number">8</span>*(LEN-LEN//<span class="hljs-number">2</span>))), m=<span class="hljs-number">1</span>, d=<span class="hljs-number">4</span>))<br>    <br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    boneh_durfee()<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>Writeups</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nazo之旅</title>
    <link href="/nazo%E4%B9%8B%E6%97%85.html"/>
    <url>/nazo%E4%B9%8B%E6%97%85.html</url>
    
    <content type="html"><![CDATA[<p>第一次听说<ahref="https://nazo.one-story.cn">nazo</a>是在高考后的暑假.彼时因发挥失常而和同学整天吹水聊天,偶然从别人口中得知了这个解谜网站--遗憾的是当时做到一半觉得无聊就搁置了.最近恰逢考完难得的闲暇,干脆就捡起来通一次.</p><h1 id="level-1-3">Level 1-3</h1><p>第一关就让输入答案,然而页面上找不到问题,因此一个自然的思路就是修改URL中的文件路径.将nazo-1中的数字依次修改为2,3,4即可过关.</p><h1 id="level-4">Level 4</h1><p>Level4中继续尝试上述方法会得到失败的结果,因此打开浏览器控制台准备检查元素,然后发现答案直接就写在控制台里<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">answer:</span> level-five<br></code></pre></td></tr></table></figure> 过关.</p><h1 id="level-5">Level 5</h1><p>JavaScript中NaN表示不是任何一个数字的元素,自然不能比较相等与否.输入返回值<code>false</code>,过关.</p><h1 id="level-6">Level 6</h1><p>Level6是4行分行数字,提示为4个字母.我首先考虑到的就是9键键盘,但是尝试输入后没能得到什么有价值的字符--然后发现其实就是单纯的把数字对应到9键键盘上得到的图案.先填入H1I1,不对;后面想到9键下的图案I也许是Z,尝试<code>H1Z1</code>,过关.</p><h1 id="level-7">Level 7</h1><p>显然这一串字母都有Y轴方向的对称轴.填入<code>OTU</code>,过关.</p><h1 id="level-8">Level 8</h1><p>给出了一个颜文字询问"他是谁",搜索得到对应文字为"超人来了".填入<code>superman</code>,过关.</p><h1 id="level-9">Level 9</h1><p>背景色变成了蓝色.直接检查元素得到背景色色号为#66CCFF,输入<code>66CCFF</code>,过关.</p><h1 id="level-10">Level 10</h1><p>倒过来发现要求我们去检查知乎页面的Console Log: <imgsrc="../assets/2023-05-12%2021.11.17.png" alt="看起来长这样" />Hire,按照倒序填入,过关.</p><h1 id="level-11">Level 11</h1><p>给出了一个字符串和一句话"越过长城,走向世界"--得,肯定是要翻墙的.Google了下这个字符串,并没有发现什么有意义的结果(前面大多数页面都是nazo攻略...)</p><p>没办法,总不能点进攻略看吧,提示里说"全世界最大的xx网站",所以目光锁定了GitHub,YouTube和Porn...(大雾)</p><p>GitHub的URL没啥与这个串的相同点,但是YouTube就不同了,观察以下能发现这应该是一个视频的ID:<img src="../assets/2023-05-12%2021.20.05.png" /></p><p>将"v="后面的字段替换为TKw4YRR17dg访问后看到了一个标题为"Nazo-Game:Fantastic"的视频,那么答案应该就是<code>Fantastic</code>了.输入,过关.</p><p>(这个视频还是非公开的视频,作者为了避免被轻易检索到还是有点小心思的)</p><h1 id="level-12">Level 12</h1><p>(40.689241, -74.044515)这个键值对一看就很像经纬度.打开GoogleMap输入,定位到了自由女神像...输入<code>statue_of_liberty</code>,过关.</p><h1 id="level-13">Level 13</h1><p>一段文字缩写,原内容应该是2 Levels Back BGM--两关之前,正好就是Level11的那个视频.评论区告知BGM名称为<code>longhorn</code>,输入,过关.</p><h1 id="level-14">Level 14</h1><p>JumpDollar,也就是<code>Jump $</code>,提示是四个字母且汇编相关(其实不提示也很容易想到是汇编).汇编中$表示PC指向的地址,跳转到当前地址,明显意指循环(loop).输入<code>loop</code>,过关.</p><h1 id="level-15">Level 15</h1><p>空白,提示也是void.尝试输入empty,null等字串均不通过,无奈继续打开控制台检查元素.检索字段<code>answer</code>,在<code>54f001c6bf2b13aa6cf4.js</code>这个脚本中发现了这么一段:<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-attr">mounted</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>                    <span class="hljs-keyword">var</span> t = <span class="hljs-variable language_">this</span>,<br>                        e = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.content-slot&quot;</span>).<span class="hljs-title function_">getBoundingClientRect</span>().<span class="hljs-property">height</span>;<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">footerHeight</span> = e + <span class="hljs-number">120</span>, <span class="hljs-number">18</span> === <span class="hljs-variable language_">this</span>.<span class="hljs-property">levelNum</span>)<br>                        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;keydown&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">t</span>) &#123;<br>                            <span class="hljs-number">90</span> == t.<span class="hljs-property">keyCode</span> &amp;&amp; t.<span class="hljs-property">ctrlKey</span> &amp;&amp; (<span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;./brainfuck&quot;</span>)<br>                        &#125;);<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-number">15</span> === <span class="hljs-variable language_">this</span>.<span class="hljs-property">levelNum</span>)<br>                        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>                            <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-string">&quot;answer: awesome&quot;</span><br>                        &#125;, <span class="hljs-number">3e3</span>);<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-number">4</span> === <span class="hljs-variable language_">this</span>.<span class="hljs-property">levelNum</span>)<br>                        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;answer: level-five&quot;</span>);<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-number">22</span> === <span class="hljs-variable language_">this</span>.<span class="hljs-property">levelNum</span>)<br>                        <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;resize&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">t</span>) &#123;<br>                            t.<span class="hljs-property">target</span>.<span class="hljs-property">innerWidth</span> &lt; <span class="hljs-number">320</span> ? <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.question-text&quot;</span>).<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;TOBORRM&quot;</span> : <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.question-text&quot;</span>).<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;width: 320px;&quot;</span><br>                        &#125;);<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-number">25</span> === <span class="hljs-variable language_">this</span>.<span class="hljs-property">levelNum</span>) &#123;<br>                        <span class="hljs-keyword">var</span> n = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.question-text&quot;</span>).<span class="hljs-property">innerHTML</span>;<br>                        <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span> &lt; <span class="hljs-number">950</span> ? <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.question-text&quot;</span>).<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;答题框被你无情的挤爆了。请在更大的屏幕上观看。&quot;</span> : <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.question-text&quot;</span>).<span class="hljs-property">innerHTML</span> = n,<br>                        <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;resize&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">t</span>) &#123;<br>                            t.<span class="hljs-property">target</span>.<span class="hljs-property">innerWidth</span> &lt; <span class="hljs-number">950</span> ? <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.question-text&quot;</span>).<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;答题框被你无情的挤爆了。请在更大的屏幕上观看。&quot;</span> : <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.question-text&quot;</span>).<span class="hljs-property">innerHTML</span> = n<br>                        &#125;)<br>                    &#125; <span class="hljs-keyword">else</span><br>                        <span class="hljs-number">48</span> === <span class="hljs-variable language_">this</span>.<span class="hljs-property">levelNum</span> &amp;&amp; (<span class="hljs-variable language_">this</span>.<span class="hljs-property">textArray</span>[<span class="hljs-number">0</span>] = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>), <span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>                            t.<span class="hljs-property">textArray</span>[<span class="hljs-number">0</span>] = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>),<br>                            t.$forceUpdate()<br>                        &#125;, <span class="hljs-number">1e3</span>), <span class="hljs-variable language_">this</span>.<span class="hljs-property">textArray</span>[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;空格用_代替&quot;</span>)<br>                &#125;,<br></code></pre></td></tr></table></figure>现在就是第15关,那么答案自然就是<code>awesome</code>了(这里顺便还得到了另外一些关卡的答案...)</p><h1 id="level-16">Level 16</h1><p>看过<生活大爆炸>的对这个问题应该能手到擒来,不过虽然我没看过,但是我在知乎上看到过一篇文章介绍为什么73是bestnumber,输入<code>number73</code>,过关~</p><p>顺便附上知乎上的<ahref="https://www.zhihu.com/question/36276289/answer/553534541">这篇回答</a>额,这个问题似乎被删除了,但是回答还能搜索到...在知乎搜索Sheldon质数+Yifan就可以看到...</p><h1 id="level-17">Level 17</h1><p>题目是"回到原点".这个应该是50关里困扰我时间第二长的一个了(最长的是Level28),原本以为回到原点指的是回到第一关,但是对着第一关的元素和页面脚本看了半个小时也没发现什么东西,尝试输入_start,main,entrypoint等"入口点"也不对,也不是数学中的取模,环等具有周期性的对象...一直这么卡了一个小时左右,摆弄浏览器的菜单栏时,突然看到"撤销"操作,然后想到撤销(Undo)不是也可以"回去"吗,输入<code>Undo</code>,过关...</p><h1 id="level-18">Level 18</h1><p>这一题我其实有点跳坑了.因为我是MacOS用的Safari做题,看到题目又是Undo后,自然想到的是Command+Z的快捷键,结果并没有什么用...无奈又回到Level15中获得的脚本,发现按下<code>Control+Z</code>而不是<code>Command+Z</code>才能到达Level19,即./brainfuck(观察上面我们得到的脚本也能看出答案)</p><h1 id="level-19">Level 19</h1><p>题目是一串看似无意义的符号,其实是URL里提示到的brainfuck这种编程语言.网上找了个在线编译运行网站,拖进去得到输出结果是<code>she</code>.输入,过关.</p><h1 id="level-20">Level 20</h1><p>极客喜欢的玩物且和手表一样大小,看给出的图形应该就是手表.简单检索得知应为MOTO360,输入<code>moto_360</code>,过关.</p><h1 id="level-21">Level 21</h1><p>题目描述说给出的是8x8=64的一部分,图像是2x3的黑白交错的棋盘.不过不知道为啥,我第一反应想到了卷积滑窗,然后心想8x8的卷积滑窗是有什么奇技淫巧吗...后来感觉思路应该是走偏了,于是在打开B站愉快地刷视频(摸鱼)的过程中看到了烂柯杯,进而想到棋盘,进而想到黑白棋盘应该是国际象棋才对.</p><p>2x3的棋盘正好是马的行走范围,输入<code>Knight</code>(国际象棋中马的名称),过关.</p><h1 id="level-22">Level 22</h1><p>看题目描述可以猜测当页面宽度小于320px时应该就会给出答案.继续回到Level15中的脚本,发现答案应该是<code>TOBORRM</code>,输入,过关.</p><h1 id="level-23">Level 23</h1><p>题目还是一个图像,直接以图搜图找到一个名为<code>FSociety</code>的黑客组织,输入,过关.(这里最初我以为是《V字仇杀队》里的经典面具,但是后来发现其实有所区别...)</p><h1 id="level-24">Level 24</h1><p>用过abcjs记录乐谱的同学,或者任何一个有乐理知识的应该都能很快想到这个串对应的是一段音乐.不过我在AbletonLive里试着写了写按abcjs语法得到的乐句,并没有听出什么头绪...eefe这个小二度的进行怎么听都对应不上我脑子中的任何一首乐曲.卡了一阵子之后想到,如果ef等字母对应的其实不是音名,而是相对于某一个根音的偏移量呢?</p><p>改写为556517-&gt;556587(大写A,暗示的可能是跨一个八度,所以1+7=8),试着听了下,这不就是生日歌吗...8个字母,<code>birthday</code>,输入,过关.</p><h1 id="level-25">Level 25</h1><p>很长的一段颜文字,直接Google发现是一种名为AAencode的加密方案,解码后得到console.log('encode').输入<code>encode</code>,过关.</p><h1 id="level-26">Level 26</h1><p>一串数字+空格,还提示10 yearsago,直接考虑是9键输入法,按9键输入后得到<code>feelings</code>,输入,过关.</p><h1 id="level-27">Level 27</h1><p>8个二进制数字,每个长度都为8,观察了一下感觉不是常见的编码,所以还是想到了8x8的卷积滑窗(我是对卷积造了什么孽...)</p><p>但是没有可供输入的矩阵,那么肯定是跟卷积滑窗没啥关系了,于是又想到类似的点灯游戏,试着把1对应的地方涂黑:<img src="../assets/2023-05-12%2022.45.47.png" width = "190" height = "200" alt="吃豆人"/></p><p>然后发现原来是吃豆人游戏(Pac-man)的图案.输入<code>Pac-man</code>,过关.</p><h1 id="level-28">Level 28</h1><p>说实话我是觉得这一题出的并不怎么好,这也是我耗时最长的一道题了.题目是很单纯的一个串:<img src="../assets/2023-05-12%2022.31.52.png"alt="谁能告诉我DHC是个啥" /></p><p>但是使用不同的搜索引擎/不同的IP属地搜索,得到的结果显然是不同的,DHC本身也有多种意思...</p><p>总之,题目要求的预期答案是DHC这一日本化妆品品牌的中文官网里提供的一个电话号码,是<code>4008208820</code>.</p><h1 id="level-29">Level 29</h1><p>x+=2,但是没有指明谁是x,尝试31(29+2)不行后果断尝试<code>4008208822</code>(4008208820+2),过关.</p><h1 id="level-30">Level 30</h1><p>5B88 671B 5148950B,一开始以为是4个16进制数字,但是想来想去跟提示中的"背景并非纯白"没啥联系,转而尝试直接解码.事实上这是Unicode编码,对应的汉字是"守望先锋".输入英文名<code>overwatch</code>,过关.</p><p>(overwatch是取字面意思"过度watch",所以才会提示背景不是纯白吗...)</p><h1 id="level-31">Level 31</h1><p>"第一只中国企鹅的昵称",检索了一下没找到什么有效信息.后来想到企鹅恐怕是QQ的爱称(QQ的图标就是企鹅嘛...),尝试QQ/OICQ/I-seek-you等均无果,最终发现预期解答其实是马化腾的英文名--<code>PONY</code>...</p><h1 id="level-32">Level 32</h1><p>题目给的提示很明显,维吉尼亚密码.直接找到在线解密工具得到答案是<code>ANDRIOD</code>,输入,过关.</p><h1 id="level-33">Level 33</h1><p>Fix it,那自然是把ANDRIOD改成正确的拼写<code>Android</code>咯~</p><h1 id="level-34">Level 34</h1><p>一个图片,题目告知提示图有干扰.拿到图片后看了看信息,发现是使用PhotoShop创建的,那就拖进PS里操作嘛...</p><p>去掉背景,但是马赛克去不掉,继续以图搜图,得到: <imgsrc="../assets/1569843-20200621192504503-66474261.png" />那就是<code>ljn</code>.输入,过关.</p><h1 id="level-35">Level 35</h1><p>题目要求"Find yourself on theInternet",这个自己肯定是不随做题人身份变化的抽象的"自己".网络上的自己的地址不就是<code>localhost</code>嘛,输入,过关.</p><h1 id="level-36">Level 36</h1><p>Markus Alexej Persson'sdeath,不懂,求助Wikipedia知道是个游戏彩蛋,顶着这个昵称进Minecraft如果死了会掉落苹果.输入<code>apple</code>,过关.</p><h1 id="level-37">Level 37</h1><p>直接把这一系列词汇翻译后拼接起来,输入<code>supercalifragilisticexpialidocious</code>,过关.后来检索得知《supercalifragilisticexpialidocious》其实是一首<ahref="https://en.wikipedia.org/wiki/Supercalifragilisticexpialidocious">电影插曲</a></p><h1 id="level-38">Level 38</h1><p>经典Misc手段.图片是压缩文件图标,但是输入几个常用的压缩软件名都无法通过,那就直接把图片下载然后解压~</p><p>得到answer.txt,但是内容却是同样的'http://nazo.one-story.cn/supercalifragilisticexpialidocious.html',于是想到这应该是递归(<code>recursion</code>),输入,过关.</p><h1 id="level-39">Level 39</h1><p>经典的一个漫画人脸,搜索可知叫<code>trollface</code>.输入过关.</p><h1 id="level-40">Level 40</h1><p>题目是一个3行的十字形数表,但是并没有观察出什么比较显然的数字规律.不过好在我对35这个数字比较敏感,过了一小会儿想到这应该是元素周期表中VII族元素那一列,那么问号处就是氯元素(<code>Chlorine</code>),输入,过关.</p><h1 id="level-41">Level 41</h1><p>Google x Huawei,搜索可知两者合作过Nexus6P.输入<code>Nexus_6P</code>,过关.</p><h1 id="level-42">Level 42</h1><p>题目要求重复「fd 30 lt 60 fd 40 rt150」五次,应该是某种指令.搜索得知是一种用来画图的语言,名为<ahref="https://www.transum.org/software/Logo/">Logo</a></p><p>在Level 1下画了画没啥发现,直接换到Level 3,画出来长这样: <imgsrc="../assets/2023-05-12%2023.21.42.png" /></p><p>但是输入四角星的各种名称都不对,后来看到四角星的一个别称是忍者(ninja)镖,再结合画图网站里的海龟图案,想到会不会是忍者神龟?输入<code>ninja_turtle</code>,过关.</p><h1 id="level-43">Level 43</h1><p>一张纯黑图片,猜到肯定其中暗藏玄机.下载到本地一通操作调整对比度和亮度:</p><p><img src="../assets/2023-05-13%2000.26.24.png" /></p><p>发现答案是<code>Dee.html</code>.输入,过关.</p><h1 id="level-44">Level 44</h1><p>直接搜图无果,观察发现题目应该是五张小旗子拼起来的,单个搜索发现是<ahref="https://zh.wikipedia.org/wiki/國際信號旗">国际海事信号旗</a>.对应的字符串是<code>poker</code>,输入过关.</p><h1 id="level-45">Level 45</h1><p>看起来应该是某种特殊的字母书写方式,Google了下发现是<ahref="https://zh.wikipedia.org/zh-hans/Leet">Leet</a></p><p>题目对应的文字是: <figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">This <span class="hljs-keyword">is</span> an example <span class="hljs-keyword">of</span> leet <span class="hljs-keyword">at</span> its finest<br>The answer <span class="hljs-keyword">is</span> : <span class="hljs-type">sigma</span><br></code></pre></td></tr></table></figure> 输入<code>sigma</code>,过关.</p><h1 id="level-46">Level 46</h1><p>还是图片,以图搜图得到<code>sanic</code>,输入过关.</p><p>按检索结果来看图片里的是动漫人物Sonic,被称为Sanic或许是个梗?不过我不感兴趣,姑且就没细看.</p><h1 id="level-47">Level 47</h1><p>还是图片,继续搜图...</p><p>搜图结果告诉我这是Excel 2000的一个彩蛋,按检索结果所述,你只需:</p><ol type="1"><li><p>打开一个Excel文件，在文件选项中点击另存为网页</p></li><li><p>在弹出的保存对话框中勾选“添加交互”，点击保存</p></li><li><p>双击打开保存的网页，将坐标定位到 (2000,WC) ，选中第 2000行，并按<code>Tab</code>键，将<code>WC</code>列变为当前的活动列</p></li><li><p>同时按住<code>Shift</code>,<code>𝐶𝑡𝑟𝑙</code>和<code>Alt</code>键，单击Excel工作簿左上角的Office标志</p></li></ol><p>这样就进入了题目中的赛车游戏.那么坐标值就是(2000,WC),输入<code>2000WC</code>,过关.</p><h1 id="level-48">Level 48</h1><p>一串数字,看起来每过1s都会加1000,自然想到<ahref="https://zh.wikipedia.org/wiki/UNIX时间">这个玩意儿</a>.尝试几次后发现预期答案为时间戳(<code>time_stamp</code>),输入,过关.</p><h1 id="level-49">Level 49</h1><p>一张图片,Git的图标,容易想到应该和Level 38是类似的隐写手段.</p><p>解压后得到一个Git仓库,存放的answer.txt里显示<code>this is not a real answer</code>.git进这个仓库查询日志,发现一共提交过三次<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">branch</span><br><br><span class="hljs-attribute">answer</span>.txt | <span class="hljs-number">2</span> +-<br><span class="hljs-attribute">1</span> file changed, <span class="hljs-number">1</span> insertion(+), <span class="hljs-number">1</span> deletion(-)<br><br><span class="hljs-attribute">commit</span> <span class="hljs-number">09</span>d0e4c0cfc5d75c2f49b51928b241b9b9cda53d (master)<br><span class="hljs-attribute">Author</span>: Dieber &lt;<span class="hljs-number">451120068</span>@qq.com&gt;<br><span class="hljs-attribute">Date</span>: Fri Jul <span class="hljs-number">20</span> <span class="hljs-number">18</span>:<span class="hljs-number">46</span>:<span class="hljs-number">32</span> <span class="hljs-number">2018</span> +<span class="hljs-number">0800</span><br><br><span class="hljs-attribute">cover</span><br><br><span class="hljs-attribute">answer</span>.txt | <span class="hljs-number">2</span> +-<br><span class="hljs-attribute">1</span> file changed, <span class="hljs-number">1</span> insertion(+), <span class="hljs-number">1</span> deletion(-)<br><br><span class="hljs-attribute">commit</span> b91dbf1a5cd95e4ad2e7842991cb1c8773f78d41<br><span class="hljs-attribute">Author</span>: Dieber &lt;<span class="hljs-number">451120068</span>@qq.com&gt;<br><span class="hljs-attribute">Date</span>: Fri Jul <span class="hljs-number">20</span> <span class="hljs-number">18</span>:<span class="hljs-number">45</span>:<span class="hljs-number">52</span> <span class="hljs-number">2018</span> +<span class="hljs-number">0800</span><br><br><span class="hljs-attribute">first</span> commit<br><br><span class="hljs-attribute">answer</span>.txt | <span class="hljs-number">1</span> +<br><span class="hljs-attribute">1</span> file changed, <span class="hljs-number">1</span> insertion(+)<br></code></pre></td></tr></table></figure> 逐次回滚,最终在firstcommit中发现answer.txt中的内容给出了我们要的答案<code>answer:gitisawesome</code>.输入<code>gitisawesome</code>,过关~</p><h1 id="level-50">Level 50</h1><p>／javascript'sauthor,提示说明应该是跟一首歌有关的.在各个平台搜索了一遍JavaScript,结果得到的歌手名都不是正确答案...后来发现我应该搜索/JavaScript才对...</p><p>网易云告诉我答案是<code>W1-2</code>,输入,搞定~</p><h1 id="旅程感想">旅程感想</h1><p>总体上来说难度有但是不高,有些题目跟CTF里的Misc题目思路还是有互通之处的,当做睡前小游戏还是蛮不错的.</p><p>(虽然还是耗费了我4个小时的时间...)</p><p>完结撒花~</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>解谜</tag>
      
      <tag>Game</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算方法-数值积分</title>
    <link href="/%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95-%E6%95%B0%E5%80%BC%E7%A7%AF%E5%88%86.html"/>
    <url>/%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95-%E6%95%B0%E5%80%BC%E7%A7%AF%E5%88%86.html</url>
    
    <content type="html"><![CDATA[<h2 id="问题定义">问题定义</h2><p>求 <spanclass="math inline">\(I(f)=\int_a^bf(x)\mathrm{d}x\)</span>，但是 <spanclass="math inline">\(f(x)\)</span> 的原函数很难求、<spanclass="math inline">\(f(x)\)</span>未明确给出（可能只是一张离散的数表），同时对计算精度没有过高的要求。</p><h2 id="机械求积公式">机械求积公式</h2><p>尝试用给定的一系列节点的函数值 <span class="math inline">\(f(x_0),f(x_1), \cdots\)</span> 来线性组合出积分的近似值，即</p><p><span class="math display">\[Q(f)=\sum_{j=0}^nf(x_j)H_j\]</span></p><p>其中，<span class="math inline">\(x_i(i=0, 1, \cdots, n)\)</span>是给出函数值的 <span class="math inline">\((n+1)\)</span> 个节点，<spanclass="math inline">\(H_j\)</span> 是与前面那 <spanclass="math inline">\((n+1)\)</span> 个节点有关，而与 <spanclass="math inline">\(f(x)\)</span>本身无关的一系列系数。显然，机械求积公式的关键是从给出的 <spanclass="math inline">\(x_i\)</span> 确定 <spanclass="math inline">\(H_j\)</span>。</p><h3 id="代数精度">代数精度</h3><p>如果一个机械求积公式，它用在所有不超过 <spanclass="math inline">\(r\)</span> 次的多项式（即 <spanclass="math inline">\(f(x)\)</span> 是不超过 <spanclass="math inline">\(r\)</span> 次的多项式）上时能精确成立，而对于<span class="math inline">\((r+1)\)</span>次多项式至少有一个不能精确成立，称这个求积公式有 <spanclass="math inline">\(r\)</span> 次代数精度。</p><p>例如，梯形公式 <spanclass="math inline">\(I_1(f)=\frac{b-a}{2}(f(a)+f(b))\)</span> 有 1次代数精度：</p><ul><li><span class="math inline">\(f(x)=1\)</span> 时，精确成立。</li><li><span class="math inline">\(f(x)=x\)</span> 时，<spanclass="math inline">\(\int_a^bx\mathrm{d}x=\frac{b^2-a^2}{2}=\frac{b-a}{2}(b+a)\)</span>，精确成立。</li><li><span class="math inline">\(f(x)=x^2\)</span> 时，不精确成立。</li></ul><h3 id="插值型求积公式">插值型求积公式</h3><p>将 <span class="math inline">\(f(x)\)</span> 在 <spanclass="math inline">\(x_0, x_1, \cdots, x_n\)</span> 处 Lagrange插值，得到 <spanclass="math inline">\(L_n(x)=\sum_{j=0}^nl_j(x)f(x_j)\)</span>，取</p><p><span class="math display">\[H_j=\int\limits_a^bl_j(x)\mathrm{d}x\]</span></p><p>来作为机械求积公式的系数，可以证明这个公式至少有 <spanclass="math inline">\(n\)</span>次代数精度。事实上，如果一个机械求积公式有 <spanclass="math inline">\(n\)</span>次及以上的代数精度，它必然是插值型的。</p><h2 id="等距节点的-newton-cotes-公式">等距节点的 Newton-Cotes 公式</h2><p>当求积节点等距时，将区间 <span class="math inline">\([a, b]\)</span>分成 <span class="math inline">\(n\)</span> 等分，记 <spanclass="math inline">\(x_0=a\)</span>，<spanclass="math inline">\(x_i=a+ih\)</span>，<spanclass="math inline">\(i=0, 1, \cdots, n\)</span>。</p><p>记 <span class="math inline">\(x=a+th\)</span>，则</p><p><span class="math display">\[\begin{aligned}H_j &amp;= \int\limits_a^bl_j(x)\mathrm{d}x \\&amp;= \int\limits_a^b\prod_{i=0,i\neqj}^n\frac{(x-x_i)}{(x_j-x_i)}\mathrm{d}x \\&amp;= \int\limits_a^b\prod_{i=0, i\neqj}^n\frac{t-i}{j-i}\mathrm{d}(a+th) \\&amp;= \frac{(-1)^{n-j}h}{j!(n-j)!}\int\limits_a^b\prod_{i=0, i\neqj}^n(t-i)\mathrm{d}t\end{aligned}\]</span></p><p>因为 <span class="math inline">\(b-a=nh\)</span>，将上式除以 <spanclass="math inline">\((b-a)\)</span>，得到</p><p><span class="math display">\[C_j=\frac{H_j}{b-a}=\frac{(-1)^{n-j}}{nj!(n-j)!}\int\limits_a^b\prod_{i=0,i\neq j}^n(t-i)\mathrm{d}t\]</span></p><p>称之为「Cotes 系数」。由此可以得到等距节点的 Newton-Cotes 公式：</p><p><span class="math display">\[Q_n(f)=(b-a)\sum_{j=0}^nC_jf(x_j)\]</span></p><h3 id="特殊情况">特殊情况</h3><ul><li><p>梯形公式：<span class="math inline">\(n=1, x_0=a,x_1=b\)</span>，</p><p><span class="math display">\[  Q_1(f)=\frac{b-a}{2}(f(a)+f(b))  \]</span></p></li><li><p>Simpson 公式（抛物线公式）：<span class="math inline">\(n=2,x_0=a, x_2=b, x_1=\frac{a+b}{2}\)</span>，</p><p><span class="math display">\[  Q_2(f)=\frac{b-a}{6}(f(a)+4f(\frac{a+b}{2})+f(b))  \]</span></p></li><li><p>Cotes 公式：<span class="math inline">\(n=4\)</span>，</p><p><span class="math display">\[  Q_4(f)=\frac{2h}{45}(7f(a)+32f(a+h)+12f(a+2h)+32f(a+3h)+7f(b))  \]</span></p></li></ul><h3 id="收敛性">收敛性</h3><p><strong>Newton-Cotes 公式并不总是收敛于积分的真值。</strong></p><h3 id="数值稳定性">数值稳定性</h3><p>设 <span class="math inline">\(f(x_i)\)</span> 的计算值为 <spanclass="math inline">\(\tilde{f}(x_i)\)</span>，且 <spanclass="math inline">\(|f(x_i)-\tilde{f}(x_i)|\leqslant\varepsilon\)</span>，则</p><p><span class="math display">\[|\sum_{j=0}^nH_jf(x_j)-\sum_{j=0}^nH_j\tilde{f}(x_j)|=|\sum_{j=0}^nH_j(f(x_j)-\tilde{f}(x_j))|\leqslant\varepsilon\sum_{j=0}^n|H_j|\]</span></p><ul><li><p>如果 <span class="math inline">\(H_j\)</span> 全是正数，有 <spanclass="math inline">\(|H_j|=H_j\)</span>，那么</p><p><span class="math display">\[  \varepsilon\sum_{j=0}^n|H_j|=\varepsilon\sum_{j=0}^nH_j=(b-a)\varepsilon  \]</span></p><p>这个误差不会因为 <span class="math inline">\(n\)</span>的增大而增大，数值稳定。</p></li><li><p>如果 <span class="math inline">\(H_j\)</span> 有正有负，则 <spanclass="math inline">\(\varepsilon\sum_{j=0}^n|H_j|\)</span> 是可能随<span class="math inline">\(n\)</span>变大而无限增长的，数值不稳定。</p></li></ul><p><strong>只有 <span class="math inline">\(n\leqslant7\)</span> 和<span class="math inline">\(n=9\)</span> 的 Newton-Cotes 公式 <spanclass="math inline">\(H_j\)</span> 是全正的。</strong></p><h3 id="代数精度与余项">代数精度与余项</h3><ul><li><p>当 <span class="math inline">\(n\)</span> 为奇数时，NC 公式有<span class="math inline">\(n\)</span> 次代数精度。设 <spanclass="math inline">\(f\in C^{n+1}[a, b]\)</span>，则总是 <spanclass="math inline">\(\exists\xi\in(a, b)\)</span>，使得</p><p><span class="math display">\[  I(f)-Q(f)=E(f)=\frac{f^{(n+1)}(\xi)}{(n+1)!}\int\limits_a^bp_{n+1}(x)\mathrm{d}x  \]</span></p></li><li><p>当 <span class="math inline">\(n\)</span> 为偶数时，NC 公式有<span class="math inline">\((n+1)\)</span> 次代数精度。设 <spanclass="math inline">\(f\in C^{n+2}[a, b]\)</span>，则总是 <spanclass="math inline">\(\exists\xi\in(a, b)\)</span>，使得</p><p><span class="math display">\[  I(f)-Q(f)=E(f)=\frac{f^{(n+2)}(\xi)}{(n+2)!}\int\limits_a^bxp_{n+1}(x)\mathrm{d}x  \]</span></p></li></ul><p>常用 NC 公式的余项（也就是误差）：</p><ul><li>梯形公式（<span class="math inline">\(n=1,h=b-a\)</span>）：<spanclass="math inline">\(-\frac{h^3}{12}f&#39;&#39;(\eta)\)</span>；</li><li>Simpson 公式（<spanclass="math inline">\(n=2,h=\frac{b-a}{2}\)</span>）：<spanclass="math inline">\(-\frac{h^5}{90}f^{(4)}(\eta)\)</span>；</li><li>Cotes 公式（<spanclass="math inline">\(n=4,h=\frac{b-a}{4}\)</span>）：<spanclass="math inline">\(-\frac{8h^7}{945}f^{(6)}(\eta)\)</span>。</li></ul><h2 id="复化的-newton-cotes-公式">复化的 Newton-Cotes 公式</h2><p>所谓「复化」，是指将区间 <span class="math inline">\([a, b]\)</span>进行 <span class="math inline">\(n\)</span>等分后，在每个小区间上用一些简单的求积公式（例如梯形公式或 Simpson公式），然后进行求和。</p><h3 id="复化的梯形公式">复化的梯形公式</h3><p>记 <span class="math inline">\(h=\frac{b-a}{n}\)</span>，<spanclass="math inline">\(x_i=x_0+ih\)</span>。</p><p><span class="math display">\[\begin{aligned}T_n&amp;=\sum_{i=0}^{n-1}\frac{h}{2}(f(x_i)+f(x_{i+1})) \\&amp;= \frac{h}{2}(f(a)+2\sum_{i=1}^{n-1}f(x_i)+f(b))\end{aligned}\]</span></p><p>如果在 <span class="math inline">\(T_n\)</span>的基础上，将每个区间平分，即 <span class="math inline">\([x_i,x_{i+1}]\to[x_i, x_{i+\frac{1}{2}}], [x_{i+\frac{1}{2}},x_{i+1}]\)</span>，得到 <span class="math inline">\(2n\)</span>等分的复化梯形公式 <spanclass="math inline">\(T_{2n}=\frac{h}{4}\sum_{i=0}^{n-1}(f(x_i)+2f(x_{i+\frac{1}{2}})+f(x_{i+1}))\)</span>。</p><p>记 <spanclass="math inline">\(U_n=h\sum_{i=0}^{n-1}f(x_{i+\frac{1}{2}})\)</span>，有</p><p><span class="math display">\[T_{2n}=\frac{1}{2}(T_n+U_n)\]</span></p><p>这提供了一种计算高阶复化梯形公式的方法。例如，要计算 <spanclass="math inline">\(T_8\)</span>，只要按 <spanclass="math inline">\(T_1\to T_2\to T_4\to T_8\)</span>的顺序算就可以了。</p><h3 id="复化的-simpson-公式">复化的 Simpson 公式</h3><p>记 <span class="math inline">\(h=\frac{b-a}n\)</span>，<spanclass="math inline">\(x_i=x_0+ih\)</span>。</p><p><span class="math display">\[\begin{aligned}S_n&amp;=\frac{h}6\sum_{i=0}^{n-1}(f(x_i)+4f(x_{i+\frac{1}{2}})+f(x_{i+1}))\\ &amp;=\frac{h}6(f(a)+4\sum_{i=0}^{n-1}f(x_{i+\frac{1}{2}})+2\sum_{i=1}^{n-1}f(x_i)+f(b))\\&amp;=\frac{1}{3}T_n+\frac{2}{3}U_n=\frac{4T_{2n}-T_n}{3}\end{aligned}\]</span></p><p>即，用高一阶的复化梯形公式就可以计算出复化 Simpson公式。这种计算方式比较方便。</p><h3 id="复化的-cotes-公式">复化的 Cotes 公式</h3><p><span class="math display">\[C_n=\frac{h}{90}(7f(a)+32\sum_{i=0}^{n-1}f(x_{i+\frac{1}{4}})+12\sum_{i=0}^{n-1}f(x_{i+\frac{1}{2}})+32\sum_{i=0}^{n-1}f(x_{i+\frac{3}{4}})+14\sum_{i=1}^{n-1}f(x_i)+7f(b))\]</span></p><p>使用 <span class="math inline">\(S_{2n}\)</span> 和 <spanclass="math inline">\(S_n\)</span> 表示：</p><p><span class="math display">\[C_n=\frac{4^2S_{2n}-S_{n}}{4^2-1}\]</span></p>]]></content>
    
    
    <categories>
      
      <category>课程笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算方法:插值与数值逼近</title>
    <link href="/%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95-%E6%8F%92%E5%80%BC%E4%B8%8E%E6%95%B0%E5%80%BC%E9%80%BC%E8%BF%91.html"/>
    <url>/%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95-%E6%8F%92%E5%80%BC%E4%B8%8E%E6%95%B0%E5%80%BC%E9%80%BC%E8%BF%91.html</url>
    
    <content type="html"><![CDATA[<h2 id="多项式插值">多项式插值</h2><p>多项式插值要做的就是,找一个多项式 <spanclass="math inline">\(y(x)=a_0+a_1x+a_2x^2+\cdots+a_nx^n\)</span>来近似任意函数 <span class="math inline">\(f(x)\)</span>。</p><p>为了让插值尽量精确，我们让 <span class="math inline">\(y(x)\)</span>经过所有的 <spanclass="math inline">\(x_i\)</span>（插值节点）。这样就得到：</p><p><span class="math display">\[\left\{\begin{aligned}a_0+a_1x_0+a_2x_0^2+\cdots+a_nx_0^n&amp;=f(x_0)\\a_0+a_1x_1+a_2x_1^2+\cdots+a_nx_1^n&amp;=f(x_1)\\&amp;\vdots \\a_0+a_1x_n+a_2x_n^2+\cdots+a_nx_n^n&amp;=f(x_n)\\\end{aligned}\right.\]</span></p><p>显然这个方程组的解是唯一的，即：多项式插值具有唯一性。Lagrange插值、Newton插值等只是得到这个方程组的解的不同方式，最终得到的结果是一样的。</p><h2 id="lagrange-插值">Lagrange 插值</h2><h3 id="计算">计算</h3><p><span class="math display">\[L(x)=\sum_{j=0}^nf(x_j)l_j(x)\]</span></p><p>其中</p><p><span class="math display">\[\begin{aligned}l_j(x)&amp;=\frac{(x-x_0)(x-x_1)\cdots(x-x_{j-1})(x-x_{j+1})\cdots(x-x_n)}{(x_j-x_0)(x_j-x_1)\cdots(x_j-x_{j-1})(x_j-x_{j+1})\cdots(x_j-x_n)}\\&amp;= \prod_{i=0, i\neq j}^n\frac{x-x_i}{x_j-x_i}\end{aligned}\]</span></p><p>事实上，<span class="math inline">\(l_j(x)\)</span> 的本质就是 <spanclass="math display">\[\left\{\begin{aligned}&amp;0, x\neq x_j\\ &amp;1, x=x_j\end{aligned}\right.\]</span> 类似布尔函数.</p><p>被插函数可以表示为 <spanclass="math inline">\(f(x)=L(x)+E(x)\)</span>，其中 <spanclass="math inline">\(E(x)\)</span> 即为误差（又叫「插值余项」）。</p><h3 id="误差-余项">误差 / 余项</h3><p><span class="math display">\[E(x)=\frac{f^{(n+1)}(\xi)}{(n+1)!}p_{n+1}(x),p_{n+1}(x)=(x-x_0)(x-x_1)\cdots(x-x_n)\]</span></p><p>其中 <span class="math inline">\(\xi\in(a, b)\)</span>。</p><p>容易得到误差上限 <spanclass="math inline">\(|E(x)|\leqslant\frac{\max\limits_{a&lt;x&lt;b}f^{(n+1)}(x)}{(n+1)!}p_{n+1}(x)\)</span>。事实上，因为多项式插值是唯一的，所有多项式插值的误差和上限都是这个东西。</p><h2 id="newton-插值">Newton 插值</h2><h3 id="计算-1">计算</h3><p>将 <span class="math inline">\(n\)</span>次插值多项式写成如下的形式：</p><p><span class="math display">\[y(x)=a_0+a_1(x-x_0)+a_2(x-x_0)(x-x_1)+\cdots+a_n(x-x_0)(x-x_1)\cdots(x-x_{n+1})\]</span></p><p>其中：</p><p><span class="math display">\[\begin{aligned}a_0 &amp;= f(x_0)\\a_1 &amp;= \frac{f(x_1)-f(x_0)}{x_1-x_0} \\a_2 &amp;=\frac{\frac{f(x_2)-f(x_0)}{x_2-x_0}-\frac{f(x_1)-f(x_0)}{x_1-x_0}}{x_2-x_1}\\&amp;\cdots\end{aligned}\]</span></p><p>为了便于表示，引入差商的定义。</p><h3 id="差商">差商</h3><p><span class="math display">\[\begin{aligned}f[x_0 x_1] &amp;= \frac{f(x_1)-f(x_0)}{x_1-x_0} \\f[x_0x_1x_2] &amp;= \frac{f[x_0x_2]-f[x_0x_1]}{x_2-x_1} \\f[x_0x_1x_2x_3] &amp;= \frac{f[x_0x_1x_3]-f[x_0x_1x_2]}{x_3-x_2} \\&amp;\cdots \\f[x_0x_1\cdots x_k] &amp;= \frac{f[x_0x_1\cdotsx_{k-2}x_k]-f[x_0x_1\cdots x_{k-2}x_{k-1}]}{x_k-x_{k-1}}\end{aligned}\]</span></p><p>从上到下依次称「一阶差商」「二阶差商」……「<spanclass="math inline">\(k\)</span> 阶差商」。可以证明，<spanclass="math inline">\(a_k=f[x_0x_1\cdots x_k], k=0, 1, 2, \cdots,n\)</span>。</p><p>用差商表示的 Newton 插值多项式：</p><p><span class="math display">\[N_n(x)=f(x_0)+f[x_0x_1](x-x_0)+f[x_0x_1x_2](x-x_0)(x-x_1)+\cdots+f[x_0x_1\cdotsx_n](x-x_0)\cdots(x-x_{n-1})\]</span></p><h3 id="误差-余项-1">误差 / 余项</h3><p><span class="math display">\[E(x)=f[x_0x_1\cdots x_nx](x-x_0)(x-x_1)\cdots(x-x_n)\]</span></p><p>由于多项式插值的唯一性，这个式子的值和 Lagrange插值的余项是相等的，由此可以得到差商和导数的关系：</p><p><span class="math display">\[f[x_0x_1\cdots x_j]=\frac{f^{(j)}(\xi_j)}{j!}\]</span></p><p>其中 <span class="math inline">\(\xi_j\in(x_0, x_j)\)</span>。</p><h2 id="差分与等距节点的插值">差分与等距节点的插值</h2><h3 id="差分">差分</h3><ul><li><span class="math inline">\(k\)</span> 阶向前差分：<spanclass="math inline">\(\Delta^kf(x)=\Delta^{k-1}f(x+h)-\Delta^{k-1}f(x)\)</span>；</li><li>0 阶向前差分：<spanclass="math inline">\(\Delta^0f(x)=f(x)\)</span>；</li><li><span class="math inline">\(k\)</span> 阶向后差分：<spanclass="math inline">\(\nabla^kf(x)=\nabla^{k-1}f(x)-\nabla^{k-1}f(x-h)\)</span>；</li><li>0 阶向后差分：<spanclass="math inline">\(\nabla^0f(x)=f(x)\)</span>；</li><li><span class="math inline">\(k\)</span> 阶中心差分：<spanclass="math inline">\(\delta^kf(x)=\delta^{k-1}f(x+\frac{h}{2})-\delta^{k-1}f(x-\frac{h}{2})\)</span>；</li><li>0 阶中心差分：<spanclass="math inline">\(\delta^0f(x)=f(x)\)</span>。</li></ul><p>向前差分与差商的关系：<span class="math inline">\(f[x_0x_1\cdotsx_k]=\frac{\Delta^kf_0}{k!h^k}=\frac{\nabla^kf_k}{k!h^k}\)</span>。</p><h3 id="newton-向前插值公式">Newton 向前插值公式</h3><p>用差分代替 Newton 插值公式中的差商：</p><p><span class="math display">\[\begin{aligned}N_n(x) =\Delta^0f_0&amp;+\frac{\Delta^1f_0}{h}(x-x_0)+\frac{\Delta^2f_0}{2!h^2}(x-x_1)(x-x_0)+\cdots\\ &amp;+\frac{\Delta^nf_0}{n!h^n}(x-x_{n-1})(x-x_{n-2})\cdots(x-x_0)\end{aligned}\]</span></p><p>用 <span class="math inline">\(x_0+th\)</span> 代替 <spanclass="math inline">\(x\)</span>：</p><p><span class="math display">\[\begin{aligned}N_n(x_0+th) &amp;= \Delta^0f_0+\Delta^1f_0t+\Delta^2f_0\frac{t(t-1)}{2!}+\cdots+\Delta^nf_0\frac{t(t-1)\cdots(t-(n-1))}{n!} \\&amp;= \sum_{j=0}^n\Delta^jf_0\frac{t(t-1)(t-2)\cdots(t-(j-1))}{j!} \\&amp;= \sum_{j=0}^n\Delta^jf_0\mathrm{C}_t^j\end{aligned}\]</span></p><p>（组合数公式：<spanclass="math inline">\(\mathrm{C}_n^m=\frac{n!}{m!(n-m)!}=\frac{n(n-1)(n-2)\cdots(n-(m-1))}{m!}\)</span>。广义的组合数中<span class="math inline">\(n\)</span> 可以是负数、小数）</p><h3 id="newton-向后插值公式">Newton 向后插值公式</h3><p>起始点选 <spanclass="math inline">\(x_n\)</span>，使用向后的差分，可以推出下面的Newton 向后插值公式。</p><p><span class="math display">\[\begin{aligned}N_n(x_n+th)&amp;=\sum_{j=0}^{n}\nabla^jf_n\frac{t(t+1)\cdots(t+j-2)(t+j-1)}{j!} \\&amp;=\sum_{j=0}^n\nabla^jf_n\mathrm{C}_{t+j-1}^{j}\end{aligned}\]</span></p><h2 id="函数的最佳平方逼近">函数的最佳平方逼近</h2><h3 id="问题描述">问题描述</h3><p>先来看连续情况.给定函数 <span class="math inline">\(f(x)\in C[a,b],x\in[a, b];\phi_0,\phi_1,\cdots,\phi_n\)</span>是<spanclass="math inline">\(C[a,b]\)</span>上n+1个线性无关函数，找一个 <spanclass="math inline">\(\phi^*(x)\in\Phi(x)=\mathrm{span}\{\phi_0(x),\phi_1(x), \cdots, \phi_n(x)\}\)</span>，使得</p><p><span class="math display">\[\int\limits_a^b\rho(x)(f(x)-\phi^*(x))^2\mathrm{d}x=\min_{\phi(x)\in\Phi(x)}\int\limits_a^b\rho(x)(f(x)-\phi(x))^2\mathrm{d}x\]</span></p><p>即左侧的积分式取得最小值。式中 <spanclass="math inline">\(\rho(x)\)</span> 是权函数，满足：</p><ul><li><span class="math inline">\(\rho(x)\geqslant 0, \forall x\in[a,b]\)</span>；</li><li><span class="math inline">\(\int_a^b\rho(x)x^k\mathrm{d}x\)</span>存在，<span class="math inline">\(\forall k=0, 1, 2,\cdots\)</span>；</li><li>对任何非负函数 <span class="math inline">\(f(x)\)</span>，若 <spanclass="math inline">\(\int_a^bf(x)\rho(x)\mathrm{d}x=0\)</span>，则<span class="math inline">\(f(x)\equiv0\)</span>。</li></ul><h3 id="求解">求解</h3><p>记 <spanclass="math inline">\(\phi^*(x)=a_0\phi_0(x)+a_1\phi_1(x)+\cdots+a_n\phi_n(x)\)</span>。</p><p>记 <span class="math inline">\(||f-\phi^*||_2^2=F(a_0, a_1, \cdots,a_n)=\int_a^b\rho(x)(f(x)-\phi^*(x))^2\mathrm{d}x\)</span>。令 <spanclass="math inline">\(\frac{\partial F}{\partial a_j}=0\)</span>，有</p><p><span class="math display">\[\begin{aligned}\int\limits_a^b\rho(x)f(x)\phi_j(x)\mathrm{d}x =a_0\int\limits_a^b\rho(x)\phi_0(x)\phi_j(x)\mathrm{d}x&amp;+a_1\int\limits_a^b\rho(x)\phi_1(x)\phi_j(x)\mathrm{d}x+\cdots\\&amp;+ a_n\int\limits_a^b\rho(x)\phi_n(x)\phi_j(x)\mathrm{d}x\end{aligned}\]</span></p><p>记 <span class="math inline">\((f, g)\)</span> 为 <spanclass="math inline">\(\int_a^b\rho(x)f(x)g(x)\mathrm{d}x\)</span>。令<span class="math inline">\(F\)</span>的所有偏导为零，得到下面的线性方程组：</p><p><span class="math display">\[\left[\begin{matrix}(\phi_0,\phi_0) &amp; (\phi_1, \phi_0) &amp; \cdots &amp; (\phi_n,\phi_0) \\(\phi_0,\phi_1) &amp; (\phi_1, \phi_1) &amp; \cdots &amp; (\phi_n,\phi_1) \\\vdots &amp; \vdots &amp; \ddots &amp; \vdots \\(\phi_0,\phi_n) &amp; (\phi_1, \phi_n) &amp; \cdots &amp; (\phi_n,\phi_n) \\\end{matrix}\right]\left[\begin{matrix}a_0 \\ a_1 \\\vdots\\a_n\end{matrix}\right]=\left[\begin{matrix}(f, \phi_0)\\(f, \phi_1)\\\vdots \\(f, \phi_n) \\\end{matrix}\right]\]</span></p><p>求解这个方程组，即可得到最佳平方逼近时的系数。</p><h3 id="误差">误差</h3><p>记 <span class="math inline">\(f-\phi^*(x)=\delta\)</span>，记 <spanclass="math inline">\(||\delta||_2^2\)</span>为「平方误差」，记它的平方根 <spanclass="math inline">\(||\delta||_2\)</span> 为「均方误差」。</p><p><span class="math display">\[\begin{aligned}||\delta||_2^2&amp;=||f-\phi^*||_2^2=(f, f)-(\phi^*, f)\\&amp;=||f||_2^2-\sum_{j=0}^na_j^*(\phi_j, f)\end{aligned}\]</span></p><h3 id="正交函数与正交多项式">正交函数与正交多项式</h3><p>对 <span class="math inline">\(f(x),g(x)\in C[a, b]\)</span>，记<spanclass="math inline">\((f,g)=\int_a^b\rho(x)f(x)g(x)\mathrm{d}x\)</span>，若<span class="math inline">\((f,g)=0\)</span>，称 <spanclass="math inline">\(f(x)\)</span>、<spanclass="math inline">\(g(x)\)</span> 在 <spanclass="math inline">\([a,b]\)</span> 上带权 <spanclass="math inline">\(\rho(x)\)</span> 正交，记作 <spanclass="math inline">\(f\bot g\)</span>。</p><p>如果函数序列 <spanclass="math inline">\(\{\phi_j\}_0^{+\infty}\)</span> 在 <spanclass="math inline">\([a, b]\)</span> 上两两带权 <spanclass="math inline">\(\rho(x)\)</span> 正交，称 <spanclass="math inline">\(\{\phi_j\}\)</span> 为 <spanclass="math inline">\([a, b]\)</span> 上带权 <spanclass="math inline">\(\rho(x)\)</span> 的正交函数族。</p><p>例如：<span class="math inline">\(1, \sin x, \cos x, \sin 2x, \cos2x, \cdots\)</span> 是在 <span class="math inline">\([-\pi,\pi]\)</span>上带权 <span class="math inline">\(\rho(x)\equiv1\)</span>的正交函数族，因为</p><p><span class="math display">\[\begin{aligned}(1, 1)&amp;=\int\limits_{-\pi}^{\pi}\mathrm{d}x=2\pi\\(\sin nx, \sin mx)&amp;=\int\limits_{-\pi}^\pi\sin nx\sinmx\mathrm{d}x=\left\{\begin{aligned}&amp;\pi,m=n\\&amp;0, m\neqn\end{aligned}\right. \\(\cos nx, \cos mx)&amp;=\int\limits_{-\pi}^\pi\cos nx\cosmx\mathrm{d}x=\left\{\begin{aligned}&amp;\pi,m=n\\&amp;0, m\neqn\end{aligned}\right. \\(\cos nx, \sin mx)&amp;=\int\limits_{-\pi}^\pi\cos nx\sinmx\mathrm{d}x=0 \\\end{aligned}\]</span></p><p>如果 <span class="math inline">\(\phi_n(x)\)</span> 为首项系数非零的<span class="math inline">\(n\)</span> 次多项式，称 <spanclass="math inline">\(\{\phi_j\}\)</span> 为正交多项式族。</p><p><img src="../assets/Untitled.png" /></p><p>使用正交多项式族作为 <span class="math inline">\(\Phi(x)\)</span>进行最佳平方逼近，这样得到的左侧矩阵是对角阵。</p><h3 id="曲线拟合最小二乘法">曲线拟合（最小二乘法）</h3><p>曲线拟合即是离散情况的最佳平方逼近问题。给定已知 <spanclass="math inline">\((m+1)\)</span> 个数据点的离散函数 <spanclass="math inline">\(f(x), x\in[a, b]\)</span>，找一个 <spanclass="math inline">\(\phi^*(x)\in\Phi(x)=\mathrm{span}\{\phi_0(x),\phi_1(x), \cdots, \phi_n(x)\}\)</span>，使得</p><p><span class="math display">\[||f-\phi^*||_2^2=F(a_0, a_1,\cdots,a_n)=\min_{\phi\in\Phi}\sum_{j=0}^m\rho(x_j)(f(x_j)-\phi(x_j))^2\]</span></p><p>定义离散情况的内积</p><p><span class="math display">\[(f,g)=\sum_{i=0}^m\rho(x_i)f(x_i)g(x_i)\]</span></p><p>使用与前文相同的解法，可以解出系数 <spanclass="math inline">\(a_i,i=0, 1, \cdots, n\)</span>。</p><p>同样可以定义离散情况下的平方误差</p><p><span class="math display">\[||\delta||_2^2=||f-\phi^*||_2^2=\sum_{i=0}^m\rho(x_i)(f_i-\phi(x_i))^2\]</span></p><p>以及均方误差</p><p><span class="math display">\[||\delta||_2=\sqrt{||\delta||_2^2}=\sqrt{\sum_{i=0}^m\rho(x_i)(f_i-\phi(x_i))^2}\]</span></p><p>特别注意，在曲线拟合这里的「均方误差」没有「均」，即不用将根号里的东西乘以<span class="math inline">\(\frac{1}{m}\)</span>。</p>]]></content>
    
    
    <categories>
      
      <category>课程笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面向对象课程第一章:Java基础</title>
    <link href="/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AF%BE%E7%A8%8B%E7%AC%AC%E4%B8%80%E7%AB%A0-Java%E5%9F%BA%E7%A1%80.html"/>
    <url>/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AF%BE%E7%A8%8B%E7%AC%AC%E4%B8%80%E7%AB%A0-Java%E5%9F%BA%E7%A1%80.html</url>
    
    <content type="html"><![CDATA[<h1 id="java-基础">Java 基础</h1><p>因为 Java 语言和 C/C++在很多语法上相似甚至完全一致（例如各种控制语句），因此这里只列出 Java 与C 家族不同的语言特性。</p><h2 id="数据类型">数据类型</h2><h3 id="基本数据类型">基本数据类型</h3><p>Java 一共有 8 种「基本数据类型」。</p><table><thead><tr class="header"><th>类型</th><th>空间</th><th>范围</th><th>备注</th></tr></thead><tbody><tr class="odd"><td>byte</td><td>1 字节</td><td><span class="math inline">\(-128 \text{--} 127\)</span></td><td></td></tr><tr class="even"><td>short</td><td>2 字节</td><td><span class="math inline">\(-2^{15}\text{--}2^{15}-1\)</span></td><td></td></tr><tr class="odd"><td>int</td><td>4 字节</td><td><span class="math inline">\(-2^{31}\text{--}2^{31} - 1\)</span></td><td></td></tr><tr class="even"><td>long</td><td>8 字节</td><td><span class="math inline">\(-2^{63}\text{--}2^{63} - 1\)</span></td><td>声明常量要加「L」</td></tr><tr class="odd"><td>float</td><td>4 字节</td><td>——</td><td>声明常量要加「F」</td></tr><tr class="even"><td>double</td><td>8 字节</td><td>——</td><td>浮点数的默认类型</td></tr><tr class="odd"><td>char</td><td>16 字节</td><td>UTF-16</td><td></td></tr><tr class="even"><td>boolean</td><td>——</td><td>false 或 true</td><td>不能用 0 和非 0 代替</td></tr></tbody></table><h3 id="引用类型">引用类型</h3><p>类 <code>class</code>、接口 <code>interface</code>和数组都是引用类型。</p><h2 id="输入输出">输入输出</h2><h3 id="输入">输入</h3><p>Java 的标准输入流是一个 <code>InputStream</code>对象，有两种常用的读取方式：</p><ul><li><p>用读字符流的方法将 <code>System.in</code> 读到一个<code>BufferedReader</code> 中。</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">BufferedReader</span> <span class="hljs-variable">stdin</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(System.in));<br>stdin.readLine() <span class="hljs-comment">// &lt;= 得到用户输入的字符串</span><br></code></pre></td></tr></table></figure></p></li><li><p>用 <code>java.util.Scanner</code> 对 <code>System.in</code>进行封装。</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Scanner</span> <span class="hljs-variable">stdin</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>stdin.nextLine() <span class="hljs-comment">// &lt;= 得到用户输入的字符串</span><br></code></pre></td></tr></table></figure></p></li></ul><h3 id="输出">输出</h3><ul><li><code>System.out.print()</code> 不换行输出。</li><li><code>System.out.println()</code> 换行输出。</li><li><code>System.out.printf()</code> 格式化输出，语法同 C 标准库的<code>printf()</code>。</li></ul><h2 id="数组">数组</h2><p>Java 中的「数组」是确定长度的，一经创建就不能再加长了。</p><h3 id="声明和创建">声明和创建</h3><p>在创建数组时，要么指定长度，要么给出所有的项。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>]; <span class="hljs-comment">// 指定长度</span><br><span class="hljs-type">double</span>[] anotherArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[]&#123; <span class="hljs-number">2.1</span>, <span class="hljs-number">4.5</span>, <span class="hljs-number">4.2</span> &#125;; <span class="hljs-comment">// 指定项</span><br></code></pre></td></tr></table></figure><h3 id="长度和索引">长度和索引</h3><p>可以使用 <code>arr.length</code> 得到一个数组的长度。数组的下标从 0开始，到 <code>length - 1</code> 结束。</p><h3 id="数组是引用类型">数组是引用类型</h3><p>所谓「引用类型」，可以理解为 C家族中的「指针」。下面的代码解释了「引用」的本质。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123; <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span> &#125;;<br>System.out.println(arr[<span class="hljs-number">2</span>]);       <span class="hljs-comment">// 打印 2</span><br>arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123; <span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span> &#125;;    <span class="hljs-comment">// 现在 arr 指向了一个新的数组，旧的数组会被 JVM 回收</span><br>System.out.println(arr[<span class="hljs-number">2</span>]);       <span class="hljs-comment">// 打印 6</span><br></code></pre></td></tr></table></figure><h3 id="数组中的引用类型">数组中的引用类型</h3><p>思考下面代码的输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">String[] name = &#123; <span class="hljs-string">&quot;HIT&quot;</span>, <span class="hljs-string">&quot;SZ&quot;</span>, <span class="hljs-string">&quot;C++&quot;</span> &#125;;<br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> name[<span class="hljs-number">2</span>];<br>name[<span class="hljs-number">2</span>] = <span class="hljs-string">&quot;Java&quot;</span>;<br>System.out.println(name[<span class="hljs-number">2</span>]);<br>System.out.println(s);<br></code></pre></td></tr></table></figure><p>结果为</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">Java</span><br><span class="hljs-comment">C</span><span class="hljs-literal">++</span><br></code></pre></td></tr></table></figure><p>内存映射图：</p><figure><img src="../assets/basicOfJava_1.png" alt="basicOfJava_1" /><figcaption aria-hidden="true">basicOfJava_1</figcaption></figure><h3 id="多维数组">「多维」数组</h3><p>没有所谓的「多维数组」，它本质上是「数组的数组」。例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[][] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>][];<br></code></pre></td></tr></table></figure><p>是一个长度为 5 的「数组」数组，它内部的 5个数组因为现在还没有初始化，所以长度可以不给出。我们当然也可以在定义给出所有的项，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[][] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[][]&#123; &#123; <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-number">2</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">9</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125; &#125;;<br></code></pre></td></tr></table></figure><p>显然，多维数组中的每一行不一定要一样长。</p><h2 id="异常">异常</h2><p>Java 的异常捕获结构为 <code>try</code> - <code>catch</code> -<code>finally</code>。其中 <code>catch</code> 和 <code>finally</code>可以只出现一个。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// 做点啥</span><br>&#125; <span class="hljs-keyword">catch</span> (<span class="hljs-comment">/** 异常 **/</span>) &#123;<br>    <span class="hljs-comment">// 出现异常时做的事</span><br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>    <span class="hljs-comment">// 不管出现异常与否都要做的事</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="类与对象">类与对象</h2><h3 id="对象">对象</h3><ol type="1"><li>定义：客观存在的具体实体，具有明确定义的状态和行为</li><li>特征：标识符、属性、操作<ol type="1"><li>属性：与对象关联的变量，描述对象的静态特性</li><li>操作：与对相关联的函数，描述对象的动态特性</li></ol></li></ol><h3 id="类">类</h3><ol type="1"><li>与对象<ol type="1"><li>类是对象的抽象，是创建对象的模板</li><li>对象是类的具体事例</li><li>同一个类可以定义多个对象</li></ol></li><li>二者比较<ol type="1"><li>类是静态的，在程序设计的时候就定义好了</li><li>对象是动态的，在程序执行的时候可以被创建、修改、删除</li></ol></li></ol><h3 id="类的构造">类的构造</h3><p>类的访问权限：</p><figure><img src="../assets/basicOfJava_2.png" alt="basicOfJava_2" /><figcaption aria-hidden="true">basicOfJava_2</figcaption></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 见上表</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">private</span> String name;    <span class="hljs-comment">// private: 只有本类能访问。</span><br><span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> age;      <span class="hljs-comment">// protected: 包外不能访问。但如果子类在包外，也能访问。</span><br><span class="hljs-type">int</span> id;                 <span class="hljs-comment">// default: 包外不能访问。如果子类在包外，也不能访问。</span><br> <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> gender;  <span class="hljs-comment">// public: 谁都可以访问</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br><span class="hljs-built_in">this</span>.name = name;<br><span class="hljs-built_in">this</span>.age = age;<br>id = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name)</span> &#123;<br><span class="hljs-built_in">this</span>(name, <span class="hljs-number">22</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="静态类">静态类</h3><ol type="1"><li>静态成员属于类所有而不是某一具体对象所有</li><li>加载时间<ol type="1"><li>静态成员在类加载的时候被静态地分配地址空间和方法的入口地址</li><li>静态属性当且仅当在类初次加载的时候初始化</li></ol></li><li>实例<ol type="1"><li>非静态对象在创建对象的时候初始化，存在多个实例副本，各个对象之间的副本不互相影响</li><li>静态对象被所有的对象共享，在内存中只有一个副本</li></ol></li><li><code>static</code>属性是全局属性，可以直接通过类名访问，所以又叫类属性</li><li>调用限制<ol type="1"><li><code>static</code> 方法不可访问非 <code>static</code> 的方法：非<code>static</code> 的对象必须要实例化才能访问调</li><li>非 <code>static</code> 的方法可以访问 <code>static</code>的方法：通过类名访问</li></ol></li><li>静态块<ol type="1"><li><p>可以放在类的任何地方，类中可以有多个 <code>static</code>块</p></li><li><p>语法：</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">static</span> &#123;<br>totalNum = <span class="hljs-number">10000</span>;<br>System.out.println(<span class="hljs-string">&quot;static block run!&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></p></li><li><p>生命周期：在类加载的时候执行且只执行一次</p></li><li><p>用法：用于初始化静态变量和调用静态方法</p></li></ol></li><li>静态是否破坏了面向对象的特性？<ol type="1"><li>静态属于类而非具体对象</li><li>具有一定程度上的全局性：初始化时加载到内存，并且所有对象有访问权限</li><li>保持类的封装性</li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>课程笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Programming</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>锐评铃芽之旅</title>
    <link href="/%E9%94%90%E8%AF%84%E9%93%83%E8%8A%BD%E4%B9%8B%E6%97%85.html"/>
    <url>/%E9%94%90%E8%AF%84%E9%93%83%E8%8A%BD%E4%B9%8B%E6%97%85.html</url>
    
    <content type="html"><![CDATA[<h1 id="铃芽之旅所传达的">铃芽之旅所传达的</h1><p>称<铃芽之旅>为新海诚三部曲之三实在是很有道理.沿袭着一贯的灾难描写的文脉,铃芽对于灾难的描写似乎更为翔实,灾难甚至成为了本片剧情的核心驱动力,对灾难中情感的表达也成为了本片表达的核心--不同于前两部仅仅着眼于对爱情的描写,人与人之间的更泛化的情感在本片中被显式地推到了台前.不论是关门时候男主明确的昭告,希望在当下的幸福能延续更久;或是女主在关门时对土地上曾有的生生不息的想象;亦或是门后的常世中宁静的生活,影片中出现的种种要素都在试图讨论着这份灾难中的泛化的感情.它关乎人与人之间的一切情感,或者说,正是人与人之间朴素的温情.</p><p>几乎可以断言的是,正是为了处理这样的更泛化的感情,新海才会选择公路片(至少算是有公路要素的片子?)这种形式以及其带来的崭新的展开方式.正是如此才让更多人的相遇成为可能,才让人在无情的灾难面前得以先验地认识到情感的温度.而对于感情的后验式的认知则是由男女主这条线来处理的.两种不同属性的关系,分别勾勒着对于感情的先验的和后验的认知.</p><h1 id="传达到了吗">传达到了吗</h1><p>事实上,两条不同的勾勒路线都没有很好地完成使命.对情感的后验式的认知要想成立,首先要求的是这份情感要先验地存在--而片中男女主关系其实是很稀薄的.诚然影片有着"女主在小时候在常世中就见过男主"这种叙事诡计,但是这并不能弥补恋爱的"单薄".一段关系如果要更馥郁,势必需要一些私密的叙事空间,像是<君名>中两人长期的互换身体体验对方的私密生活,或是<天气>中只属于两人的奋斗历程.而这样的私密空间在铃芽中是几乎不存在的.相比于<君名><天气>中新海宁愿用一个甚至多个场景去单独呈现主角间的互动,新海却让铃芽的男主在开场15分钟后即陷入掉线状态,后期也只是一直为了追寻大臣而奔忙.虽然本片的恋爱的确平淡,但是在这样的奔忙之后,却是女主的"我要去找喜欢的人了"这样一句台词直接点明了亲密关系,这种关系的厚度显然是不足的.</p><p>先验式认知的情感处理得也有同样的缺乏厚度的问题.公路旅途上的相遇虽然直白地试图展现人与人之间的温情,但是影像上的处理是如此泛化,三幕场景都只是点到为止.新海诚当然是内敛的,但是内敛不意味着蜻蜓点水,不意味着主角自身情感对观众情感的引导完全失位.为什么是失位的呢?关门时涌入铃芽耳中的是泛泛的言语和声音,人间的温情缺少一个确切的情感落地点;姨妈对铃芽的爱也是泛泛而谈--姨妈为了铃芽做的牺牲几乎只有在一次争吵中草草交代了事,同样缺少确切的情感落地点;妈妈对铃芽的爱更是几无笔墨,灾难中最亲密的人之间的情感更成为了无法落地的空中楼阁.当感情无法锚定在一个确切的时空位置,只能流于泛泛,感情的厚度必然是不足的.</p><p>关键场景的缺失,让全片对灾难的表达同样浅尝辄止.在<君名>中,我们有陨石坑上主角的相见;在<天气>中,我们有男女主的天空坠落和男主的长距离奔跑--但铃芽中缺少这么一个具有力度的场景.唯一的力度可能也只是来自于铃芽回到老家挖出的日记中写有3.11的那一页,而且也是严重不足的--尽管影片中不时穿插着涂黑日记的画面,但是铃芽找到日记的过程是如此顺利成章--没有任何犹豫和模糊.涂黑日记本身是人脑对创伤性经历不可避免的模糊化的具象,包括前文铃芽对椅子缺腿的原因的闪烁其辞也体现着这种模糊,但是找到日记的过程却没有任何模糊,甚至在找到日记后也没有任何对过往记忆的确认,3.11就这样被直接糊脸--缺少了对记忆碎片的整理,缺少了私人化的情感体验,缺少了影像上的蓄力和角色情感的倾泻,单单通过一个场外的符号,带出的表达力度真的足够吗?我的评断是否定的.而作为全片灾难的集中象征的3.11就这样被轻描淡写,全片的关键场景由此不复存在.</p><p>我们甚至还可以批评片子的演出手段.3DLO的引入让更复杂的镜头成为可能,演出上的奇观自然也多了不少--铃芽开头奔跑的跟摇,椅子追逐猫猫时的多个运动镜头...但是奇观多了就一定好吗?如果奇观没有地基支撑,那么奇观的泛滥就只会像对着观众喊"狼来了"一般,最终使得奇观也无法调动观众的注意力.当然本片不少奇观造的都不错,但是总归是有那么几个缺少地基(比如开头的跟摇).而且我们还没有说到这些奇观画面上的不协调.</p><h1 id="铃芽背后的其他">铃芽背后的其他</h1><p>尽管闭门师在竭力避免蚓厄的发生,但<铃芽>中却放置了一个不可改变不可避免的"3.11".由此我们可以断言,<铃芽>某种程度上是对于灾难的再认知--与<你的名字>中试图挽回灾难中失去的爱人,<天气之子>中主动选择爱人拥抱灾难不同的是,<铃芽>中的核心灾难,也即"3.11,"首先是被放在一个不可处置的地位的.因此影片的所有情节都是在接受这一事实的基础上加以展开,而完全不同于前作中的"反抗"要素.</p><p><铃芽>中的新海在尽力告诉观众,接受灾难并坚定地生活下去才是面对灾难的解药,领悟了这一点后我们就能明白为什么3条腿的草太椅子依然能灵活地奔跑,即使是失去了曾经拥有的一条腿--即使灾后失去了曾经拥有的美好生活,我们依然能接受这一事实,我们生活如常,社会运转如常.</p><p>但是这种如常的背后并非不存在隐忧.灾难带来的伤痛真的就能随着时间流逝,随着一份轻描淡写的"接受"之心,而散入记忆的长河直至无影无踪吗?新海的回答当然是否定的,正如他自述的那样,"3.11"依然是他创作过程中的持续低音;正如影片中那座游乐场,始终停留在人们心中无法抹去;正如铃芽涂黑的一页页日记,总是在梦中闯入她的思绪.</p><p>不如说铃芽执意回老家正是为了寻求一份和解,事实上灾难中的幸存者或许都需要这份和解.铃芽在门中看到的辽阔的常世,那里面并不是悲伤,而是失去了情感的记忆.这种麻木是值得警惕的.可以猜测,要石的身体之所以冷若冰霜,正是因为对失去的哀叹化作了无边的麻木与虚无.幸存者也好,要石也好,都需要在对灾难的反复审视中确认生的可贵,从而让生的动力支撑自己在此时此地多停留一刻甚至一秒.</p><p><铃芽>关注的正是这种"后灾难"的疗愈,是痛苦背后更深刻的创伤的弥合过程.新海给出的回答,不是随着时间试着遗忘,而是在追思与审视中,了解生的可贵;影片中的灾难不再是一种需要避讳的苦难,而是需要确认的人生必然.</p><p>对新海来说,这何尝不是一种进步呢?</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
      <category>动画</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动画评论</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
